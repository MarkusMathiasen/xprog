<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<tagfile>
  <compound kind="file">
    <name>algorithm</name>
    <filename>cpp/header/algorithm</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>any</name>
    <filename>cpp/header/any</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>array</name>
    <filename>cpp/header/array</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>atomic</name>
    <filename>cpp/header/atomic</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>bit</name>
    <filename>cpp/header/bit</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>bitset</name>
    <filename>cpp/header/bitset</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cassert</name>
    <filename>cpp/header/cassert</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>ccomplex</name>
    <filename>cpp/header/ccomplex</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cctype</name>
    <filename>cpp/header/cctype</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cerrno</name>
    <filename>cpp/header/cerrno</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cfenv</name>
    <filename>cpp/header/cfenv</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cfloat</name>
    <filename>cpp/header/cfloat</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>charconv</name>
    <filename>cpp/header/charconv</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>chrono</name>
    <filename>cpp/header/chrono</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cinttypes</name>
    <filename>cpp/header/cinttypes</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>ciso646</name>
    <filename>cpp/header/ciso646</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>climits</name>
    <filename>cpp/header/climits</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>clocale</name>
    <filename>cpp/header/clocale</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cmath</name>
    <filename>cpp/header/cmath</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>codecvt</name>
    <filename>cpp/header/codecvt</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>compare</name>
    <filename>cpp/header/compare</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>complex</name>
    <filename>cpp/header/complex</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>concepts</name>
    <filename>cpp/header/concepts</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>condition_variable</name>
    <filename>cpp/header/condition_variable</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>contract</name>
    <filename>cpp/header/contract</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>csetjmp</name>
    <filename>cpp/header/csetjmp</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>csignal</name>
    <filename>cpp/header/csignal</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cstdalign</name>
    <filename>cpp/header/cstdalign</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cstdarg</name>
    <filename>cpp/header/cstdarg</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cstdbool</name>
    <filename>cpp/header/cstdbool</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cstddef</name>
    <filename>cpp/header/cstddef</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cstdint</name>
    <filename>cpp/header/cstdint</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cstdio</name>
    <filename>cpp/header/cstdio</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cstdlib</name>
    <filename>cpp/header/cstdlib</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cstring</name>
    <filename>cpp/header/cstring</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>ctgmath</name>
    <filename>cpp/header/ctgmath</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>ctime</name>
    <filename>cpp/header/ctime</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cuchar</name>
    <filename>cpp/header/cuchar</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cwchar</name>
    <filename>cpp/header/cwchar</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>cwctype</name>
    <filename>cpp/header/cwctype</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>deque</name>
    <filename>cpp/header/deque</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>exception</name>
    <filename>cpp/header/exception</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>execution</name>
    <filename>cpp/header/execution</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>filesystem</name>
    <filename>cpp/header/filesystem</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>forward_list</name>
    <filename>cpp/header/forward_list</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>fstream</name>
    <filename>cpp/header/fstream</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>functional</name>
    <filename>cpp/header/functional</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>future</name>
    <filename>cpp/header/future</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>initializer_list</name>
    <filename>cpp/header/initializer_list</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>iomanip</name>
    <filename>cpp/header/iomanip</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>ios</name>
    <filename>cpp/header/ios</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>iosfwd</name>
    <filename>cpp/header/iosfwd</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>iostream</name>
    <filename>cpp/header/iostream</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>istream</name>
    <filename>cpp/header/istream</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>iterator</name>
    <filename>cpp/header/iterator</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>limits</name>
    <filename>cpp/header/limits</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>list</name>
    <filename>cpp/header/list</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>locale</name>
    <filename>cpp/header/locale</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>map</name>
    <filename>cpp/header/map</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>memory</name>
    <filename>cpp/header/memory</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>memory_resource</name>
    <filename>cpp/header/memory_resource</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>mutex</name>
    <filename>cpp/header/mutex</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>new</name>
    <filename>cpp/header/new</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>numeric</name>
    <filename>cpp/header/numeric</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>optional</name>
    <filename>cpp/header/optional</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>ostream</name>
    <filename>cpp/header/ostream</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>queue</name>
    <filename>cpp/header/queue</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>random</name>
    <filename>cpp/header/random</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>ranges</name>
    <filename>cpp/header/ranges</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>ratio</name>
    <filename>cpp/header/ratio</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>regex</name>
    <filename>cpp/header/regex</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>scoped_allocator</name>
    <filename>cpp/header/scoped_allocator</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>set</name>
    <filename>cpp/header/set</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>shared_mutex</name>
    <filename>cpp/header/shared_mutex</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>span</name>
    <filename>cpp/header/span</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>sstream</name>
    <filename>cpp/header/sstream</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>stack</name>
    <filename>cpp/header/stack</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>stdexcept</name>
    <filename>cpp/header/stdexcept</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>streambuf</name>
    <filename>cpp/header/streambuf</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>string</name>
    <filename>cpp/header/string</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>string_view</name>
    <filename>cpp/header/string_view</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>strstream</name>
    <filename>cpp/header/strstream</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>syncstream</name>
    <filename>cpp/header/syncstream</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>system_error</name>
    <filename>cpp/header/system_error</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>thread</name>
    <filename>cpp/header/thread</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>tuple</name>
    <filename>cpp/header/tuple</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>type_traits</name>
    <filename>cpp/header/type_traits</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>typeindex</name>
    <filename>cpp/header/typeindex</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>typeinfo</name>
    <filename>cpp/header/typeinfo</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>unordered_map</name>
    <filename>cpp/header/unordered_map</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>unordered_set</name>
    <filename>cpp/header/unordered_set</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>utility</name>
    <filename>cpp/header/utility</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>valarray</name>
    <filename>cpp/header/valarray</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>variant</name>
    <filename>cpp/header/variant</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>vector</name>
    <filename>cpp/header/vector</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>version</name>
    <filename>cpp/header/version</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename></filename>
    <class kind="class">std::FILE</class>
    <member kind="function">
      <type>T</type>
      <name>_Exit</name>
      <anchorfile>en/cpp/utility/program/_Exit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>abort</name>
      <anchorfile>en/cpp/utility/program/abort.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>abs(float)</name>
      <anchorfile>en/cpp/numeric/math/fabs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>abs(int)</name>
      <anchorfile>en/cpp/numeric/math/abs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>accumulate</name>
      <anchorfile>en/cpp/algorithm/accumulate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>acos</name>
      <anchorfile>en/cpp/numeric/math/acos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>acosh</name>
      <anchorfile>en/cpp/numeric/math/acosh.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::add_const</class>
    <class kind="class">std::add_const_t</class>
    <class kind="class">std::add_cv</class>
    <class kind="class">std::add_cv_t</class>
    <class kind="class">std::add_lvalue_reference</class>
    <class kind="class">std::add_lvalue_reference_t</class>
    <class kind="class">std::add_pointer</class>
    <class kind="class">std::add_pointer_t</class>
    <class kind="class">std::add_rvalue_reference</class>
    <class kind="class">std::add_rvalue_reference_t</class>
    <class kind="class">std::add_volatile</class>
    <class kind="class">std::add_volatile_t</class>
    <member kind="function">
      <type>T</type>
      <name>addressof</name>
      <anchorfile>en/cpp/memory/addressof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>adjacent_difference</name>
      <anchorfile>en/cpp/algorithm/adjacent_difference.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>adjacent_find</name>
      <anchorfile>en/cpp/algorithm/adjacent_find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::adopt_lock_t</class>
    <member kind="function">
      <type>T</type>
      <name>advance</name>
      <anchorfile>en/cpp/iterator/advance.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>align</name>
      <anchorfile>en/cpp/memory/align.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::align_val_t</class>
    <member kind="function">
      <type>T</type>
      <name>aligned_alloc</name>
      <anchorfile>en/cpp/memory/c/aligned_alloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::aligned_storage</class>
    <class kind="class">std::aligned_storage_t</class>
    <class kind="class">std::aligned_union</class>
    <class kind="class">std::aligned_union_t</class>
    <class kind="class">std::alignment_of</class>
    <member kind="variable">
      <type>T</type>
      <name>alignment_of_v</name>
      <anchorfile>en/cpp/types/alignment_of.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>all_of</name>
      <anchorfile>en/cpp/algorithm/all_any_none_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>allocate_shared</name>
      <anchorfile>en/cpp/memory/shared_ptr/allocate_shared.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::allocator</class>
    <class kind="class">std::allocator_arg_t</class>
    <class kind="class">std::allocator_traits</class>
    <class kind="class">std::any</class>
    <member kind="function">
      <type>T</type>
      <name>any_cast</name>
      <anchorfile>en/cpp/utility/any/any_cast.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>any_of</name>
      <anchorfile>en/cpp/algorithm/all_any_none_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply</name>
      <anchorfile>en/cpp/utility/apply.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::array</class>
    <member kind="function">
      <type>T</type>
      <name>as_const</name>
      <anchorfile>en/cpp/utility/as_const.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>asctime</name>
      <anchorfile>en/cpp/chrono/c/asctime.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>asin</name>
      <anchorfile>en/cpp/numeric/math/asin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>asinh</name>
      <anchorfile>en/cpp/numeric/math/asinh.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assoc_laguerre</name>
      <anchorfile>en/cpp/numeric/special_math/assoc_laguerre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assoc_laguerref</name>
      <anchorfile>en/cpp/numeric/special_math/assoc_laguerre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assoc_laguerrel</name>
      <anchorfile>en/cpp/numeric/special_math/assoc_laguerre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assoc_legendre</name>
      <anchorfile>en/cpp/numeric/special_math/assoc_legendre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assoc_legendref</name>
      <anchorfile>en/cpp/numeric/special_math/assoc_legendre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assoc_legendrel</name>
      <anchorfile>en/cpp/numeric/special_math/assoc_legendre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assume_aligned</name>
      <anchorfile>en/cpp/memory/assume_aligned.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>async</name>
      <anchorfile>en/cpp/thread/async.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at_quick_exit</name>
      <anchorfile>en/cpp/utility/program/at_quick_exit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atan</name>
      <anchorfile>en/cpp/numeric/math/atan.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atan2</name>
      <anchorfile>en/cpp/numeric/math/atan2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atanh</name>
      <anchorfile>en/cpp/numeric/math/atanh.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atexit</name>
      <anchorfile>en/cpp/utility/program/atexit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atof</name>
      <anchorfile>en/cpp/string/byte/atof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atoi</name>
      <anchorfile>en/cpp/string/byte/atoi.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atol</name>
      <anchorfile>en/cpp/string/byte/atoi.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atoll</name>
      <anchorfile>en/cpp/string/byte/atoi.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::atomic</class>
    <class kind="class">std::atomic_bool</class>
    <class kind="class">std::atomic_char16_t</class>
    <class kind="class">std::atomic_char32_t</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic_compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_compare_exchange_strong_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic_compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_compare_exchange_weak_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_exchange</name>
      <anchorfile>en/cpp/atomic/atomic_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_exchange_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_add_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_and_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_or_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_sub_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_fetch_xor_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::atomic_flag</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_init</name>
      <anchorfile>en/cpp/atomic/atomic_init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::atomic_int</class>
    <class kind="class">std::atomic_int16_t</class>
    <class kind="class">std::atomic_int32_t</class>
    <class kind="class">std::atomic_int64_t</class>
    <class kind="class">std::atomic_int8_t</class>
    <class kind="class">std::atomic_int_fast16_t</class>
    <class kind="class">std::atomic_int_fast32_t</class>
    <class kind="class">std::atomic_int_fast64_t</class>
    <class kind="class">std::atomic_int_fast8_t</class>
    <class kind="class">std::atomic_int_least16_t</class>
    <class kind="class">std::atomic_int_least32_t</class>
    <class kind="class">std::atomic_int_least64_t</class>
    <class kind="class">std::atomic_int_least8_t</class>
    <class kind="class">std::atomic_intmax_t</class>
    <class kind="class">std::atomic_intptr_t</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic_is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::atomic_llong</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_load</name>
      <anchorfile>en/cpp/atomic/atomic_load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_load_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::atomic_long</class>
    <class kind="class">std::atomic_ptrdiff_t</class>
    <class kind="class">std::atomic_ref</class>
    <class kind="class">std::atomic_schar</class>
    <class kind="class">std::atomic_short</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_signal_fence</name>
      <anchorfile>en/cpp/atomic/atomic_signal_fence.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::atomic_size_t</class>
    <member kind="function">
      <type>T</type>
      <name>atomic_store</name>
      <anchorfile>en/cpp/atomic/atomic_store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_store_explicit</name>
      <anchorfile>en/cpp/atomic/atomic_store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>atomic_thread_fence</name>
      <anchorfile>en/cpp/atomic/atomic_thread_fence.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::atomic_uchar</class>
    <class kind="class">std::atomic_uint</class>
    <class kind="class">std::atomic_uint16_t</class>
    <class kind="class">std::atomic_uint32_t</class>
    <class kind="class">std::atomic_uint64_t</class>
    <class kind="class">std::atomic_uint8_t</class>
    <class kind="class">std::atomic_uint_fast16_t</class>
    <class kind="class">std::atomic_uint_fast32_t</class>
    <class kind="class">std::atomic_uint_fast64_t</class>
    <class kind="class">std::atomic_uint_fast8_t</class>
    <class kind="class">std::atomic_uint_least16_t</class>
    <class kind="class">std::atomic_uint_least32_t</class>
    <class kind="class">std::atomic_uint_least64_t</class>
    <class kind="class">std::atomic_uint_least8_t</class>
    <class kind="class">std::atomic_uintmax_t</class>
    <class kind="class">std::atomic_uintptr_t</class>
    <class kind="class">std::atomic_ullong</class>
    <class kind="class">std::atomic_ulong</class>
    <class kind="class">std::atomic_ushort</class>
    <class kind="class">std::atomic_wchar_t</class>
    <class kind="class">std::auto_ptr</class>
    <class kind="class">std::back_insert_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>back_inserter</name>
      <anchorfile>en/cpp/iterator/back_inserter.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bad_alloc</class>
    <class kind="class">std::bad_any_cast</class>
    <class kind="class">std::bad_array_new_length</class>
    <class kind="class">std::bad_cast</class>
    <class kind="class">std::bad_exception</class>
    <class kind="class">std::bad_function_call</class>
    <class kind="class">std::bad_optional_access</class>
    <class kind="class">std::bad_typeid</class>
    <class kind="class">std::bad_variant_access</class>
    <class kind="class">std::bad_weak_ptr</class>
    <class kind="class">std::basic_common_reference</class>
    <class kind="class">std::basic_filebuf</class>
    <class kind="class">std::basic_fstream</class>
    <class kind="class">std::basic_ifstream</class>
    <class kind="class">std::basic_ios</class>
    <class kind="class">std::basic_iostream</class>
    <class kind="class">std::basic_istream</class>
    <class kind="class">std::basic_istringstream</class>
    <class kind="class">std::basic_ofstream</class>
    <class kind="class">std::basic_ostream</class>
    <class kind="class">std::basic_ostringstream</class>
    <class kind="class">std::basic_osyncstream</class>
    <class kind="class">std::basic_regex</class>
    <class kind="class">std::basic_streambuf</class>
    <class kind="class">std::basic_string</class>
    <class kind="class">std::basic_string_view</class>
    <class kind="class">std::basic_stringbuf</class>
    <class kind="class">std::basic_stringstream</class>
    <class kind="class">std::basic_syncbuf</class>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/iterator/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bernoulli_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>beta</name>
      <anchorfile>en/cpp/numeric/special_math/beta.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>betaf</name>
      <anchorfile>en/cpp/numeric/special_math/beta.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>betal</name>
      <anchorfile>en/cpp/numeric/special_math/beta.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bidirectional_iterator_tag</class>
    <class kind="class">std::binary_function</class>
    <class kind="class">std::binary_negate</class>
    <member kind="function">
      <type>T</type>
      <name>binary_search</name>
      <anchorfile>en/cpp/algorithm/binary_search.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bind</name>
      <anchorfile>en/cpp/utility/functional/bind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bind_front</name>
      <anchorfile>en/cpp/utility/functional/bind_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::binomial_distribution</class>
    <class kind="class">std::bit_and</class>
    <class kind="class">std::bit_not</class>
    <class kind="class">std::bit_or</class>
    <class kind="class">std::bit_xor</class>
    <class kind="class">std::bitset</class>
    <class kind="class">std::bool_constant</class>
    <member kind="function">
      <type>T</type>
      <name>boolalpha</name>
      <anchorfile>en/cpp/io/manip/boolalpha.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::boyer_moore_horspool_searcher</class>
    <class kind="class">std::boyer_moore_searcher</class>
    <member kind="function">
      <type>T</type>
      <name>bsearch</name>
      <anchorfile>en/cpp/algorithm/bsearch.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>btowc</name>
      <anchorfile>en/cpp/string/multibyte/btowc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::byte</class>
    <member kind="function">
      <type>T</type>
      <name>c16rtomb</name>
      <anchorfile>en/cpp/string/multibyte/c16rtomb.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c32rtomb</name>
      <anchorfile>en/cpp/string/multibyte/c32rtomb.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c8rtomb</name>
      <anchorfile>en/cpp/string/multibyte/c8rtomb.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>call_once</name>
      <anchorfile>en/cpp/thread/call_once.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calloc</name>
      <anchorfile>en/cpp/memory/c/calloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::cauchy_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/iterator/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbrt</name>
      <anchorfile>en/cpp/numeric/math/cbrt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ceil</name>
      <anchorfile>en/cpp/numeric/math/ceil.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/iterator/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::centi</class>
    <class kind="class">std::cerr</class>
    <class kind="class">std::char_traits</class>
    <class kind="class">std::chars_format</class>
    <class kind="class">std::chi_squared_distribution</class>
    <namespace>std::chrono</namespace>
    <class kind="class">std::cin</class>
    <member kind="function">
      <type>T</type>
      <name>clamp</name>
      <anchorfile>en/cpp/algorithm/clamp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clearerr</name>
      <anchorfile>en/cpp/io/c/clearerr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clock</name>
      <anchorfile>en/cpp/chrono/c/clock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::clock_t</class>
    <class kind="class">std::clog</class>
    <class kind="class">std::cmatch</class>
    <class kind="class">std::codecvt</class>
    <class kind="class">std::codecvt_base</class>
    <class kind="class">std::codecvt_byname</class>
    <class kind="class">std::codecvt_utf16</class>
    <class kind="class">std::codecvt_utf8</class>
    <class kind="class">std::codecvt_utf8_utf16</class>
    <class kind="class">std::collate</class>
    <class kind="class">std::collate_byname</class>
    <class kind="class">std::common_comparison_category</class>
    <class kind="class">std::common_comparison_category_t</class>
    <class kind="class">std::common_reference</class>
    <class kind="class">std::common_reference_t</class>
    <class kind="class">std::common_type</class>
    <class kind="class">std::common_type_t</class>
    <member kind="function">
      <type>T</type>
      <name>comp_ellint_1</name>
      <anchorfile>en/cpp/numeric/special_math/comp_ellint_1.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>comp_ellint_1f</name>
      <anchorfile>en/cpp/numeric/special_math/comp_ellint_1.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>comp_ellint_1l</name>
      <anchorfile>en/cpp/numeric/special_math/comp_ellint_1.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>comp_ellint_2</name>
      <anchorfile>en/cpp/numeric/special_math/comp_ellint_2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>comp_ellint_2f</name>
      <anchorfile>en/cpp/numeric/special_math/comp_ellint_2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>comp_ellint_2l</name>
      <anchorfile>en/cpp/numeric/special_math/comp_ellint_2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>comp_ellint_3</name>
      <anchorfile>en/cpp/numeric/special_math/comp_ellint_3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>comp_ellint_3f</name>
      <anchorfile>en/cpp/numeric/special_math/comp_ellint_3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>comp_ellint_3l</name>
      <anchorfile>en/cpp/numeric/special_math/comp_ellint_3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_3way</name>
      <anchorfile>en/cpp/algorithm/compare_3way.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::complex</class>
    <class kind="class">std::condition_variable</class>
    <class kind="class">std::condition_variable_any</class>
    <class kind="class">std::conditional</class>
    <class kind="class">std::conditional_t</class>
    <class kind="class">std::conjunction</class>
    <member kind="variable">
      <type>T</type>
      <name>conjunction_v</name>
      <anchorfile>en/cpp/types/conjunction.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>const_pointer_cast</name>
      <anchorfile>en/cpp/memory/shared_ptr/pointer_cast.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/algorithm/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy_backward</name>
      <anchorfile>en/cpp/algorithm/copy_backward.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy_if</name>
      <anchorfile>en/cpp/algorithm/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy_n</name>
      <anchorfile>en/cpp/algorithm/copy_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copysign</name>
      <anchorfile>en/cpp/numeric/math/copysign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cos</name>
      <anchorfile>en/cpp/numeric/math/cos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cosh</name>
      <anchorfile>en/cpp/numeric/math/cosh.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/algorithm/count_if.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count_if</name>
      <anchorfile>en/cpp/algorithm/count_if.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::cout</class>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/iterator/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cref</name>
      <anchorfile>en/cpp/utility/functional/ref.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::cregex_iterator</class>
    <class kind="class">std::cregex_token_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/iterator/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::csub_match</class>
    <member kind="function">
      <type>T</type>
      <name>ctime</name>
      <anchorfile>en/cpp/chrono/c/ctime.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ctype</class>
    <class kind="class">std::ctype_base</class>
    <class kind="class">std::ctype_byname</class>
    <member kind="function">
      <type>T</type>
      <name>current_exception</name>
      <anchorfile>en/cpp/error/current_exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_bessel_i</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_bessel_i.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_bessel_if</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_bessel_i.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_bessel_il</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_bessel_i.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_bessel_j</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_bessel_j.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_bessel_jf</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_bessel_j.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_bessel_jl</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_bessel_j.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_bessel_k</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_bessel_k.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_bessel_kf</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_bessel_k.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_bessel_kl</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_bessel_k.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_neumann</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_neumann.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_neumannf</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_neumann.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cyl_neumannl</name>
      <anchorfile>en/cpp/numeric/special_math/cyl_neumann.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/iterator/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dec</name>
      <anchorfile>en/cpp/io/manip/hex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::deca</class>
    <class kind="class">std::decay</class>
    <class kind="class">std::decay_t</class>
    <class kind="class">std::deci</class>
    <member kind="function">
      <type>T</type>
      <name>declare_no_pointers</name>
      <anchorfile>en/cpp/memory/gc/declare_no_pointers.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>declare_reachable</name>
      <anchorfile>en/cpp/memory/gc/declare_reachable.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>declval</name>
      <anchorfile>en/cpp/utility/declval.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::default_delete</class>
    <class kind="class">std::default_random_engine</class>
    <class kind="class">std::default_searcher</class>
    <member kind="function">
      <type>T</type>
      <name>defaultfloat</name>
      <anchorfile>en/cpp/io/manip/fixed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::defer_lock_t</class>
    <class kind="class">std::deque</class>
    <member kind="function">
      <type>T</type>
      <name>destroy</name>
      <anchorfile>en/cpp/memory/destroy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>destroy_at</name>
      <anchorfile>en/cpp/memory/destroy_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>destroy_n</name>
      <anchorfile>en/cpp/memory/destroy_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>difftime</name>
      <anchorfile>en/cpp/chrono/c/difftime.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::discard_block_engine</class>
    <class kind="class">std::discrete_distribution</class>
    <class kind="class">std::disjunction</class>
    <member kind="variable">
      <type>T</type>
      <name>disjunction_v</name>
      <anchorfile>en/cpp/types/disjunction.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distance</name>
      <anchorfile>en/cpp/iterator/distance.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>div</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::div_t</class>
    <class kind="class">std::divides</class>
    <class kind="class">std::domain_error</class>
    <member kind="function">
      <type>T</type>
      <name>dynamic_pointer_cast</name>
      <anchorfile>en/cpp/memory/shared_ptr/pointer_cast.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ellint_1</name>
      <anchorfile>en/cpp/numeric/special_math/ellint_1.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ellint_1f</name>
      <anchorfile>en/cpp/numeric/special_math/ellint_1.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ellint_1l</name>
      <anchorfile>en/cpp/numeric/special_math/ellint_1.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ellint_2</name>
      <anchorfile>en/cpp/numeric/special_math/ellint_2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ellint_2f</name>
      <anchorfile>en/cpp/numeric/special_math/ellint_2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ellint_2l</name>
      <anchorfile>en/cpp/numeric/special_math/ellint_2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ellint_3</name>
      <anchorfile>en/cpp/numeric/special_math/ellint_3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ellint_3f</name>
      <anchorfile>en/cpp/numeric/special_math/ellint_3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ellint_3l</name>
      <anchorfile>en/cpp/numeric/special_math/ellint_3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emit_on_flush</name>
      <anchorfile>en/cpp/io/manip/emit_on_flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/iterator/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::enable_if</class>
    <class kind="class">std::enable_if_t</class>
    <class kind="class">std::enable_shared_from_this</class>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/iterator/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>endl</name>
      <anchorfile>en/cpp/io/manip/endl.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends</name>
      <anchorfile>en/cpp/io/manip/ends.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal</name>
      <anchorfile>en/cpp/algorithm/equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/algorithm/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::equal_to</class>
    <member kind="function">
      <type>T</type>
      <name>erf</name>
      <anchorfile>en/cpp/numeric/math/erf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erfc</name>
      <anchorfile>en/cpp/numeric/math/erfc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::errc</class>
    <class kind="class">std::error_category</class>
    <class kind="class">std::error_code</class>
    <class kind="class">std::error_condition</class>
    <class kind="class">std::exa</class>
    <class kind="class">std::exception</class>
    <class kind="class">std::exception_ptr</class>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/utility/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exclusive_scan</name>
      <anchorfile>en/cpp/algorithm/exclusive_scan.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <namespace>std::execution</namespace>
    <member kind="function">
      <type>T</type>
      <name>exit</name>
      <anchorfile>en/cpp/utility/program/exit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exp</name>
      <anchorfile>en/cpp/numeric/math/exp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exp2</name>
      <anchorfile>en/cpp/numeric/math/exp2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <namespace>std::experimental</namespace>
    <member kind="function">
      <type>T</type>
      <name>expint</name>
      <anchorfile>en/cpp/numeric/special_math/expint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expintf</name>
      <anchorfile>en/cpp/numeric/special_math/expint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expintl</name>
      <anchorfile>en/cpp/numeric/special_math/expint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expm1</name>
      <anchorfile>en/cpp/numeric/math/expm1.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::exponential_distribution</class>
    <class kind="class">std::extent</class>
    <member kind="variable">
      <type>T</type>
      <name>extent_v</name>
      <anchorfile>en/cpp/types/extent.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::extreme_value_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>fabs</name>
      <anchorfile>en/cpp/numeric/math/fabs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::false_type</class>
    <member kind="function">
      <type>T</type>
      <name>fclose</name>
      <anchorfile>en/cpp/io/c/fclose.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fdim</name>
      <anchorfile>en/cpp/numeric/math/fdim.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>feclearexcept</name>
      <anchorfile>en/cpp/numeric/fenv/feclearexcept.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fegetenv</name>
      <anchorfile>en/cpp/numeric/fenv/feenv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fegetexceptflag</name>
      <anchorfile>en/cpp/numeric/fenv/feexceptflag.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fegetround</name>
      <anchorfile>en/cpp/numeric/fenv/feround.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>feholdexcept</name>
      <anchorfile>en/cpp/numeric/fenv/feholdexcept.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::femto</class>
    <member kind="function">
      <type>T</type>
      <name>feof</name>
      <anchorfile>en/cpp/io/c/feof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>feraiseexcept</name>
      <anchorfile>en/cpp/numeric/fenv/feraiseexcept.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ferror</name>
      <anchorfile>en/cpp/io/c/ferror.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fesetenv</name>
      <anchorfile>en/cpp/numeric/fenv/feenv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fesetexceptflag</name>
      <anchorfile>en/cpp/numeric/fenv/feexceptflag.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fesetround</name>
      <anchorfile>en/cpp/numeric/fenv/feround.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetestexcept</name>
      <anchorfile>en/cpp/numeric/fenv/fetestexcept.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>feupdateenv</name>
      <anchorfile>en/cpp/numeric/fenv/feupdateenv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fflush</name>
      <anchorfile>en/cpp/io/c/fflush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fgetc</name>
      <anchorfile>en/cpp/io/c/fgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fgetpos</name>
      <anchorfile>en/cpp/io/c/fgetpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fgets</name>
      <anchorfile>en/cpp/io/c/fgets.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fgetwc</name>
      <anchorfile>en/cpp/io/c/fgetwc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fgetws</name>
      <anchorfile>en/cpp/io/c/fgetws.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::filebuf</class>
    <namespace>std::filesystem</namespace>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/algorithm/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fill_n</name>
      <anchorfile>en/cpp/algorithm/fill_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/algorithm/find_if_not.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_end</name>
      <anchorfile>en/cpp/algorithm/find_end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/algorithm/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_if</name>
      <anchorfile>en/cpp/algorithm/find_if_not.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_if_not</name>
      <anchorfile>en/cpp/algorithm/find_if_not.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fisher_f_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>fixed</name>
      <anchorfile>en/cpp/io/manip/fixed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>floor</name>
      <anchorfile>en/cpp/numeric/math/floor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/manip/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush_emit</name>
      <anchorfile>en/cpp/io/manip/flush_emit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fma</name>
      <anchorfile>en/cpp/numeric/math/fma.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fmax</name>
      <anchorfile>en/cpp/numeric/math/fmax.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fmin</name>
      <anchorfile>en/cpp/numeric/math/fmin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fmod</name>
      <anchorfile>en/cpp/numeric/math/fmod.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fopen</name>
      <anchorfile>en/cpp/io/c/fopen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>for_each</name>
      <anchorfile>en/cpp/algorithm/for_each.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>for_each_n</name>
      <anchorfile>en/cpp/algorithm/for_each_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>forward</name>
      <anchorfile>en/cpp/utility/forward.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>forward_as_tuple</name>
      <anchorfile>en/cpp/utility/tuple/forward_as_tuple.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::forward_iterator_tag</class>
    <class kind="class">std::forward_list</class>
    <member kind="function">
      <type>T</type>
      <name>fpclassify</name>
      <anchorfile>en/cpp/numeric/math/fpclassify.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fpos</class>
    <class kind="class">std::fpos_t</class>
    <member kind="function">
      <type>T</type>
      <name>fprintf</name>
      <anchorfile>en/cpp/io/c/printf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fputc</name>
      <anchorfile>en/cpp/io/c/fputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fputs</name>
      <anchorfile>en/cpp/io/c/fputs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fputwc</name>
      <anchorfile>en/cpp/io/c/fputwc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fputws</name>
      <anchorfile>en/cpp/io/c/fputws.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fread</name>
      <anchorfile>en/cpp/io/c/fread.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>free</name>
      <anchorfile>en/cpp/memory/c/free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>freopen</name>
      <anchorfile>en/cpp/io/c/freopen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>frexp</name>
      <anchorfile>en/cpp/numeric/math/frexp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>from_chars</name>
      <anchorfile>en/cpp/utility/from_chars.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::front_insert_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>front_inserter</name>
      <anchorfile>en/cpp/iterator/front_inserter.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fscanf</name>
      <anchorfile>en/cpp/io/c/scanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fseek</name>
      <anchorfile>en/cpp/io/c/fseek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fsetpos</name>
      <anchorfile>en/cpp/io/c/fsetpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fstream</class>
    <member kind="function">
      <type>T</type>
      <name>ftell</name>
      <anchorfile>en/cpp/io/c/ftell.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::function</class>
    <class kind="class">std::future</class>
    <member kind="function">
      <type>T</type>
      <name>future_category</name>
      <anchorfile>en/cpp/thread/future_category.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::future_errc</class>
    <class kind="class">std::future_error</class>
    <member kind="function">
      <type>T</type>
      <name>fwprintf</name>
      <anchorfile>en/cpp/io/c/fwprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fwrite</name>
      <anchorfile>en/cpp/io/c/fwrite.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fwscanf</name>
      <anchorfile>en/cpp/io/c/fwscanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::gamma_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>gcd</name>
      <anchorfile>en/cpp/numeric/gcd.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generate</name>
      <anchorfile>en/cpp/algorithm/generate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generate_canonical</name>
      <anchorfile>en/cpp/numeric/random/generate_canonical.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generate_n</name>
      <anchorfile>en/cpp/algorithm/generate_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_category</name>
      <anchorfile>en/cpp/error/generic_category.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::geometric_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>get_if</name>
      <anchorfile>en/cpp/utility/variant/get_if.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_money</name>
      <anchorfile>en/cpp/io/manip/get_money.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_new_handler</name>
      <anchorfile>en/cpp/memory/new/get_new_handler.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_pointer_safety</name>
      <anchorfile>en/cpp/memory/gc/get_pointer_safety.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_temporary_buffer</name>
      <anchorfile>en/cpp/memory/get_temporary_buffer.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_terminate</name>
      <anchorfile>en/cpp/error/get_terminate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_time</name>
      <anchorfile>en/cpp/io/manip/get_time.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_unexpected</name>
      <anchorfile>en/cpp/error/get_unexpected.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getc</name>
      <anchorfile>en/cpp/io/c/fgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getchar</name>
      <anchorfile>en/cpp/io/c/getchar.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getenv</name>
      <anchorfile>en/cpp/utility/program/getenv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/string/basic_string/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gets</name>
      <anchorfile>en/cpp/io/c/gets.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getwchar</name>
      <anchorfile>en/cpp/io/c/getwchar.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::giga</class>
    <member kind="function">
      <type>T</type>
      <name>gmtime</name>
      <anchorfile>en/cpp/chrono/c/gmtime.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::greater</class>
    <class kind="class">std::greater_equal</class>
    <class kind="class">std::gslice</class>
    <class kind="class">std::gslice_array</class>
    <member kind="function">
      <type>T</type>
      <name>has_facet</name>
      <anchorfile>en/cpp/locale/has_facet.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::has_unique_object_representations</class>
    <member kind="variable">
      <type>T</type>
      <name>has_unique_object_representations_v</name>
      <anchorfile>en/cpp/types/has_unique_object_representations.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::has_virtual_destructor</class>
    <member kind="variable">
      <type>T</type>
      <name>has_virtual_destructor_v</name>
      <anchorfile>en/cpp/types/has_virtual_destructor.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::hash</class>
    <class kind="class">std::hecto</class>
    <member kind="function">
      <type>T</type>
      <name>hermite</name>
      <anchorfile>en/cpp/numeric/special_math/hermite.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hermitef</name>
      <anchorfile>en/cpp/numeric/special_math/hermite.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hermitel</name>
      <anchorfile>en/cpp/numeric/special_math/hermite.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hex</name>
      <anchorfile>en/cpp/io/manip/hex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hexfloat</name>
      <anchorfile>en/cpp/io/manip/fixed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>holds_alternative</name>
      <anchorfile>en/cpp/utility/variant/holds_alternative.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hypot</name>
      <anchorfile>en/cpp/numeric/math/hypot.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::identity</class>
    <class kind="class">std::ifstream</class>
    <member kind="function">
      <type>T</type>
      <name>ilogb</name>
      <anchorfile>en/cpp/numeric/math/ilogb.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imaxdiv</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::imaxdiv_t</class>
    <member kind="variable">
      <type>T</type>
      <name>in_place</name>
      <anchorfile>en/cpp/utility/in_place.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>in_place_index</name>
      <anchorfile>en/cpp/utility/in_place.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::in_place_index_t</class>
    <class kind="class">std::in_place_t</class>
    <member kind="variable">
      <type>T</type>
      <name>in_place_type</name>
      <anchorfile>en/cpp/utility/in_place.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::in_place_type_t</class>
    <member kind="function">
      <type>T</type>
      <name>includes</name>
      <anchorfile>en/cpp/algorithm/includes.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>inclusive_scan</name>
      <anchorfile>en/cpp/algorithm/inclusive_scan.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::incrementable_traits</class>
    <class kind="class">std::independent_bits_engine</class>
    <class kind="class">std::index_sequence</class>
    <class kind="class">std::index_sequence_for</class>
    <class kind="class">std::indirect_array</class>
    <class kind="class">std::initializer_list</class>
    <member kind="function">
      <type>T</type>
      <name>inner_product</name>
      <anchorfile>en/cpp/algorithm/inner_product.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>inplace_merge</name>
      <anchorfile>en/cpp/algorithm/inplace_merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::input_iterator_tag</class>
    <class kind="class">std::insert_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>inserter</name>
      <anchorfile>en/cpp/iterator/inserter.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::int16_t</class>
    <class kind="class">std::int32_t</class>
    <class kind="class">std::int64_t</class>
    <class kind="class">std::int8_t</class>
    <class kind="class">std::int_fast16_t</class>
    <class kind="class">std::int_fast32_t</class>
    <class kind="class">std::int_fast64_t</class>
    <class kind="class">std::int_fast8_t</class>
    <class kind="class">std::int_least16_t</class>
    <class kind="class">std::int_least32_t</class>
    <class kind="class">std::int_least64_t</class>
    <class kind="class">std::int_least8_t</class>
    <class kind="class">std::integer_sequence</class>
    <class kind="class">std::integral_constant</class>
    <member kind="function">
      <type>T</type>
      <name>internal</name>
      <anchorfile>en/cpp/io/manip/left.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::intmax_t</class>
    <class kind="class">std::intptr_t</class>
    <class kind="class">std::invalid_argument</class>
    <member kind="function">
      <type>T</type>
      <name>invoke</name>
      <anchorfile>en/cpp/utility/functional/invoke.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::invoke_result</class>
    <class kind="class">std::invoke_result_t</class>
    <class kind="class">std::io_errc</class>
    <class kind="class">std::ios_base</class>
    <class kind="class">std::iostream</class>
    <member kind="function">
      <type>T</type>
      <name>iostream_category</name>
      <anchorfile>en/cpp/io/iostream_category.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iota</name>
      <anchorfile>en/cpp/algorithm/iota.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_abstract</class>
    <member kind="variable">
      <type>T</type>
      <name>is_abstract_v</name>
      <anchorfile>en/cpp/types/is_abstract.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_aggregate</class>
    <member kind="variable">
      <type>T</type>
      <name>is_aggregate_v</name>
      <anchorfile>en/cpp/types/is_aggregate.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_arithmetic</class>
    <member kind="variable">
      <type>T</type>
      <name>is_arithmetic_v</name>
      <anchorfile>en/cpp/types/is_arithmetic.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_array</class>
    <member kind="variable">
      <type>T</type>
      <name>is_array_v</name>
      <anchorfile>en/cpp/types/is_array.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_assignable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_assignable_v</name>
      <anchorfile>en/cpp/types/is_assignable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_base_of</class>
    <member kind="variable">
      <type>T</type>
      <name>is_base_of_v</name>
      <anchorfile>en/cpp/types/is_base_of.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_bind_expression</class>
    <member kind="variable">
      <type>T</type>
      <name>is_bind_expression_v</name>
      <anchorfile>en/cpp/utility/functional/is_bind_expression.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_bounded_array</class>
    <member kind="variable">
      <type>T</type>
      <name>is_bounded_array_v</name>
      <anchorfile>en/cpp/types/is_bounded_array.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_class</class>
    <member kind="variable">
      <type>T</type>
      <name>is_class_v</name>
      <anchorfile>en/cpp/types/is_class.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_compound</class>
    <member kind="variable">
      <type>T</type>
      <name>is_compound_v</name>
      <anchorfile>en/cpp/types/is_compound.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_const</class>
    <member kind="variable">
      <type>T</type>
      <name>is_const_v</name>
      <anchorfile>en/cpp/types/is_const.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_constant_evaluated</name>
      <anchorfile>en/cpp/types/is_constant_evaluated.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_constructible_v</name>
      <anchorfile>en/cpp/types/is_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_convertible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_convertible_v</name>
      <anchorfile>en/cpp/types/is_convertible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_copy_assignable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_copy_assignable_v</name>
      <anchorfile>en/cpp/types/is_copy_assignable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_copy_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_copy_constructible_v</name>
      <anchorfile>en/cpp/types/is_copy_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_default_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_default_constructible_v</name>
      <anchorfile>en/cpp/types/is_default_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_destructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_destructible_v</name>
      <anchorfile>en/cpp/types/is_destructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_empty</class>
    <member kind="variable">
      <type>T</type>
      <name>is_empty_v</name>
      <anchorfile>en/cpp/types/is_empty.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_enum</class>
    <member kind="variable">
      <type>T</type>
      <name>is_enum_v</name>
      <anchorfile>en/cpp/types/is_enum.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_eq</name>
      <anchorfile>en/cpp/utility/compare/named_comparison_functions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_error_code_enum</class>
    <class kind="class">std::is_error_code_enum_v</class>
    <class kind="class">std::is_error_condition_enum</class>
    <member kind="variable">
      <type>T</type>
      <name>is_error_condition_enum_v</name>
      <anchorfile>en/cpp/error/error_condition/is_error_condition_enum.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_execution_policy</class>
    <member kind="variable">
      <type>T</type>
      <name>is_execution_policy_v</name>
      <anchorfile>en/cpp/algorithm/is_execution_policy.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_final</class>
    <member kind="variable">
      <type>T</type>
      <name>is_final_v</name>
      <anchorfile>en/cpp/types/is_final.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_floating_point</class>
    <member kind="variable">
      <type>T</type>
      <name>is_floating_point_v</name>
      <anchorfile>en/cpp/types/is_floating_point.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_function</class>
    <member kind="variable">
      <type>T</type>
      <name>is_function_v</name>
      <anchorfile>en/cpp/types/is_function.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_fundamental</class>
    <member kind="variable">
      <type>T</type>
      <name>is_fundamental_v</name>
      <anchorfile>en/cpp/types/is_fundamental.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_gt</name>
      <anchorfile>en/cpp/utility/compare/named_comparison_functions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_gteq</name>
      <anchorfile>en/cpp/utility/compare/named_comparison_functions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_heap</name>
      <anchorfile>en/cpp/algorithm/is_heap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_heap_until</name>
      <anchorfile>en/cpp/algorithm/is_heap_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_integral</class>
    <member kind="variable">
      <type>T</type>
      <name>is_integral_v</name>
      <anchorfile>en/cpp/types/is_integral.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_invocable</class>
    <class kind="class">std::is_invocable_r</class>
    <member kind="variable">
      <type>T</type>
      <name>is_invocable_r_v</name>
      <anchorfile>en/cpp/types/is_invocable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_invocable_v</name>
      <anchorfile>en/cpp/types/is_invocable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_literal_type</class>
    <member kind="variable">
      <type>T</type>
      <name>is_literal_type_v</name>
      <anchorfile>en/cpp/types/is_literal_type.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lt</name>
      <anchorfile>en/cpp/utility/compare/named_comparison_functions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lteq</name>
      <anchorfile>en/cpp/utility/compare/named_comparison_functions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_lvalue_reference</class>
    <member kind="variable">
      <type>T</type>
      <name>is_lvalue_reference_v</name>
      <anchorfile>en/cpp/types/is_lvalue_reference.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_member_function_pointer</class>
    <member kind="variable">
      <type>T</type>
      <name>is_member_function_pointer_v</name>
      <anchorfile>en/cpp/types/is_member_function_pointer.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_member_object_pointer</class>
    <member kind="variable">
      <type>T</type>
      <name>is_member_object_pointer_v</name>
      <anchorfile>en/cpp/types/is_member_object_pointer.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_member_pointer</class>
    <member kind="variable">
      <type>T</type>
      <name>is_member_pointer_v</name>
      <anchorfile>en/cpp/types/is_member_pointer.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_move_assignable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_move_assignable_v</name>
      <anchorfile>en/cpp/types/is_move_assignable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_move_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_move_constructible_v</name>
      <anchorfile>en/cpp/types/is_move_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_neq</name>
      <anchorfile>en/cpp/utility/compare/named_comparison_functions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_nothrow_assignable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_assignable_v</name>
      <anchorfile>en/cpp/types/is_assignable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_constructible_v</name>
      <anchorfile>en/cpp/types/is_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_convertible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_convertible_v</name>
      <anchorfile>en/cpp/types/is_convertible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_copy_assignable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_copy_assignable_v</name>
      <anchorfile>en/cpp/types/is_copy_assignable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_copy_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_copy_constructible_v</name>
      <anchorfile>en/cpp/types/is_copy_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_default_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_default_constructible_v</name>
      <anchorfile>en/cpp/types/is_default_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_destructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_destructible_v</name>
      <anchorfile>en/cpp/types/is_destructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_invocable</class>
    <class kind="class">std::is_nothrow_invocable_r</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_invocable_r_v</name>
      <anchorfile>en/cpp/types/is_invocable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_invocable_v</name>
      <anchorfile>en/cpp/types/is_invocable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_move_assignable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_move_assignable_v</name>
      <anchorfile>en/cpp/types/is_move_assignable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_move_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_move_constructible_v</name>
      <anchorfile>en/cpp/types/is_move_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_swappable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_swappable_v</name>
      <anchorfile>en/cpp/types/is_swappable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_nothrow_swappable_with</class>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_swappable_with_v</name>
      <anchorfile>en/cpp/types/is_swappable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_null_pointer</class>
    <member kind="variable">
      <type>T</type>
      <name>is_null_pointer_v</name>
      <anchorfile>en/cpp/types/is_null_pointer.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_object</class>
    <member kind="variable">
      <type>T</type>
      <name>is_object_v</name>
      <anchorfile>en/cpp/types/is_object.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_partitioned</name>
      <anchorfile>en/cpp/algorithm/is_partitioned.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_permutation</name>
      <anchorfile>en/cpp/algorithm/is_permutation.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_placeholder</class>
    <member kind="variable">
      <type>T</type>
      <name>is_placeholder_v</name>
      <anchorfile>en/cpp/utility/functional/is_placeholder.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_pod</class>
    <member kind="variable">
      <type>T</type>
      <name>is_pod_v</name>
      <anchorfile>en/cpp/types/is_pod.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_pointer</class>
    <member kind="variable">
      <type>T</type>
      <name>is_pointer_v</name>
      <anchorfile>en/cpp/types/is_pointer.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_polymorphic</class>
    <member kind="variable">
      <type>T</type>
      <name>is_polymorphic_v</name>
      <anchorfile>en/cpp/types/is_polymorphic.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_reference</class>
    <member kind="variable">
      <type>T</type>
      <name>is_reference_v</name>
      <anchorfile>en/cpp/types/is_reference.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_rvalue_reference</class>
    <member kind="variable">
      <type>T</type>
      <name>is_rvalue_reference_v</name>
      <anchorfile>en/cpp/types/is_rvalue_reference.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_same</class>
    <member kind="variable">
      <type>T</type>
      <name>is_same_v</name>
      <anchorfile>en/cpp/types/is_same.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_scalar</class>
    <member kind="variable">
      <type>T</type>
      <name>is_scalar_v</name>
      <anchorfile>en/cpp/types/is_scalar.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_signed</class>
    <member kind="variable">
      <type>T</type>
      <name>is_signed_v</name>
      <anchorfile>en/cpp/types/is_signed.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_sorted</name>
      <anchorfile>en/cpp/algorithm/is_sorted.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_sorted_until</name>
      <anchorfile>en/cpp/algorithm/is_sorted_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::is_standard_layout</class>
    <member kind="variable">
      <type>T</type>
      <name>is_standard_layout_v</name>
      <anchorfile>en/cpp/types/is_standard_layout.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_swappable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_swappable_v</name>
      <anchorfile>en/cpp/types/is_swappable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_swappable_with</class>
    <member kind="variable">
      <type>T</type>
      <name>is_swappable_with_v</name>
      <anchorfile>en/cpp/types/is_swappable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivial</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivial_v</name>
      <anchorfile>en/cpp/types/is_trivial.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivially_assignable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_assignable_v</name>
      <anchorfile>en/cpp/types/is_assignable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivially_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_constructible_v</name>
      <anchorfile>en/cpp/types/is_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivially_copy_assignable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_copy_assignable_v</name>
      <anchorfile>en/cpp/types/is_copy_assignable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivially_copy_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_copy_constructible_v</name>
      <anchorfile>en/cpp/types/is_copy_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivially_copyable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_copyable_v</name>
      <anchorfile>en/cpp/types/is_trivially_copyable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivially_default_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_default_constructible_v</name>
      <anchorfile>en/cpp/types/is_default_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivially_destructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_destructible_v</name>
      <anchorfile>en/cpp/types/is_destructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivially_move_assignable</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_move_assignable_v</name>
      <anchorfile>en/cpp/types/is_move_assignable.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_trivially_move_constructible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_move_constructible_v</name>
      <anchorfile>en/cpp/types/is_move_constructible.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_unbounded_array</class>
    <member kind="variable">
      <type>T</type>
      <name>is_unbounded_array_v</name>
      <anchorfile>en/cpp/types/is_unbounded_array.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_union</class>
    <member kind="variable">
      <type>T</type>
      <name>is_union_v</name>
      <anchorfile>en/cpp/types/is_union.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_unsigned</class>
    <member kind="variable">
      <type>T</type>
      <name>is_unsigned_v</name>
      <anchorfile>en/cpp/types/is_unsigned.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_void</class>
    <member kind="variable">
      <type>T</type>
      <name>is_void_v</name>
      <anchorfile>en/cpp/types/is_void.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::is_volatile</class>
    <member kind="variable">
      <type>T</type>
      <name>is_volatile_v</name>
      <anchorfile>en/cpp/types/is_volatile.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isalnum (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/isalnum.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isalnum (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/isalnum.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isalpha (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/isalpha.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isalpha (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/isalpha.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isblank (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/isblank.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isblank (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/isblank.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iscntrl (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/iscntrl.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iscntrl (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/iscntrl.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isdigit (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/isdigit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isdigit (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/isdigit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isfinite</name>
      <anchorfile>en/cpp/numeric/math/isfinite.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isgraph (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/isgraph.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isgraph (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/isgraph.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isinf</name>
      <anchorfile>en/cpp/numeric/math/isinf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>islower (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/islower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>islower (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/islower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isnan</name>
      <anchorfile>en/cpp/numeric/math/isnan.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isnormal</name>
      <anchorfile>en/cpp/numeric/math/isnormal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isprint (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/isprint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isprint (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/isprint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ispunct (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/ispunct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ispunct (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/ispunct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isspace (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/isspace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isspace (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/isspace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istream</class>
    <class kind="class">std::istream_iterator</class>
    <class kind="class">std::istreambuf_iterator</class>
    <class kind="class">std::istringstream</class>
    <class kind="class">std::istrstream</class>
    <member kind="function">
      <type>T</type>
      <name>isupper (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/isupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isupper (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/isupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswalnum</name>
      <anchorfile>en/cpp/string/wide/iswalnum.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswalpha</name>
      <anchorfile>en/cpp/string/wide/iswalpha.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswblank</name>
      <anchorfile>en/cpp/string/wide/iswblank.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswcntrl</name>
      <anchorfile>en/cpp/string/wide/iswcntrl.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswctype</name>
      <anchorfile>en/cpp/string/wide/iswctype.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswdigit</name>
      <anchorfile>en/cpp/string/wide/iswdigit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswgraph</name>
      <anchorfile>en/cpp/string/wide/iswgraph.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswlower</name>
      <anchorfile>en/cpp/string/wide/iswlower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswprint</name>
      <anchorfile>en/cpp/string/wide/iswprint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswpunct</name>
      <anchorfile>en/cpp/string/wide/iswpunct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswspace</name>
      <anchorfile>en/cpp/string/wide/iswspace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswupper</name>
      <anchorfile>en/cpp/string/wide/iswupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iswxdigit</name>
      <anchorfile>en/cpp/string/wide/iswxdigit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isxdigit (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/isxdigit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isxdigit (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/isxdigit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::iter_common_reference_t</class>
    <class kind="class">std::iter_difference_t</class>
    <class kind="class">std::iter_reference_t</class>
    <class kind="class">std::iter_rvalue_reference_t</class>
    <member kind="function">
      <type>T</type>
      <name>iter_swap</name>
      <anchorfile>en/cpp/algorithm/iter_swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::iter_value_t</class>
    <class kind="class">std::iterator</class>
    <class kind="class">std::iterator_traits</class>
    <class kind="class">std::jmp_buf</class>
    <member kind="function">
      <type>T</type>
      <name>kill_dependency</name>
      <anchorfile>en/cpp/atomic/kill_dependency.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::kilo</class>
    <class kind="class">std::knuth_b</class>
    <member kind="function">
      <type>T</type>
      <name>labs</name>
      <anchorfile>en/cpp/numeric/math/abs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>laguerre</name>
      <anchorfile>en/cpp/numeric/special_math/laguerre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>laguerref</name>
      <anchorfile>en/cpp/numeric/special_math/laguerre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>laguerrel</name>
      <anchorfile>en/cpp/numeric/special_math/laguerre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>launder</name>
      <anchorfile>en/cpp/utility/launder.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lcm</name>
      <anchorfile>en/cpp/numeric/lcm.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::lconv</class>
    <member kind="function">
      <type>T</type>
      <name>ldexp</name>
      <anchorfile>en/cpp/numeric/math/ldexp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ldiv</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ldiv_t</class>
    <member kind="function">
      <type>T</type>
      <name>left</name>
      <anchorfile>en/cpp/io/manip/left.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>legendre</name>
      <anchorfile>en/cpp/numeric/special_math/legendre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>legendref</name>
      <anchorfile>en/cpp/numeric/special_math/legendre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>legendrel</name>
      <anchorfile>en/cpp/numeric/special_math/legendre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::length_error</class>
    <class kind="class">std::less</class>
    <class kind="class">std::less_equal</class>
    <member kind="function">
      <type>T</type>
      <name>lexicographical_compare</name>
      <anchorfile>en/cpp/algorithm/lexicographical_compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lexicographical_compare_3way</name>
      <anchorfile>en/cpp/algorithm/lexicographical_compare_3way.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lgamma</name>
      <anchorfile>en/cpp/numeric/math/lgamma.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::linear_congruential_engine</class>
    <class kind="class">std::list</class>
    <member kind="function">
      <type>T</type>
      <name>llabs</name>
      <anchorfile>en/cpp/numeric/math/abs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lldiv</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::lldiv_t</class>
    <member kind="function">
      <type>T</type>
      <name>llrint</name>
      <anchorfile>en/cpp/numeric/math/rint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>llround</name>
      <anchorfile>en/cpp/numeric/math/round.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::locale</class>
    <member kind="function">
      <type>T</type>
      <name>localeconv</name>
      <anchorfile>en/cpp/locale/localeconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>localtime</name>
      <anchorfile>en/cpp/chrono/c/localtime.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/thread/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::lock_guard</class>
    <member kind="function">
      <type>T</type>
      <name>log</name>
      <anchorfile>en/cpp/numeric/math/log.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>log10</name>
      <anchorfile>en/cpp/numeric/math/log10.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>log1p</name>
      <anchorfile>en/cpp/numeric/math/log1p.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>logb</name>
      <anchorfile>en/cpp/numeric/math/logb.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::logic_error</class>
    <class kind="class">std::logical_and</class>
    <class kind="class">std::logical_not</class>
    <class kind="class">std::logical_or</class>
    <class kind="class">std::lognormal_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>longjmp</name>
      <anchorfile>en/cpp/utility/program/longjmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>en/cpp/algorithm/lower_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lrint</name>
      <anchorfile>en/cpp/numeric/math/rint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lround</name>
      <anchorfile>en/cpp/numeric/math/round.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_any</name>
      <anchorfile>en/cpp/utility/any/make_any.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::make_boyer_moore_horspool_searcher</class>
    <class kind="class">std::make_boyer_moore_searcher</class>
    <class kind="class">std::make_default_searcher</class>
    <member kind="function">
      <type>T</type>
      <name>make_exception_ptr</name>
      <anchorfile>en/cpp/error/make_exception_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_from_tuple</name>
      <anchorfile>en/cpp/utility/make_from_tuple.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_heap</name>
      <anchorfile>en/cpp/algorithm/make_heap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::make_index_sequence</class>
    <class kind="class">std::make_integer_sequence</class>
    <member kind="function">
      <type>T</type>
      <name>make_move_iterator</name>
      <anchorfile>en/cpp/iterator/make_move_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_obj_using_allocator</name>
      <anchorfile>en/cpp/memory/make_obj_using_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_optional</name>
      <anchorfile>en/cpp/utility/optional/make_optional.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_pair</name>
      <anchorfile>en/cpp/utility/pair/make_pair.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_reverse_iterator</name>
      <anchorfile>en/cpp/iterator/make_reverse_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_shared</name>
      <anchorfile>en/cpp/memory/shared_ptr/make_shared.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::make_signed</class>
    <class kind="class">std::make_signed_t</class>
    <member kind="function">
      <type>T</type>
      <name>make_tuple</name>
      <anchorfile>en/cpp/utility/tuple/make_tuple.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_unique</name>
      <anchorfile>en/cpp/memory/unique_ptr/make_unique.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::make_unsigned</class>
    <class kind="class">std::make_unsigned_t</class>
    <member kind="function">
      <type>T</type>
      <name>malloc</name>
      <anchorfile>en/cpp/memory/c/malloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::map</class>
    <class kind="class">std::mask_array</class>
    <class kind="class">std::match_results</class>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/algorithm/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::max_align_t</class>
    <member kind="function">
      <type>T</type>
      <name>max_element</name>
      <anchorfile>en/cpp/algorithm/max_element.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mblen</name>
      <anchorfile>en/cpp/string/multibyte/mblen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbrlen</name>
      <anchorfile>en/cpp/string/multibyte/mbrlen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbrtoc16</name>
      <anchorfile>en/cpp/string/multibyte/mbrtoc16.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbrtoc32</name>
      <anchorfile>en/cpp/string/multibyte/mbrtoc32.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbrtoc8</name>
      <anchorfile>en/cpp/string/multibyte/mbrtoc8.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbrtowc</name>
      <anchorfile>en/cpp/string/multibyte/mbrtowc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbsinit</name>
      <anchorfile>en/cpp/string/multibyte/mbsinit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbsrtowcs</name>
      <anchorfile>en/cpp/string/multibyte/mbsrtowcs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::mbstate_t</class>
    <member kind="function">
      <type>T</type>
      <name>mbstowcs</name>
      <anchorfile>en/cpp/string/multibyte/mbstowcs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mbtowc</name>
      <anchorfile>en/cpp/string/multibyte/mbtowc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::mega</class>
    <member kind="function">
      <type>T</type>
      <name>mem_fn</name>
      <anchorfile>en/cpp/utility/functional/mem_fn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>memchr</name>
      <anchorfile>en/cpp/string/byte/memchr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>memcmp</name>
      <anchorfile>en/cpp/string/byte/memcmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>memcpy</name>
      <anchorfile>en/cpp/string/byte/memcpy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>memmove</name>
      <anchorfile>en/cpp/string/byte/memmove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>memset</name>
      <anchorfile>en/cpp/string/byte/memset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/algorithm/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::mersenne_twister_engine</class>
    <class kind="class">std::messages</class>
    <class kind="class">std::messages_base</class>
    <class kind="class">std::messages_byname</class>
    <class kind="class">std::micro</class>
    <class kind="class">std::milli</class>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/algorithm/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min_element</name>
      <anchorfile>en/cpp/algorithm/min_element.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>minmax</name>
      <anchorfile>en/cpp/algorithm/minmax.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>minmax_element</name>
      <anchorfile>en/cpp/algorithm/minmax_element.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::minstd_rand</class>
    <class kind="class">std::minstd_rand0</class>
    <class kind="class">std::minus</class>
    <member kind="function">
      <type>T</type>
      <name>mismatch</name>
      <anchorfile>en/cpp/algorithm/mismatch.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mktime</name>
      <anchorfile>en/cpp/chrono/c/mktime.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>modf</name>
      <anchorfile>en/cpp/numeric/math/modf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::modulus</class>
    <class kind="class">std::money_base</class>
    <class kind="class">std::money_get</class>
    <class kind="class">std::money_put</class>
    <class kind="class">std::moneypunct</class>
    <class kind="class">std::moneypunct_byname</class>
    <class kind="class">std::monostate</class>
    <member kind="function">
      <type>T</type>
      <name>move (algorithm)</name>
      <anchorfile>en/cpp/algorithm/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move (utility)</name>
      <anchorfile>en/cpp/utility/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move_backward</name>
      <anchorfile>en/cpp/algorithm/move_backward.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move_if_noexcept</name>
      <anchorfile>en/cpp/utility/move_if_noexcept.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::move_iterator</class>
    <class kind="class">std::mt19937</class>
    <class kind="class">std::mt19937_64</class>
    <class kind="class">std::multimap</class>
    <class kind="class">std::multiplies</class>
    <class kind="class">std::multiset</class>
    <class kind="class">std::mutex</class>
    <member kind="function">
      <type>T</type>
      <name>nan</name>
      <anchorfile>en/cpp/numeric/math/nan.2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nanf</name>
      <anchorfile>en/cpp/numeric/math/nan.2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nanl</name>
      <anchorfile>en/cpp/numeric/math/nan.2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::nano</class>
    <member kind="function">
      <type>T</type>
      <name>nearbyint</name>
      <anchorfile>en/cpp/numeric/math/nearbyint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::negate</class>
    <class kind="class">std::negation</class>
    <member kind="variable">
      <type>T</type>
      <name>negation_v</name>
      <anchorfile>en/cpp/types/negation.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::negative_binomial_distribution</class>
    <class kind="class">std::nested_exception</class>
    <class kind="class">std::new_handler</class>
    <member kind="function">
      <type>T</type>
      <name>next</name>
      <anchorfile>en/cpp/iterator/next.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>next_permutation</name>
      <anchorfile>en/cpp/algorithm/next_permutation.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nextafter</name>
      <anchorfile>en/cpp/numeric/math/nextafter.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nexttoward</name>
      <anchorfile>en/cpp/numeric/math/nextafter.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>no_emit_on_flush</name>
      <anchorfile>en/cpp/io/manip/emit_on_flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>noboolalpha</name>
      <anchorfile>en/cpp/io/manip/boolalpha.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>none_of</name>
      <anchorfile>en/cpp/algorithm/all_any_none_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::normal_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>noshowbase</name>
      <anchorfile>en/cpp/io/manip/showbase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>noshowpoint</name>
      <anchorfile>en/cpp/io/manip/showpoint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>noshowpos</name>
      <anchorfile>en/cpp/io/manip/showpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>noskipws</name>
      <anchorfile>en/cpp/io/manip/skipws.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>not1</name>
      <anchorfile>en/cpp/utility/functional/not1.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>not2</name>
      <anchorfile>en/cpp/utility/functional/not2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::not_equal_to</class>
    <member kind="function">
      <type>T</type>
      <name>not_fn</name>
      <anchorfile>en/cpp/utility/functional/not_fn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::nothrow_t</class>
    <member kind="function">
      <type>T</type>
      <name>notify_all_at_thread_exit</name>
      <anchorfile>en/cpp/thread/notify_all_at_thread_exit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nounitbuf</name>
      <anchorfile>en/cpp/io/manip/unitbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nouppercase</name>
      <anchorfile>en/cpp/io/manip/uppercase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nth_element</name>
      <anchorfile>en/cpp/algorithm/nth_element.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::nullopt_t</class>
    <class kind="class">std::nullptr_t</class>
    <class kind="class">std::num_get</class>
    <class kind="class">std::num_put</class>
    <class kind="class">std::numeric_limits</class>
    <class kind="class">std::numpunct</class>
    <class kind="class">std::numpunct_byname</class>
    <member kind="function">
      <type>T</type>
      <name>oct</name>
      <anchorfile>en/cpp/io/manip/hex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ofstream</class>
    <class kind="class">std::once_flag</class>
    <class kind="class">std::optional</class>
    <class kind="class">std::ostream</class>
    <class kind="class">std::ostream_iterator</class>
    <class kind="class">std::ostreambuf_iterator</class>
    <class kind="class">std::ostringstream</class>
    <class kind="class">std::ostrstream</class>
    <class kind="class">std::osyncstream</class>
    <class kind="class">std::out_of_range</class>
    <class kind="class">std::output_iterator_tag</class>
    <class kind="class">std::overflow_error</class>
    <class kind="class">std::owner_less</class>
    <class kind="class">std::packaged_task</class>
    <class kind="class">std::pair</class>
    <member kind="function">
      <type>T</type>
      <name>partial_order</name>
      <anchorfile>en/cpp/utility/compare/partial_order.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::partial_ordering</class>
    <member kind="function">
      <type>T</type>
      <name>partial_sort</name>
      <anchorfile>en/cpp/algorithm/partial_sort.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>partial_sort_copy</name>
      <anchorfile>en/cpp/algorithm/partial_sort_copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>partial_sum</name>
      <anchorfile>en/cpp/algorithm/partial_sum.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>partition</name>
      <anchorfile>en/cpp/algorithm/partition.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>partition_copy</name>
      <anchorfile>en/cpp/algorithm/partition_copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>partition_point</name>
      <anchorfile>en/cpp/algorithm/partition_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>perror</name>
      <anchorfile>en/cpp/io/c/perror.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::peta</class>
    <class kind="class">std::pico</class>
    <class kind="class">std::piecewise_constant_distribution</class>
    <class kind="class">std::piecewise_construct_t</class>
    <class kind="class">std::piecewise_linear_distribution</class>
    <class kind="class">std::placeholders</class>
    <class kind="class">std::plus</class>
    <namespace>std::pmr</namespace>
    <class kind="class">std::pointer_safety</class>
    <class kind="class">std::pointer_traits</class>
    <class kind="class">std::poisson_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>pop_heap</name>
      <anchorfile>en/cpp/algorithm/pop_heap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pow</name>
      <anchorfile>en/cpp/numeric/math/pow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prev</name>
      <anchorfile>en/cpp/iterator/prev.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prev_permutation</name>
      <anchorfile>en/cpp/algorithm/prev_permutation.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>printf</name>
      <anchorfile>en/cpp/io/c/printf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::priority_queue</class>
    <class kind="class">std::promise</class>
    <class kind="class">std::ptrdiff_t</class>
    <member kind="function">
      <type>T</type>
      <name>push_heap</name>
      <anchorfile>en/cpp/algorithm/push_heap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put_money</name>
      <anchorfile>en/cpp/io/manip/put_money.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put_time</name>
      <anchorfile>en/cpp/io/manip/put_time.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putc</name>
      <anchorfile>en/cpp/io/c/fputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putchar</name>
      <anchorfile>en/cpp/io/c/putchar.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>puts</name>
      <anchorfile>en/cpp/io/c/puts.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putwchar</name>
      <anchorfile>en/cpp/io/c/putwchar.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>qsort</name>
      <anchorfile>en/cpp/algorithm/qsort.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::queue</class>
    <member kind="function">
      <type>T</type>
      <name>quick_exit</name>
      <anchorfile>en/cpp/utility/program/quick_exit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>quoted</name>
      <anchorfile>en/cpp/io/manip/quoted.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>raise</name>
      <anchorfile>en/cpp/utility/program/raise.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rand</name>
      <anchorfile>en/cpp/numeric/random/rand.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::random_access_iterator_tag</class>
    <class kind="class">std::random_device</class>
    <member kind="function">
      <type>T</type>
      <name>random_shuffle</name>
      <anchorfile>en/cpp/algorithm/random_shuffle.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::range_error</class>
    <namespace>std::ranges</namespace>
    <class kind="class">std::rank</class>
    <member kind="variable">
      <type>T</type>
      <name>rank_v</name>
      <anchorfile>en/cpp/types/rank.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::ranlux24</class>
    <class kind="class">std::ranlux24_base</class>
    <class kind="class">std::ranlux48</class>
    <class kind="class">std::ranlux48_base</class>
    <class kind="class">std::ratio</class>
    <class kind="class">std::ratio_add</class>
    <class kind="class">std::ratio_divide</class>
    <class kind="class">std::ratio_equal</class>
    <member kind="variable">
      <type>T</type>
      <name>ratio_equal_v</name>
      <anchorfile>en/cpp/numeric/ratio/ratio_equal.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::ratio_greater</class>
    <class kind="class">std::ratio_greater_equal</class>
    <member kind="variable">
      <type>T</type>
      <name>ratio_greater_equal_v</name>
      <anchorfile>en/cpp/numeric/ratio/ratio_greater_equal.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ratio_greater_v</name>
      <anchorfile>en/cpp/numeric/ratio/ratio_greater.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::ratio_less</class>
    <class kind="class">std::ratio_less_equal</class>
    <member kind="variable">
      <type>T</type>
      <name>ratio_less_equal_v</name>
      <anchorfile>en/cpp/numeric/ratio/ratio_less_equal.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ratio_less_v</name>
      <anchorfile>en/cpp/numeric/ratio/ratio_less.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::ratio_multiply</class>
    <class kind="class">std::ratio_not_equal</class>
    <member kind="variable">
      <type>T</type>
      <name>ratio_not_equal_v</name>
      <anchorfile>en/cpp/numeric/ratio/ratio_not_equal.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::ratio_subtract</class>
    <class kind="class">std::raw_storage_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/iterator/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::readable_traits</class>
    <member kind="function">
      <type>T</type>
      <name>realloc</name>
      <anchorfile>en/cpp/memory/c/realloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::recursive_mutex</class>
    <class kind="class">std::recursive_timed_mutex</class>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>en/cpp/algorithm/reduce.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ref</name>
      <anchorfile>en/cpp/utility/functional/ref.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::reference_wrapper</class>
    <class kind="class">std::regex</class>
    <namespace>std::regex_constants</namespace>
    <class kind="class">std::regex_error</class>
    <class kind="class">std::regex_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>regex_match</name>
      <anchorfile>en/cpp/regex/regex_match.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>regex_replace</name>
      <anchorfile>en/cpp/regex/regex_replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>regex_search</name>
      <anchorfile>en/cpp/regex/regex_search.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::regex_token_iterator</class>
    <class kind="class">std::regex_traits</class>
    <namespace>std::rel_ops</namespace>
    <member kind="function">
      <type>T</type>
      <name>remainder</name>
      <anchorfile>en/cpp/numeric/math/remainder.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove (&lt;algorithm&gt;)</name>
      <anchorfile>en/cpp/algorithm/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove (&lt;cstdio&gt;)</name>
      <anchorfile>en/cpp/io/c/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::remove_all_extents</class>
    <class kind="class">std::remove_all_extents_t</class>
    <class kind="class">std::remove_const</class>
    <class kind="class">std::remove_const_t</class>
    <member kind="function">
      <type>T</type>
      <name>remove_copy</name>
      <anchorfile>en/cpp/algorithm/remove_copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_copy_if</name>
      <anchorfile>en/cpp/algorithm/remove_copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::remove_cv</class>
    <class kind="class">std::remove_cv_t</class>
    <class kind="class">std::remove_cvref</class>
    <class kind="class">std::remove_cvref_t</class>
    <class kind="class">std::remove_extent</class>
    <class kind="class">std::remove_extent_t</class>
    <member kind="function">
      <type>T</type>
      <name>remove_if</name>
      <anchorfile>en/cpp/algorithm/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::remove_pointer</class>
    <class kind="class">std::remove_pointer_t</class>
    <class kind="class">std::remove_reference</class>
    <class kind="class">std::remove_reference_t</class>
    <class kind="class">std::remove_volatile</class>
    <class kind="class">std::remove_volatile_t</class>
    <member kind="function">
      <type>T</type>
      <name>remquo</name>
      <anchorfile>en/cpp/numeric/math/remquo.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rename</name>
      <anchorfile>en/cpp/io/c/rename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/iterator/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/algorithm/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace_copy</name>
      <anchorfile>en/cpp/algorithm/replace_copy_if.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace_copy_if</name>
      <anchorfile>en/cpp/algorithm/replace_copy_if.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace_if</name>
      <anchorfile>en/cpp/algorithm/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resetiosflags</name>
      <anchorfile>en/cpp/io/manip/resetiosflags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::result_of</class>
    <class kind="class">std::result_of_t</class>
    <member kind="function">
      <type>T</type>
      <name>rethrow_exception</name>
      <anchorfile>en/cpp/error/rethrow_exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rethrow_if_nested</name>
      <anchorfile>en/cpp/error/rethrow_if_nested.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>return_temporary_buffer</name>
      <anchorfile>en/cpp/memory/return_temporary_buffer.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverse</name>
      <anchorfile>en/cpp/algorithm/reverse.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverse_copy</name>
      <anchorfile>en/cpp/algorithm/reverse_copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::reverse_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>rewind</name>
      <anchorfile>en/cpp/io/c/rewind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>riemann_zeta</name>
      <anchorfile>en/cpp/numeric/special_math/riemann_zeta.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>riemann_zetaf</name>
      <anchorfile>en/cpp/numeric/special_math/riemann_zeta.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>riemann_zetal</name>
      <anchorfile>en/cpp/numeric/special_math/riemann_zeta.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>right</name>
      <anchorfile>en/cpp/io/manip/left.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rint</name>
      <anchorfile>en/cpp/numeric/math/rint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rotate</name>
      <anchorfile>en/cpp/algorithm/rotate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rotate_copy</name>
      <anchorfile>en/cpp/algorithm/rotate_copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>round</name>
      <anchorfile>en/cpp/numeric/math/round.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::runtime_error</class>
    <member kind="function">
      <type>T</type>
      <name>sample</name>
      <anchorfile>en/cpp/algorithm/sample.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scalbln</name>
      <anchorfile>en/cpp/numeric/math/scalbn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scalbn</name>
      <anchorfile>en/cpp/numeric/math/scalbn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scanf</name>
      <anchorfile>en/cpp/io/c/scanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scientific</name>
      <anchorfile>en/cpp/io/manip/fixed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::scoped_allocator_adaptor</class>
    <member kind="function">
      <type>T</type>
      <name>search</name>
      <anchorfile>en/cpp/algorithm/search.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>search_n</name>
      <anchorfile>en/cpp/algorithm/search_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::seed_seq</class>
    <class kind="class">std::set</class>
    <member kind="function">
      <type>T</type>
      <name>set_difference</name>
      <anchorfile>en/cpp/algorithm/set_difference.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_intersection</name>
      <anchorfile>en/cpp/algorithm/set_intersection.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_new_handler</name>
      <anchorfile>en/cpp/memory/new/set_new_handler.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_symmetric_difference</name>
      <anchorfile>en/cpp/algorithm/set_symmetric_difference.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_terminate</name>
      <anchorfile>en/cpp/error/set_terminate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_unexpected</name>
      <anchorfile>en/cpp/error/set_unexpected.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_union</name>
      <anchorfile>en/cpp/algorithm/set_union.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbase</name>
      <anchorfile>en/cpp/io/manip/setbase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/c/setbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setfill</name>
      <anchorfile>en/cpp/io/manip/setfill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setiosflags</name>
      <anchorfile>en/cpp/io/manip/setiosflags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setlocale</name>
      <anchorfile>en/cpp/locale/setlocale.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setprecision</name>
      <anchorfile>en/cpp/io/manip/setprecision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setvbuf</name>
      <anchorfile>en/cpp/io/c/setvbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setw</name>
      <anchorfile>en/cpp/io/manip/setw.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::shared_future</class>
    <class kind="class">std::shared_lock</class>
    <class kind="class">std::shared_mutex</class>
    <class kind="class">std::shared_ptr</class>
    <class kind="class">std::shared_timed_mutex</class>
    <member kind="function">
      <type>T</type>
      <name>shift_left</name>
      <anchorfile>en/cpp/algorithm/shift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shift_right</name>
      <anchorfile>en/cpp/algorithm/shift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showbase</name>
      <anchorfile>en/cpp/io/manip/showbase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showpoint</name>
      <anchorfile>en/cpp/io/manip/showpoint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showpos</name>
      <anchorfile>en/cpp/io/manip/showpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shuffle</name>
      <anchorfile>en/cpp/algorithm/random_shuffle.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::shuffle_order_engine</class>
    <class kind="class">std::sig_atomic_t</class>
    <member kind="function">
      <type>T</type>
      <name>signal</name>
      <anchorfile>en/cpp/utility/program/signal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>signbit</name>
      <anchorfile>en/cpp/numeric/math/signbit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sin</name>
      <anchorfile>en/cpp/numeric/math/sin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sinh</name>
      <anchorfile>en/cpp/numeric/math/sinh.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/iterator/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::size_t</class>
    <member kind="function">
      <type>T</type>
      <name>skipws</name>
      <anchorfile>en/cpp/io/manip/skipws.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::slice</class>
    <class kind="class">std::slice_array</class>
    <class kind="class">std::smatch</class>
    <member kind="function">
      <type>T</type>
      <name>snprintf</name>
      <anchorfile>en/cpp/io/c/printf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sort</name>
      <anchorfile>en/cpp/algorithm/sort.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sort_heap</name>
      <anchorfile>en/cpp/algorithm/sort_heap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::span</class>
    <member kind="function">
      <type>T</type>
      <name>sph_bessel</name>
      <anchorfile>en/cpp/numeric/special_math/sph_bessel.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sph_besself</name>
      <anchorfile>en/cpp/numeric/special_math/sph_bessel.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sph_bessell</name>
      <anchorfile>en/cpp/numeric/special_math/sph_bessel.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sph_legendre</name>
      <anchorfile>en/cpp/numeric/special_math/sph_legendre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sph_legendref</name>
      <anchorfile>en/cpp/numeric/special_math/sph_legendre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sph_legendrel</name>
      <anchorfile>en/cpp/numeric/special_math/sph_legendre.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sph_neumann</name>
      <anchorfile>en/cpp/numeric/special_math/sph_neumann.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sph_neumannf</name>
      <anchorfile>en/cpp/numeric/special_math/sph_neumann.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sph_neumannl</name>
      <anchorfile>en/cpp/numeric/special_math/sph_neumann.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sprintf</name>
      <anchorfile>en/cpp/io/c/printf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sqrt</name>
      <anchorfile>en/cpp/numeric/math/sqrt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>srand</name>
      <anchorfile>en/cpp/numeric/random/srand.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::sregex_iterator</class>
    <class kind="class">std::sregex_token_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>sscanf</name>
      <anchorfile>en/cpp/io/c/scanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ssize</name>
      <anchorfile>en/cpp/iterator/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ssub_match</class>
    <member kind="function">
      <type>T</type>
      <name>stable_partition</name>
      <anchorfile>en/cpp/algorithm/stable_partition.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stable_sort</name>
      <anchorfile>en/cpp/algorithm/stable_sort.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::stack</class>
    <member kind="function">
      <type>T</type>
      <name>static_pointer_cast</name>
      <anchorfile>en/cpp/memory/shared_ptr/pointer_cast.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stod</name>
      <anchorfile>en/cpp/string/basic_string/stof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stof</name>
      <anchorfile>en/cpp/string/basic_string/stof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stoi</name>
      <anchorfile>en/cpp/string/basic_string/stol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stol</name>
      <anchorfile>en/cpp/string/basic_string/stol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stold</name>
      <anchorfile>en/cpp/string/basic_string/stof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stoll</name>
      <anchorfile>en/cpp/string/basic_string/stol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stoul</name>
      <anchorfile>en/cpp/string/basic_string/stoul.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stoull</name>
      <anchorfile>en/cpp/string/basic_string/stoul.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strcat</name>
      <anchorfile>en/cpp/string/byte/strcat.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strchr</name>
      <anchorfile>en/cpp/string/byte/strchr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strcmp</name>
      <anchorfile>en/cpp/string/byte/strcmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strcoll</name>
      <anchorfile>en/cpp/string/byte/strcoll.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strcpy</name>
      <anchorfile>en/cpp/string/byte/strcpy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strcspn</name>
      <anchorfile>en/cpp/string/byte/strcspn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::streambuf</class>
    <class kind="class">std::streamoff</class>
    <class kind="class">std::streampos</class>
    <class kind="class">std::streamsize</class>
    <member kind="function">
      <type>T</type>
      <name>strerror</name>
      <anchorfile>en/cpp/string/byte/strerror.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strftime</name>
      <anchorfile>en/cpp/chrono/c/strftime.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::string</class>
    <class kind="class">std::string_view</class>
    <class kind="class">std::stringbuf</class>
    <class kind="class">std::stringstream</class>
    <member kind="function">
      <type>T</type>
      <name>strlen</name>
      <anchorfile>en/cpp/string/byte/strlen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strncat</name>
      <anchorfile>en/cpp/string/byte/strncat.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strncmp</name>
      <anchorfile>en/cpp/string/byte/strncmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strncpy</name>
      <anchorfile>en/cpp/string/byte/strncpy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strong_equal</name>
      <anchorfile>en/cpp/utility/compare/strong_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::strong_equality</class>
    <member kind="function">
      <type>T</type>
      <name>strong_order</name>
      <anchorfile>en/cpp/utility/compare/strong_order.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::strong_ordering</class>
    <member kind="function">
      <type>T</type>
      <name>strpbrk</name>
      <anchorfile>en/cpp/string/byte/strpbrk.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strrchr</name>
      <anchorfile>en/cpp/string/byte/strrchr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strspn</name>
      <anchorfile>en/cpp/string/byte/strspn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strstr</name>
      <anchorfile>en/cpp/string/byte/strstr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::strstream</class>
    <class kind="class">std::strstreambuf</class>
    <member kind="function">
      <type>T</type>
      <name>strtod</name>
      <anchorfile>en/cpp/string/byte/strtof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtof</name>
      <anchorfile>en/cpp/string/byte/strtof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtoimax</name>
      <anchorfile>en/cpp/string/byte/strtoimax.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtok</name>
      <anchorfile>en/cpp/string/byte/strtok.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtol</name>
      <anchorfile>en/cpp/string/byte/strtol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtold</name>
      <anchorfile>en/cpp/string/byte/strtof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtoll</name>
      <anchorfile>en/cpp/string/byte/strtol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtoul</name>
      <anchorfile>en/cpp/string/byte/strtoul.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtoull</name>
      <anchorfile>en/cpp/string/byte/strtoul.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strtoumax</name>
      <anchorfile>en/cpp/string/byte/strtoimax.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strxfrm</name>
      <anchorfile>en/cpp/string/byte/strxfrm.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::student_t_distribution</class>
    <class kind="class">std::sub_match</class>
    <class kind="class">std::subtract_with_carry_engine</class>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/algorithm/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap_ranges</name>
      <anchorfile>en/cpp/algorithm/swap_ranges.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swprintf</name>
      <anchorfile>en/cpp/io/c/fwprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swscanf</name>
      <anchorfile>en/cpp/io/c/fwscanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::syncbuf</class>
    <member kind="function">
      <type>T</type>
      <name>system</name>
      <anchorfile>en/cpp/utility/program/system.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>system_category</name>
      <anchorfile>en/cpp/error/system_category.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::system_error</class>
    <member kind="function">
      <type>T</type>
      <name>tan</name>
      <anchorfile>en/cpp/numeric/math/tan.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tanh</name>
      <anchorfile>en/cpp/numeric/math/tanh.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::tera</class>
    <member kind="function">
      <type>T</type>
      <name>terminate</name>
      <anchorfile>en/cpp/error/terminate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::terminate_handler</class>
    <member kind="function">
      <type>T</type>
      <name>tgamma</name>
      <anchorfile>en/cpp/numeric/math/tgamma.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <namespace>std::this_thread</namespace>
    <class kind="class">std::thread</class>
    <member kind="function">
      <type>T</type>
      <name>throw_with_nested</name>
      <anchorfile>en/cpp/error/throw_with_nested.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/utility/tuple/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>time</name>
      <anchorfile>en/cpp/chrono/c/time.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::time_base</class>
    <class kind="class">std::time_get</class>
    <class kind="class">std::time_get_byname</class>
    <class kind="class">std::time_put</class>
    <class kind="class">std::time_put_byname</class>
    <class kind="class">std::time_t</class>
    <class kind="class">std::timed_mutex</class>
    <member kind="function">
      <type>T</type>
      <name>timespec</name>
      <anchorfile>en/cpp/chrono/c/timespec.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>timespec_get</name>
      <anchorfile>en/cpp/chrono/c/timespec_get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::tm</class>
    <member kind="function">
      <type>T</type>
      <name>tmpfile</name>
      <anchorfile>en/cpp/io/c/tmpfile.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tmpnam</name>
      <anchorfile>en/cpp/io/c/tmpnam.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_address</name>
      <anchorfile>en/cpp/memory/to_address.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_chars</name>
      <anchorfile>en/cpp/utility/to_chars.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_string</name>
      <anchorfile>en/cpp/string/basic_string/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_wstring</name>
      <anchorfile>en/cpp/string/basic_string/to_wstring.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tolower (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/tolower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tolower (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/tolower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>toupper (&lt;cctype&gt;)</name>
      <anchorfile>en/cpp/string/byte/toupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>toupper (&lt;clocale&gt;)</name>
      <anchorfile>en/cpp/locale/toupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>towctrans</name>
      <anchorfile>en/cpp/string/wide/towctrans.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>towlower</name>
      <anchorfile>en/cpp/string/wide/towlower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>towupper</name>
      <anchorfile>en/cpp/string/wide/towupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transform</name>
      <anchorfile>en/cpp/algorithm/transform.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transform_exclusive_scan</name>
      <anchorfile>en/cpp/algorithm/transform_exclusive_scan.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transform_inclusive_scan</name>
      <anchorfile>en/cpp/algorithm/transform_inclusive_scan.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transform_reduce</name>
      <anchorfile>en/cpp/algorithm/transform_reduce.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::true_type</class>
    <member kind="function">
      <type>T</type>
      <name>trunc</name>
      <anchorfile>en/cpp/numeric/math/trunc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>en/cpp/thread/try_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::try_to_lock_t</class>
    <class kind="class">std::tuple</class>
    <member kind="function">
      <type>T</type>
      <name>tuple_cat</name>
      <anchorfile>en/cpp/utility/tuple/tuple_cat.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>tuple_size_v</name>
      <anchorfile>en/cpp/utility/tuple/tuple_size.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::type_identity</class>
    <class kind="class">std::type_identity_t</class>
    <class kind="class">std::type_index</class>
    <class kind="class">std::type_info</class>
    <class kind="class">std::u16streampos</class>
    <class kind="class">std::u16string</class>
    <class kind="class">std::u16string_view</class>
    <class kind="class">std::u32streampos</class>
    <class kind="class">std::u32string</class>
    <class kind="class">std::u32string_view</class>
    <class kind="class">std::u8string</class>
    <class kind="class">std::u8string_view</class>
    <class kind="class">std::uint16_t</class>
    <class kind="class">std::uint32_t</class>
    <class kind="class">std::uint64_t</class>
    <class kind="class">std::uint8_t</class>
    <class kind="class">std::uint_fast16_t</class>
    <class kind="class">std::uint_fast32_t</class>
    <class kind="class">std::uint_fast64_t</class>
    <class kind="class">std::uint_fast8_t</class>
    <class kind="class">std::uint_least16_t</class>
    <class kind="class">std::uint_least32_t</class>
    <class kind="class">std::uint_least64_t</class>
    <class kind="class">std::uint_least8_t</class>
    <class kind="class">std::uintmax_t</class>
    <class kind="class">std::uintptr_t</class>
    <class kind="class">std::unary_function</class>
    <class kind="class">std::unary_negate</class>
    <member kind="function">
      <type>T</type>
      <name>uncaught_exception</name>
      <anchorfile>en/cpp/error/uncaught_exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uncaught_exceptions</name>
      <anchorfile>en/cpp/error/uncaught_exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>undeclare_no_pointers</name>
      <anchorfile>en/cpp/memory/gc/undeclare_no_pointers.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>undeclare_reachable</name>
      <anchorfile>en/cpp/memory/gc/undeclare_reachable.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::underflow_error</class>
    <class kind="class">std::underlying_type</class>
    <class kind="class">std::underlying_type_t</class>
    <member kind="function">
      <type>T</type>
      <name>unexpected</name>
      <anchorfile>en/cpp/error/unexpected.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::unexpected_handler</class>
    <member kind="function">
      <type>T</type>
      <name>ungetc</name>
      <anchorfile>en/cpp/io/c/ungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ungetwc</name>
      <anchorfile>en/cpp/io/c/ungetwc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uniform_int_distribution</class>
    <class kind="class">std::uniform_real_distribution</class>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_construct_using_allocator</name>
      <anchorfile>en/cpp/memory/uninitialized_construct_using_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_copy</name>
      <anchorfile>en/cpp/memory/uninitialized_copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_copy_n</name>
      <anchorfile>en/cpp/memory/uninitialized_copy_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_default_construct</name>
      <anchorfile>en/cpp/memory/uninitialized_default_construct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_default_construct_n</name>
      <anchorfile>en/cpp/memory/uninitialized_default_construct_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_fill</name>
      <anchorfile>en/cpp/memory/uninitialized_fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_fill_n</name>
      <anchorfile>en/cpp/memory/uninitialized_fill_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_move</name>
      <anchorfile>en/cpp/memory/uninitialized_move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_move_n</name>
      <anchorfile>en/cpp/memory/uninitialized_move_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_value_construct</name>
      <anchorfile>en/cpp/memory/uninitialized_value_construct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uninitialized_value_construct_n</name>
      <anchorfile>en/cpp/memory/uninitialized_value_construct_n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique</name>
      <anchorfile>en/cpp/algorithm/unique.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique_copy</name>
      <anchorfile>en/cpp/algorithm/unique_copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::unique_lock</class>
    <class kind="class">std::unique_ptr</class>
    <member kind="function">
      <type>T</type>
      <name>unitbuf</name>
      <anchorfile>en/cpp/io/manip/unitbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::unordered_map</class>
    <class kind="class">std::unordered_multimap</class>
    <class kind="class">std::unordered_multiset</class>
    <class kind="class">std::unordered_set</class>
    <class kind="class">std::unwrap_ref_decay</class>
    <class kind="class">std::unwrap_ref_decay_t</class>
    <class kind="class">std::unwrap_reference</class>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>en/cpp/algorithm/upper_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uppercase</name>
      <anchorfile>en/cpp/io/manip/uppercase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>use_facet</name>
      <anchorfile>en/cpp/locale/use_facet.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::uses_allocator</class>
    <member kind="function">
      <type>T</type>
      <name>uses_allocator_construction_args</name>
      <anchorfile>en/cpp/memory/uses_allocator_construction_args.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>uses_allocator_v</name>
      <anchorfile>en/cpp/memory/uses_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::valarray</class>
    <class kind="class">std::variant</class>
    <class kind="class">std::variant_alternative</class>
    <class kind="class">std::variant_alternative_t</class>
    <class kind="class">std::variant_size</class>
    <member kind="variable">
      <type>T</type>
      <name>variant_size_v</name>
      <anchorfile>en/cpp/utility/variant/variant_size.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::vector</class>
    <member kind="function">
      <type>T</type>
      <name>vfprintf</name>
      <anchorfile>en/cpp/io/c/vfprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vfscanf</name>
      <anchorfile>en/cpp/io/c/vfscanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vfwprintf</name>
      <anchorfile>en/cpp/io/c/vfwprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vfwscanf</name>
      <anchorfile>en/cpp/io/c/vfwscanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>visit</name>
      <anchorfile>en/cpp/utility/variant/visit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::void_t</class>
    <member kind="function">
      <type>T</type>
      <name>vprintf</name>
      <anchorfile>en/cpp/io/c/vfprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vscanf</name>
      <anchorfile>en/cpp/io/c/vfscanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vsnprintf</name>
      <anchorfile>en/cpp/io/c/vfprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vsprintf</name>
      <anchorfile>en/cpp/io/c/vfprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vsscanf</name>
      <anchorfile>en/cpp/io/c/vfscanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vswprintf</name>
      <anchorfile>en/cpp/io/c/vfwprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vswscanf</name>
      <anchorfile>en/cpp/io/c/vfwscanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vwprintf</name>
      <anchorfile>en/cpp/io/c/vfwprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vwscanf</name>
      <anchorfile>en/cpp/io/c/vfwscanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wbuffer_convert</class>
    <class kind="class">std::wcerr</class>
    <class kind="class">std::wcin</class>
    <class kind="class">std::wclog</class>
    <class kind="class">std::wcmatch</class>
    <class kind="class">std::wcout</class>
    <class kind="class">std::wcregex_iterator</class>
    <class kind="class">std::wcregex_token_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>wcrtomb</name>
      <anchorfile>en/cpp/string/multibyte/wcrtomb.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcscat</name>
      <anchorfile>en/cpp/string/wide/wcscat.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcschr</name>
      <anchorfile>en/cpp/string/wide/wcschr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcscmp</name>
      <anchorfile>en/cpp/string/wide/wcscmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcscoll</name>
      <anchorfile>en/cpp/string/wide/wcscoll.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcscpy</name>
      <anchorfile>en/cpp/string/wide/wcscpy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcscspn</name>
      <anchorfile>en/cpp/string/wide/wcscspn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsftime</name>
      <anchorfile>en/cpp/chrono/c/wcsftime.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcslen</name>
      <anchorfile>en/cpp/string/wide/wcslen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsncat</name>
      <anchorfile>en/cpp/string/wide/wcsncat.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsncmp</name>
      <anchorfile>en/cpp/string/wide/wcsncmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsncpy</name>
      <anchorfile>en/cpp/string/wide/wcsncpy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcspbrk</name>
      <anchorfile>en/cpp/string/wide/wcspbrk.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsrchr</name>
      <anchorfile>en/cpp/string/wide/wcsrchr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsrtombs</name>
      <anchorfile>en/cpp/string/multibyte/wcsrtombs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsspn</name>
      <anchorfile>en/cpp/string/wide/wcsspn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsstr</name>
      <anchorfile>en/cpp/string/wide/wcsstr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstod</name>
      <anchorfile>en/cpp/string/wide/wcstof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstof</name>
      <anchorfile>en/cpp/string/wide/wcstof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstoimax</name>
      <anchorfile>en/cpp/string/wide/wcstoimax.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstok</name>
      <anchorfile>en/cpp/string/wide/wcstok.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstol</name>
      <anchorfile>en/cpp/string/wide/wcstol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstold</name>
      <anchorfile>en/cpp/string/wide/wcstof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstoll</name>
      <anchorfile>en/cpp/string/wide/wcstol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstombs</name>
      <anchorfile>en/cpp/string/multibyte/wcstombs.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstoul</name>
      <anchorfile>en/cpp/string/wide/wcstoul.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstoull</name>
      <anchorfile>en/cpp/string/wide/wcstoul.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcstoumax</name>
      <anchorfile>en/cpp/string/wide/wcstoimax.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wcsub_match</class>
    <member kind="function">
      <type>T</type>
      <name>wcsxfrm</name>
      <anchorfile>en/cpp/string/wide/wcsxfrm.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wctob</name>
      <anchorfile>en/cpp/string/multibyte/wctob.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wctomb</name>
      <anchorfile>en/cpp/string/multibyte/wctomb.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wctrans</name>
      <anchorfile>en/cpp/string/wide/wctrans.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wctype</name>
      <anchorfile>en/cpp/string/wide/wctype.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>weak_equal</name>
      <anchorfile>en/cpp/utility/compare/weak_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::weak_equality</class>
    <member kind="function">
      <type>T</type>
      <name>weak_order</name>
      <anchorfile>en/cpp/utility/compare/weak_order.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::weak_ordering</class>
    <class kind="class">std::weak_ptr</class>
    <class kind="class">std::weibull_distribution</class>
    <class kind="class">std::wfilebuf</class>
    <class kind="class">std::wfstream</class>
    <class kind="class">std::wifstream</class>
    <class kind="class">std::wiostream</class>
    <class kind="class">std::wistream</class>
    <class kind="class">std::wistringstream</class>
    <member kind="function">
      <type>T</type>
      <name>wmemchr</name>
      <anchorfile>en/cpp/string/wide/wmemchr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wmemcmp</name>
      <anchorfile>en/cpp/string/wide/wmemcmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wmemcpy</name>
      <anchorfile>en/cpp/string/wide/wmemcpy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wmemmove</name>
      <anchorfile>en/cpp/string/wide/wmemmove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wmemset</name>
      <anchorfile>en/cpp/string/wide/wmemset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wofstream</class>
    <class kind="class">std::wostream</class>
    <class kind="class">std::wostringstream</class>
    <class kind="class">std::wosyncstream</class>
    <member kind="function">
      <type>T</type>
      <name>wprintf</name>
      <anchorfile>en/cpp/io/c/fwprintf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wregex</class>
    <member kind="function">
      <type>T</type>
      <name>ws</name>
      <anchorfile>en/cpp/io/manip/ws.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wscanf</name>
      <anchorfile>en/cpp/io/c/fwscanf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wsmatch</class>
    <class kind="class">std::wsregex_iterator</class>
    <class kind="class">std::wsregex_token_iterator</class>
    <class kind="class">std::wssub_match</class>
    <class kind="class">std::wstreambuf</class>
    <class kind="class">std::wstreampos</class>
    <class kind="class">std::wstring</class>
    <class kind="class">std::wstring_convert</class>
    <class kind="class">std::wstring_view</class>
    <class kind="class">std::wstringbuf</class>
    <class kind="class">std::wstringstream</class>
    <class kind="class">std::wsyncbuf</class>
    <class kind="class">std::yocto</class>
    <class kind="class">std::yotta</class>
    <class kind="class">std::zetta</class>
  </compound>
  <compound kind="class">
    <name>std::FILE</name>
    <filename>cpp/io/c</filename>
  </compound>
  <compound kind="class">
    <name>std::add_const</name>
    <filename>cpp/types/add_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::add_const_t</name>
    <filename>cpp/types/add_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::add_cv</name>
    <filename>cpp/types/add_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::add_cv_t</name>
    <filename>cpp/types/add_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::add_lvalue_reference</name>
    <filename>cpp/types/add_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::add_lvalue_reference_t</name>
    <filename>cpp/types/add_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::add_pointer</name>
    <filename>cpp/types/add_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::add_pointer_t</name>
    <filename>cpp/types/add_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::add_rvalue_reference</name>
    <filename>cpp/types/add_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::add_rvalue_reference_t</name>
    <filename>cpp/types/add_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::add_volatile</name>
    <filename>cpp/types/add_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::add_volatile_t</name>
    <filename>cpp/types/add_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::adopt_lock_t</name>
    <filename>cpp/thread/lock_tag_t</filename>
  </compound>
  <compound kind="class">
    <name>std::align_val_t</name>
    <filename>cpp/memory/new/align_val_t</filename>
  </compound>
  <compound kind="class">
    <name>std::aligned_storage</name>
    <filename>cpp/types/aligned_storage</filename>
  </compound>
  <compound kind="class">
    <name>std::aligned_storage_t</name>
    <filename>cpp/types/aligned_storage</filename>
  </compound>
  <compound kind="class">
    <name>std::aligned_union</name>
    <filename>cpp/types/aligned_union</filename>
  </compound>
  <compound kind="class">
    <name>std::aligned_union_t</name>
    <filename>cpp/types/aligned_union</filename>
  </compound>
  <compound kind="class">
    <name>std::alignment_of</name>
    <filename>cpp/types/alignment_of</filename>
  </compound>
  <compound kind="class">
    <name>std::allocator</name>
    <filename>cpp/memory/allocator</filename>
    <member kind="function">
      <type>T</type>
      <name>address</name>
      <anchorfile>en/cpp/memory/allocator/address.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>en/cpp/memory/allocator/allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>allocator</name>
      <anchorfile>en/cpp/memory/allocator/allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>construct</name>
      <anchorfile>en/cpp/memory/allocator/construct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>en/cpp/memory/allocator/deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>destroy</name>
      <anchorfile>en/cpp/memory/allocator/destroy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/memory/allocator/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~allocator</name>
      <anchorfile>en/cpp/memory/allocator/~allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::allocator_arg_t</name>
    <filename>cpp/memory/allocator_arg_t</filename>
  </compound>
  <compound kind="class">
    <name>std::allocator_traits</name>
    <filename>cpp/memory/allocator_traits</filename>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>en/cpp/memory/allocator_traits/allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>construct</name>
      <anchorfile>en/cpp/memory/allocator_traits/construct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>en/cpp/memory/allocator_traits/deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>destroy</name>
      <anchorfile>en/cpp/memory/allocator_traits/destroy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/memory/allocator_traits/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>select_on_container_copy_construction</name>
      <anchorfile>en/cpp/memory/allocator_traits/select_on_container_copy_construction.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::any</name>
    <filename>cpp/utility/any</filename>
    <member kind="function">
      <type>T</type>
      <name>any</name>
      <anchorfile>en/cpp/utility/any/any.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/utility/any/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_value</name>
      <anchorfile>en/cpp/utility/any/has_value.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/utility/any/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/utility/any/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/utility/any/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>type</name>
      <anchorfile>en/cpp/utility/any/type.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~any</name>
      <anchorfile>en/cpp/utility/any/~any.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::array</name>
    <filename>cpp/container/array</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/container/array/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/container/array/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/array/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/array/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/array/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/array/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/array/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/container/array/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/array/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/array/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/container/array/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/array/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/array/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/array/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/array/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/array/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/array/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/array/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_bool</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_bool</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_char16_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_char16_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_char32_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_char32_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_flag</name>
    <filename>cpp/atomic/atomic_flag</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_flag</name>
      <anchorfile>en/cpp/atomic/atomic_flag/atomic_flag.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/atomic/atomic_flag/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic_flag/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>test_and_set</name>
      <anchorfile>en/cpp/atomic/atomic_flag/test_and_set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int16_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int16_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int32_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int32_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int64_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int64_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int8_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int8_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int_fast16_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int_fast16_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int_fast32_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int_fast32_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int_fast64_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int_fast64_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int_fast8_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int_fast8_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int_least16_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int_least16_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int_least32_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int_least32_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int_least64_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int_least64_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_int_least8_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_int_least8_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_intmax_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_intmax_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_intptr_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_intptr_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_llong</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_llong</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_long</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_long</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_ptrdiff_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_ptrdiff_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_ref</name>
    <filename>cpp/atomic/atomic_ref</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_ref</name>
      <anchorfile>en/cpp/atomic/atomic_ref/atomic_ref.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic_ref/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic_ref/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic_ref/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic_ref/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic_ref/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic_ref/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic_ref/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic_ref/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic_ref/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic_ref/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic_ref/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic_ref/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_schar</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_schar</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_short</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_short</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_size_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_size_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uchar</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uchar</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint16_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint16_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint32_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint32_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint64_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint64_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint8_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint8_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint_fast16_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint_fast16_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint_fast32_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint_fast32_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint_fast64_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint_fast64_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint_fast8_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint_fast8_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint_least16_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint_least16_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint_least32_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint_least32_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint_least64_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint_least64_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uint_least8_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uint_least8_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uintmax_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uintmax_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_uintptr_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_uintptr_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_ullong</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_ullong</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_ulong</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_ulong</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_ushort</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_ushort</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::atomic_wchar_t</name>
    <filename>cpp/atomic/atomic</filename>
    <member kind="function">
      <type>T</type>
      <name>atomic_wchar_t</name>
      <anchorfile>en/cpp/atomic/atomic/atomic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_strong</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare_exchange_weak</name>
      <anchorfile>en/cpp/atomic/atomic/compare_exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exchange</name>
      <anchorfile>en/cpp/atomic/atomic/exchange.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_add</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_add.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_or</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_sub</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_sub.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_xor</name>
      <anchorfile>en/cpp/atomic/atomic/fetch_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_lock_free</name>
      <anchorfile>en/cpp/atomic/atomic/is_lock_free.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load</name>
      <anchorfile>en/cpp/atomic/atomic/load.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T</name>
      <anchorfile>en/cpp/atomic/atomic/operator_T.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/atomic/atomic/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/atomic/atomic/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>store</name>
      <anchorfile>en/cpp/atomic/atomic/store.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::auto_ptr</name>
    <filename>cpp/memory/auto_ptr</filename>
    <member kind="function">
      <type>T</type>
      <name>auto_ptr</name>
      <anchorfile>en/cpp/memory/auto_ptr/auto_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/memory/auto_ptr/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator auto_ptr&lt;Y&gt;</name>
      <anchorfile>en/cpp/memory/auto_ptr/operator_auto_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/memory/auto_ptr/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/memory/auto_ptr/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/memory/auto_ptr/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>release</name>
      <anchorfile>en/cpp/memory/auto_ptr/release.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/memory/auto_ptr/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~auto_ptr</name>
      <anchorfile>en/cpp/memory/auto_ptr/~auto_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::back_insert_iterator</name>
    <filename>cpp/iterator/back_insert_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>back_insert_iterator</name>
      <anchorfile>en/cpp/iterator/back_insert_iterator/back_insert_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/iterator/back_insert_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/iterator/back_insert_iterator/operator++.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/iterator/back_insert_iterator/operator++.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/iterator/back_insert_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bad_alloc</name>
    <filename>cpp/memory/new/bad_alloc</filename>
    <member kind="function">
      <type>T</type>
      <name>bad_alloc</name>
      <anchorfile>en/cpp/memory/new/bad_alloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/memory/new/bad_alloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bad_any_cast</name>
    <filename>cpp/utility/any/bad_any_cast</filename>
  </compound>
  <compound kind="class">
    <name>std::bad_array_new_length</name>
    <filename>cpp/memory/new/bad_array_new_length</filename>
    <member kind="function">
      <type>T</type>
      <name>bad_array_new_length</name>
      <anchorfile>en/cpp/memory/new/bad_array_new_length/bad_array_new_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bad_cast</name>
    <filename>cpp/types/bad_cast</filename>
    <member kind="function">
      <type>T</type>
      <name>bad_cast</name>
      <anchorfile>en/cpp/types/bad_cast/bad_cast.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bad_exception</name>
    <filename>cpp/error/bad_exception</filename>
  </compound>
  <compound kind="class">
    <name>std::bad_function_call</name>
    <filename>cpp/utility/functional/bad_function_call</filename>
    <member kind="function">
      <type>T</type>
      <name>bad_function_call</name>
      <anchorfile>en/cpp/utility/functional/bad_function_call.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bad_optional_access</name>
    <filename>cpp/utility/optional/bad_optional_access</filename>
  </compound>
  <compound kind="class">
    <name>std::bad_typeid</name>
    <filename>cpp/types/bad_typeid</filename>
    <member kind="function">
      <type>T</type>
      <name>bad_typeid</name>
      <anchorfile>en/cpp/types/bad_typeid/bad_typeid.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bad_variant_access</name>
    <filename>cpp/utility/variant/bad_variant_access</filename>
  </compound>
  <compound kind="class">
    <name>std::bad_weak_ptr</name>
    <filename>cpp/memory/bad_weak_ptr</filename>
    <member kind="function">
      <type>T</type>
      <name>bad_weak_ptr</name>
      <anchorfile>en/cpp/memory/bad_weak_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_common_reference</name>
    <filename>cpp/types/common_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_filebuf</name>
    <filename>cpp/io/basic_filebuf</filename>
    <member kind="function">
      <type>T</type>
      <name>basic_filebuf</name>
      <anchorfile>en/cpp/io/basic_filebuf/basic_filebuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_filebuf/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_filebuf/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_filebuf/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_filebuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~basic_filebuf</name>
      <anchorfile>en/cpp/io/basic_filebuf/~basic_filebuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_fstream</name>
    <filename>cpp/io/basic_fstream</filename>
    <class kind="class">std::basic_fstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_fstream</name>
      <anchorfile>en/cpp/io/basic_fstream/basic_fstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_fstream/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_fstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_fstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_fstream/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_fstream/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_fstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_fstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_fstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_fstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_fstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_fstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ifstream</name>
    <filename>cpp/io/basic_ifstream</filename>
    <class kind="class">std::basic_ifstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_ifstream</name>
      <anchorfile>en/cpp/io/basic_ifstream/basic_ifstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_ifstream/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ifstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ifstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_ifstream/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_ifstream/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_ifstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ifstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ifstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ifstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ifstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ifstream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ios</name>
    <filename>cpp/io/basic_ios</filename>
    <class kind="class">std::basic_ios::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_ios</name>
      <anchorfile>en/cpp/io/basic_ios/basic_ios.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ios::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ios::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/ios_base/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~basic_ios</name>
      <anchorfile>en/cpp/io/basic_ios/~basic_ios.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ios::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ios::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ios::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_iostream</name>
    <filename>cpp/io/basic_iostream</filename>
    <class kind="class">std::basic_iostream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_iostream</name>
      <anchorfile>en/cpp/io/basic_iostream/basic_iostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_iostream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_iostream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_iostream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~basic_iostream</name>
      <anchorfile>en/cpp/io/basic_iostream/~basic_iostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_iostream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_iostream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_iostream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_iostream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_istream</name>
    <filename>cpp/io/basic_istream</filename>
    <class kind="class">std::basic_istream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_istream</name>
      <anchorfile>en/cpp/io/basic_istream/basic_istream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_istream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_istream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_istream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~basic_istream</name>
      <anchorfile>en/cpp/io/basic_istream/~basic_istream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_istream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_istream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_istream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_istream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_istringstream</name>
    <filename>cpp/io/basic_istringstream</filename>
    <class kind="class">std::basic_istringstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_istringstream</name>
      <anchorfile>en/cpp/io/basic_istringstream/basic_istringstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_istringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_istringstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_istringstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_istringstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_istringstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_istringstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_istringstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_istringstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_istringstream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ofstream</name>
    <filename>cpp/io/basic_ofstream</filename>
    <class kind="class">std::basic_ofstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_ofstream</name>
      <anchorfile>en/cpp/io/basic_ofstream/basic_ofstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_ofstream/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ofstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ofstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_ofstream/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_ofstream/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_ofstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ofstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ofstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ofstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ofstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ofstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ostream</name>
    <filename>cpp/io/basic_ostream</filename>
    <class kind="class">std::basic_ostream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_ostream</name>
      <anchorfile>en/cpp/io/basic_ostream/basic_ostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ostream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ostream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ostream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~basic_ostream</name>
      <anchorfile>en/cpp/io/basic_ostream/~basic_ostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ostream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ostream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ostream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ostream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ostringstream</name>
    <filename>cpp/io/basic_ostringstream</filename>
    <class kind="class">std::basic_ostringstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_ostringstream</name>
      <anchorfile>en/cpp/io/basic_ostringstream/basic_ostringstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ostringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ostringstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_ostringstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_ostringstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_ostringstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ostringstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ostringstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_ostringstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_ostringstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_osyncstream</name>
    <filename>cpp/io/basic_osyncstream</filename>
    <class kind="class">std::basic_osyncstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_osyncstream</name>
      <anchorfile>en/cpp/io/basic_osyncstream/basic_osyncstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emit</name>
      <anchorfile>en/cpp/io/basic_osyncstream/emit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_osyncstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_osyncstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_wrapped</name>
      <anchorfile>en/cpp/io/basic_osyncstream/get_wrapped.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_osyncstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_osyncstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~basic_osyncstream</name>
      <anchorfile>en/cpp/io/basic_osyncstream/~basic_osyncstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_osyncstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_osyncstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_osyncstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_osyncstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_regex</name>
    <filename>cpp/regex/basic_regex</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/regex/basic_regex/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_regex</name>
      <anchorfile>en/cpp/regex/basic_regex/basic_regex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/regex/basic_regex/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/regex/basic_regex/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/regex/basic_regex/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mark_count</name>
      <anchorfile>en/cpp/regex/basic_regex/mark_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/basic_regex/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/regex/basic_regex/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~basic_regex</name>
      <anchorfile>en/cpp/regex/basic_regex/~basic_regex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_streambuf</name>
    <filename>cpp/io/basic_streambuf</filename>
    <member kind="function">
      <type>T</type>
      <name>basic_streambuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/basic_streambuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_streambuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~basic_streambuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/~basic_streambuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_string</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_string_view</name>
    <filename>cpp/string/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string_view/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string_view/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_stringbuf</name>
    <filename>cpp/io/basic_stringbuf</filename>
    <member kind="function">
      <type>T</type>
      <name>basic_stringbuf</name>
      <anchorfile>en/cpp/io/basic_stringbuf/basic_stringbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_stringbuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_stringbuf/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_stringstream</name>
    <filename>cpp/io/basic_stringstream</filename>
    <class kind="class">std::basic_stringstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_stringstream</name>
      <anchorfile>en/cpp/io/basic_stringstream/basic_stringstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_stringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_stringstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_stringstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::basic_stringstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_stringstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_stringstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_stringstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::basic_stringstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_stringstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::basic_syncbuf</name>
    <filename>cpp/io/basic_syncbuf</filename>
    <member kind="function">
      <type>T</type>
      <name>basic_syncbuf</name>
      <anchorfile>en/cpp/io/basic_syncbuf/basic_syncbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emit</name>
      <anchorfile>en/cpp/io/basic_syncbuf/emit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/io/basic_syncbuf/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_wrapped</name>
      <anchorfile>en/cpp/io/basic_syncbuf/get_wrapped.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_syncbuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_emit_on_sync</name>
      <anchorfile>en/cpp/io/basic_syncbuf/set_emit_on_sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~basic_syncbuf</name>
      <anchorfile>en/cpp/io/basic_syncbuf/~basic_syncbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bernoulli_distribution</name>
    <filename>cpp/numeric/random/bernoulli_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>bernoulli_distribution</name>
      <anchorfile>en/cpp/numeric/random/bernoulli_distribution/bernoulli_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/bernoulli_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/bernoulli_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p</name>
      <anchorfile>en/cpp/numeric/random/bernoulli_distribution/p.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/bernoulli_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/bernoulli_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bidirectional_iterator_tag</name>
    <filename>cpp/iterator/iterator_tags</filename>
  </compound>
  <compound kind="class">
    <name>std::binary_function</name>
    <filename>cpp/utility/functional/binary_function</filename>
  </compound>
  <compound kind="class">
    <name>std::binary_negate</name>
    <filename>cpp/utility/functional/binary_negate</filename>
    <member kind="function">
      <type>T</type>
      <name>binary_negate</name>
      <anchorfile>en/cpp/utility/functional/binary_negate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/binary_negate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::binomial_distribution</name>
    <filename>cpp/numeric/random/binomial_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>binomial_distribution</name>
      <anchorfile>en/cpp/numeric/random/binomial_distribution/binomial_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/binomial_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/binomial_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p</name>
      <anchorfile>en/cpp/numeric/random/binomial_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/binomial_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/binomial_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>t</name>
      <anchorfile>en/cpp/numeric/random/binomial_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bit_and</name>
    <filename>cpp/utility/functional/bit_and</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/bit_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bit_not</name>
    <filename>cpp/utility/functional/bit_not</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/bit_not.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bit_or</name>
    <filename>cpp/utility/functional/bit_or</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/bit_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bit_xor</name>
    <filename>cpp/utility/functional/bit_xor</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/bit_xor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bitset</name>
    <filename>cpp/utility/bitset</filename>
    <member kind="function">
      <type>T</type>
      <name>all</name>
      <anchorfile>en/cpp/utility/bitset/all_any_none.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>any</name>
      <anchorfile>en/cpp/utility/bitset/all_any_none.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bitset</name>
      <anchorfile>en/cpp/utility/bitset/bitset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/utility/bitset/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flip</name>
      <anchorfile>en/cpp/utility/bitset/flip.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>none</name>
      <anchorfile>en/cpp/utility/bitset/all_any_none.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/utility/bitset/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&amp;=</name>
      <anchorfile>en/cpp/utility/bitset/operator_logic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/utility/bitset/operator_ltltgtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>en/cpp/utility/bitset/operator_ltltgtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/utility/bitset/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/utility/bitset/operator_ltltgtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>en/cpp/utility/bitset/operator_ltltgtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/utility/bitset/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator^=</name>
      <anchorfile>en/cpp/utility/bitset/operator_logic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator|=</name>
      <anchorfile>en/cpp/utility/bitset/operator_logic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator~</name>
      <anchorfile>en/cpp/utility/bitset/operator_logic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::bitset::reference</class>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/utility/bitset/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set</name>
      <anchorfile>en/cpp/utility/bitset/set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/utility/bitset/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>test</name>
      <anchorfile>en/cpp/utility/bitset/test.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_string</name>
      <anchorfile>en/cpp/utility/bitset/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_ullong</name>
      <anchorfile>en/cpp/utility/bitset/to_ullong.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_ulong</name>
      <anchorfile>en/cpp/utility/bitset/to_ulong.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::bitset::reference</name>
    <filename>cpp/utility/bitset/reference</filename>
  </compound>
  <compound kind="class">
    <name>std::bool_constant</name>
    <filename>cpp/types/integral_constant</filename>
  </compound>
  <compound kind="class">
    <name>std::boyer_moore_horspool_searcher</name>
    <filename>cpp/utility/functional/boyer_moore_horspool_searcher</filename>
    <member kind="function">
      <type>T</type>
      <name>boyer_moore_horspool_searcher</name>
      <anchorfile>en/cpp/utility/functional/boyer_moore_horspool_searcher.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/boyer_moore_horspool_searcher.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::boyer_moore_searcher</name>
    <filename>cpp/utility/functional/boyer_moore_searcher</filename>
    <member kind="function">
      <type>T</type>
      <name>boyer_moore_searcher</name>
      <anchorfile>en/cpp/utility/functional/boyer_moore_searcher.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/boyer_moore_searcher.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::byte</name>
    <filename>cpp/types/byte</filename>
  </compound>
  <compound kind="class">
    <name>std::cauchy_distribution</name>
    <filename>cpp/numeric/random/cauchy_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>a</name>
      <anchorfile>en/cpp/numeric/random/cauchy_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>b</name>
      <anchorfile>en/cpp/numeric/random/cauchy_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cauchy_distribution</name>
      <anchorfile>en/cpp/numeric/random/cauchy_distribution/cauchy_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/cauchy_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/cauchy_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/cauchy_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/cauchy_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/cauchy_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::centi</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::cerr</name>
    <filename>cpp/io/cerr</filename>
  </compound>
  <compound kind="class">
    <name>std::char_traits</name>
    <filename>cpp/string/char_traits</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/char_traits/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/char_traits/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/char_traits/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/string/char_traits/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eq</name>
      <anchorfile>en/cpp/string/char_traits/cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eq_int_type</name>
      <anchorfile>en/cpp/string/char_traits/eq_int_type.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/char_traits/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/char_traits/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lt</name>
      <anchorfile>en/cpp/string/char_traits/cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/string/char_traits/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>not_eof</name>
      <anchorfile>en/cpp/string/char_traits/not_eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_char_type</name>
      <anchorfile>en/cpp/string/char_traits/to_char_type.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_int_type</name>
      <anchorfile>en/cpp/string/char_traits/to_int_type.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chars_format</name>
    <filename>cpp/utility/chars_format</filename>
  </compound>
  <compound kind="class">
    <name>std::chi_squared_distribution</name>
    <filename>cpp/numeric/random/chi_squared_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>chi_squared_distribution</name>
      <anchorfile>en/cpp/numeric/random/chi_squared_distribution/chi_squared_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/chi_squared_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/chi_squared_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>n</name>
      <anchorfile>en/cpp/numeric/random/chi_squared_distribution/n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/chi_squared_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/chi_squared_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/chi_squared_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std::chrono</name>
    <filename></filename>
    <class kind="class">std::chrono::duration</class>
    <member kind="function">
      <type>T</type>
      <name>duration_cast</name>
      <anchorfile>en/cpp/chrono/duration/duration_cast.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::chrono::duration_values</class>
    <class kind="class">std::chrono::high_resolution_clock</class>
    <class kind="class">std::chrono::hours</class>
    <class kind="class">std::chrono::microseconds</class>
    <class kind="class">std::chrono::milliseconds</class>
    <class kind="class">std::chrono::minutes</class>
    <class kind="class">std::chrono::nanoseconds</class>
    <class kind="class">std::chrono::seconds</class>
    <class kind="class">std::chrono::steady_clock</class>
    <class kind="class">std::chrono::system_clock</class>
    <class kind="class">std::chrono::time_point</class>
    <member kind="function">
      <type>T</type>
      <name>time_point_cast</name>
      <anchorfile>en/cpp/chrono/time_point/time_point_cast.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::chrono::treat_as_floating_point</class>
    <member kind="variable">
      <type>T</type>
      <name>treat_as_floating_point_v</name>
      <anchorfile>en/cpp/chrono/treat_as_floating_point.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::duration</name>
    <filename>cpp/chrono/duration</filename>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/chrono/duration/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>duration</name>
      <anchorfile>en/cpp/chrono/duration/duration.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/chrono/duration/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/chrono/duration/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator%=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/chrono/duration/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>zero</name>
      <anchorfile>en/cpp/chrono/duration/zero.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::duration_values</name>
    <filename>cpp/chrono/duration_values</filename>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/chrono/duration_values/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/chrono/duration_values/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>zero</name>
      <anchorfile>en/cpp/chrono/duration_values/zero.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::high_resolution_clock</name>
    <filename>cpp/chrono/high_resolution_clock</filename>
    <member kind="function">
      <type>T</type>
      <name>now</name>
      <anchorfile>en/cpp/chrono/high_resolution_clock/now.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::hours</name>
    <filename>cpp/chrono/duration</filename>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/chrono/duration/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hours</name>
      <anchorfile>en/cpp/chrono/duration/duration.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/chrono/duration/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/chrono/duration/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator%=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/chrono/duration/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>zero</name>
      <anchorfile>en/cpp/chrono/duration/zero.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::microseconds</name>
    <filename>cpp/chrono/duration</filename>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/chrono/duration/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/chrono/duration/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>microseconds</name>
      <anchorfile>en/cpp/chrono/duration/duration.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/chrono/duration/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator%=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/chrono/duration/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>zero</name>
      <anchorfile>en/cpp/chrono/duration/zero.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::milliseconds</name>
    <filename>cpp/chrono/duration</filename>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/chrono/duration/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/chrono/duration/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>milliseconds</name>
      <anchorfile>en/cpp/chrono/duration/duration.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/chrono/duration/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator%=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/chrono/duration/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>zero</name>
      <anchorfile>en/cpp/chrono/duration/zero.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::minutes</name>
    <filename>cpp/chrono/duration</filename>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/chrono/duration/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/chrono/duration/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/chrono/duration/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>minutes</name>
      <anchorfile>en/cpp/chrono/duration/duration.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator%=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/chrono/duration/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>zero</name>
      <anchorfile>en/cpp/chrono/duration/zero.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::nanoseconds</name>
    <filename>cpp/chrono/duration</filename>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/chrono/duration/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/chrono/duration/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/chrono/duration/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nanoseconds</name>
      <anchorfile>en/cpp/chrono/duration/duration.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator%=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/chrono/duration/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>zero</name>
      <anchorfile>en/cpp/chrono/duration/zero.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::seconds</name>
    <filename>cpp/chrono/duration</filename>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/chrono/duration/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/chrono/duration/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/chrono/duration/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator%=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/chrono/duration/operator_arith3.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/chrono/duration/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seconds</name>
      <anchorfile>en/cpp/chrono/duration/duration.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>zero</name>
      <anchorfile>en/cpp/chrono/duration/zero.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::steady_clock</name>
    <filename>cpp/chrono/steady_clock</filename>
    <member kind="function">
      <type>T</type>
      <name>now</name>
      <anchorfile>en/cpp/chrono/steady_clock/now.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::system_clock</name>
    <filename>cpp/chrono/system_clock</filename>
    <member kind="function">
      <type>T</type>
      <name>from_time_t</name>
      <anchorfile>en/cpp/chrono/system_clock/from_time_t.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>now</name>
      <anchorfile>en/cpp/chrono/system_clock/now.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_time_t</name>
      <anchorfile>en/cpp/chrono/system_clock/to_time_t.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::time_point</name>
    <filename>cpp/chrono/time_point</filename>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/chrono/time_point/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/chrono/time_point/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/chrono/time_point/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/chrono/time_point/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>time_point</name>
      <anchorfile>en/cpp/chrono/time_point/time_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>time_since_epoch</name>
      <anchorfile>en/cpp/chrono/time_point/time_since_epoch.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::chrono::treat_as_floating_point</name>
    <filename>cpp/chrono/treat_as_floating_point</filename>
  </compound>
  <compound kind="class">
    <name>std::cin</name>
    <filename>cpp/io/cin</filename>
  </compound>
  <compound kind="class">
    <name>std::clock_t</name>
    <filename>cpp/chrono/c/clock_t</filename>
  </compound>
  <compound kind="class">
    <name>std::clog</name>
    <filename>cpp/io/clog</filename>
  </compound>
  <compound kind="class">
    <name>std::cmatch</name>
    <filename>cpp/regex/match_results</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cmatch</name>
      <anchorfile>en/cpp/regex/match_results/match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/regex/match_results/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>format</name>
      <anchorfile>en/cpp/regex/match_results/format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/regex/match_results/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/match_results/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/regex/match_results/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/regex/match_results/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>position</name>
      <anchorfile>en/cpp/regex/match_results/position.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prefix</name>
      <anchorfile>en/cpp/regex/match_results/prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ready</name>
      <anchorfile>en/cpp/regex/match_results/ready.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/regex/match_results/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/match_results/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>suffix</name>
      <anchorfile>en/cpp/regex/match_results/suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/regex/match_results/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~cmatch</name>
      <anchorfile>en/cpp/regex/match_results/~match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt</name>
    <filename>cpp/locale/codecvt</filename>
    <member kind="function">
      <type>T</type>
      <name>always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>codecvt</name>
      <anchorfile>en/cpp/locale/codecvt/codecvt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt::extern_type</class>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/codecvt.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt::intern_type</class>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt::state_type</class>
    <member kind="function">
      <type>T</type>
      <name>unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~codecvt</name>
      <anchorfile>en/cpp/locale/codecvt/~codecvt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt::extern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt::intern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt::state_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_base</name>
    <filename>cpp/locale/codecvt_base</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_byname</name>
    <filename>cpp/locale/codecvt_byname</filename>
    <member kind="function">
      <type>T</type>
      <name>always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>codecvt_byname</name>
      <anchorfile>en/cpp/locale/codecvt_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_byname::extern_type</class>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/codecvt.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_byname::intern_type</class>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_byname::state_type</class>
    <member kind="function">
      <type>T</type>
      <name>unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~codecvt_byname</name>
      <anchorfile>en/cpp/locale/codecvt_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt_byname::extern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_byname::intern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_byname::state_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf16</name>
    <filename>cpp/locale/codecvt_utf16</filename>
    <member kind="function">
      <type>T</type>
      <name>always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf16::extern_type</class>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/codecvt.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf16::intern_type</class>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf16::state_type</class>
    <member kind="function">
      <type>T</type>
      <name>unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf16::extern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf16::intern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf16::state_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf8</name>
    <filename>cpp/locale/codecvt_utf8</filename>
    <member kind="function">
      <type>T</type>
      <name>always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf8::extern_type</class>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/codecvt.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf8::intern_type</class>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf8::state_type</class>
    <member kind="function">
      <type>T</type>
      <name>unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf8::extern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf8::intern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf8::state_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf8_utf16</name>
    <filename>cpp/locale/codecvt_utf8_utf16</filename>
    <member kind="function">
      <type>T</type>
      <name>always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_always_noconv</name>
      <anchorfile>en/cpp/locale/codecvt/always_noconv.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>encoding</name>
      <anchorfile>en/cpp/locale/codecvt/encoding.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf8_utf16::extern_type</class>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/codecvt.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in</name>
      <anchorfile>en/cpp/locale/codecvt/in.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf8_utf16::intern_type</class>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/locale/codecvt/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_length</name>
      <anchorfile>en/cpp/locale/codecvt/max_length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>out</name>
      <anchorfile>en/cpp/locale/codecvt/out.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::codecvt_utf8_utf16::state_type</class>
    <member kind="function">
      <type>T</type>
      <name>unshift</name>
      <anchorfile>en/cpp/locale/codecvt/unshift.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf8_utf16::extern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf8_utf16::intern_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::codecvt_utf8_utf16::state_type</name>
    <filename>cpp/locale/codecvt</filename>
  </compound>
  <compound kind="class">
    <name>std::collate</name>
    <filename>cpp/locale/collate</filename>
    <class kind="class">std::collate::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>collate</name>
      <anchorfile>en/cpp/locale/collate/collate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/locale/collate/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_compare</name>
      <anchorfile>en/cpp/locale/collate/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_hash</name>
      <anchorfile>en/cpp/locale/collate/hash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_transform</name>
      <anchorfile>en/cpp/locale/collate/transform.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash</name>
      <anchorfile>en/cpp/locale/collate/hash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/collate.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::collate::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>transform</name>
      <anchorfile>en/cpp/locale/collate/transform.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~collate</name>
      <anchorfile>en/cpp/locale/collate/~collate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::collate::char_type</name>
    <filename>cpp/locale/collate</filename>
  </compound>
  <compound kind="class">
    <name>std::collate::string_type</name>
    <filename>cpp/locale/collate</filename>
  </compound>
  <compound kind="class">
    <name>std::collate_byname</name>
    <filename>cpp/locale/collate_byname</filename>
    <class kind="class">std::collate_byname::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>collate_byname</name>
      <anchorfile>en/cpp/locale/collate_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/locale/collate/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_compare</name>
      <anchorfile>en/cpp/locale/collate/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_hash</name>
      <anchorfile>en/cpp/locale/collate/hash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_transform</name>
      <anchorfile>en/cpp/locale/collate/transform.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash</name>
      <anchorfile>en/cpp/locale/collate/hash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/collate.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::collate_byname::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>transform</name>
      <anchorfile>en/cpp/locale/collate/transform.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~collate_byname</name>
      <anchorfile>en/cpp/locale/collate_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::collate_byname::char_type</name>
    <filename>cpp/locale/collate</filename>
  </compound>
  <compound kind="class">
    <name>std::collate_byname::string_type</name>
    <filename>cpp/locale/collate</filename>
  </compound>
  <compound kind="class">
    <name>std::common_comparison_category</name>
    <filename>cpp/utility/compare/common_comparison_category</filename>
  </compound>
  <compound kind="class">
    <name>std::common_comparison_category_t</name>
    <filename>cpp/utility/compare/common_comparison_category</filename>
  </compound>
  <compound kind="class">
    <name>std::common_reference</name>
    <filename>cpp/types/common_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::common_reference_t</name>
    <filename>cpp/types/common_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::common_type</name>
    <filename>cpp/types/common_type</filename>
  </compound>
  <compound kind="class">
    <name>std::common_type_t</name>
    <filename>cpp/types/common_type</filename>
  </compound>
  <compound kind="class">
    <name>std::complex</name>
    <filename>cpp/numeric/complex</filename>
    <member kind="function">
      <type>T</type>
      <name>complex</name>
      <anchorfile>en/cpp/numeric/complex/complex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imag</name>
      <anchorfile>en/cpp/numeric/complex/imag.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*=</name>
      <anchorfile>en/cpp/numeric/complex/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/numeric/complex/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/numeric/complex/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/numeric/complex/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/numeric/complex/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>real</name>
      <anchorfile>en/cpp/numeric/complex/real.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::condition_variable</name>
    <filename>cpp/thread/condition_variable</filename>
    <member kind="function">
      <type>T</type>
      <name>condition_variable</name>
      <anchorfile>en/cpp/thread/condition_variable/condition_variable.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native_handle</name>
      <anchorfile>en/cpp/thread/condition_variable/native_handle.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>notify_all</name>
      <anchorfile>en/cpp/thread/condition_variable/notify_all.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>notify_one</name>
      <anchorfile>en/cpp/thread/condition_variable/notify_one.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait</name>
      <anchorfile>en/cpp/thread/condition_variable/wait.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_for</name>
      <anchorfile>en/cpp/thread/condition_variable/wait_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_until</name>
      <anchorfile>en/cpp/thread/condition_variable/wait_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~condition_variable</name>
      <anchorfile>en/cpp/thread/condition_variable/~condition_variable.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::condition_variable_any</name>
    <filename>cpp/thread/condition_variable_any</filename>
    <member kind="function">
      <type>T</type>
      <name>condition_variable_any</name>
      <anchorfile>en/cpp/thread/condition_variable_any/condition_variable_any.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>notify_all</name>
      <anchorfile>en/cpp/thread/condition_variable_any/notify_all.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>notify_one</name>
      <anchorfile>en/cpp/thread/condition_variable_any/notify_one.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait</name>
      <anchorfile>en/cpp/thread/condition_variable_any/wait.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_for</name>
      <anchorfile>en/cpp/thread/condition_variable_any/wait_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_until</name>
      <anchorfile>en/cpp/thread/condition_variable_any/wait_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~condition_variable_any</name>
      <anchorfile>en/cpp/thread/condition_variable_any/~condition_variable_any.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::conditional</name>
    <filename>cpp/types/conditional</filename>
  </compound>
  <compound kind="class">
    <name>std::conditional_t</name>
    <filename>cpp/types/conditional</filename>
  </compound>
  <compound kind="class">
    <name>std::conjunction</name>
    <filename>cpp/types/conjunction</filename>
  </compound>
  <compound kind="class">
    <name>std::cout</name>
    <filename>cpp/io/cout</filename>
  </compound>
  <compound kind="class">
    <name>std::cregex_iterator</name>
    <filename>cpp/regex/regex_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>cregex_iterator</name>
      <anchorfile>en/cpp/regex/regex_iterator/regex_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::cregex_token_iterator</name>
    <filename>cpp/regex/regex_token_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>cregex_token_iterator</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/regex_token_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::csub_match</name>
    <filename>cpp/regex/sub_match</filename>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/regex/sub_match/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>csub_match</name>
      <anchorfile>en/cpp/regex/sub_match/sub_match.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/sub_match/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator string_type</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ctype</name>
    <filename>cpp/locale/ctype</filename>
    <member kind="function">
      <type>T</type>
      <name>ctype</name>
      <anchorfile>en/cpp/locale/ctype/ctype.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_is</name>
      <anchorfile>en/cpp/locale/ctype/is.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_narrow</name>
      <anchorfile>en/cpp/locale/ctype/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_scan_is</name>
      <anchorfile>en/cpp/locale/ctype/scan_is.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_tolower</name>
      <anchorfile>en/cpp/locale/ctype/tolower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_toupper</name>
      <anchorfile>en/cpp/locale/ctype/toupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_widen</name>
      <anchorfile>en/cpp/locale/ctype/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/ctype.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is</name>
      <anchorfile>en/cpp/locale/ctype/is.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ctype::mask</class>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/locale/ctype/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scan_is</name>
      <anchorfile>en/cpp/locale/ctype/scan_is.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tolower</name>
      <anchorfile>en/cpp/locale/ctype/tolower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>toupper</name>
      <anchorfile>en/cpp/locale/ctype/toupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/locale/ctype/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~ctype</name>
      <anchorfile>en/cpp/locale/ctype/~ctype.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ctype::mask</name>
    <filename>cpp/locale/ctype_base</filename>
  </compound>
  <compound kind="class">
    <name>std::ctype_base</name>
    <filename>cpp/locale/ctype_base</filename>
    <class kind="class">std::ctype_base::mask</class>
  </compound>
  <compound kind="class">
    <name>std::ctype_base::mask</name>
    <filename>cpp/locale/ctype_base</filename>
  </compound>
  <compound kind="class">
    <name>std::ctype_byname</name>
    <filename>cpp/locale/ctype_byname</filename>
    <member kind="function">
      <type>T</type>
      <name>ctype_byname</name>
      <anchorfile>en/cpp/locale/ctype_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_is</name>
      <anchorfile>en/cpp/locale/ctype/is.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_narrow</name>
      <anchorfile>en/cpp/locale/ctype/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_scan_is</name>
      <anchorfile>en/cpp/locale/ctype/scan_is.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_tolower</name>
      <anchorfile>en/cpp/locale/ctype/tolower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_toupper</name>
      <anchorfile>en/cpp/locale/ctype/toupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_widen</name>
      <anchorfile>en/cpp/locale/ctype/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/ctype.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is</name>
      <anchorfile>en/cpp/locale/ctype/is.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ctype_byname::mask</class>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/locale/ctype/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scan_is</name>
      <anchorfile>en/cpp/locale/ctype/scan_is.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tolower</name>
      <anchorfile>en/cpp/locale/ctype/tolower.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>toupper</name>
      <anchorfile>en/cpp/locale/ctype/toupper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/locale/ctype/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~ctype_byname</name>
      <anchorfile>en/cpp/locale/ctype_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ctype_byname::mask</name>
    <filename>cpp/locale/ctype_base</filename>
  </compound>
  <compound kind="class">
    <name>std::deca</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::decay</name>
    <filename>cpp/types/decay</filename>
  </compound>
  <compound kind="class">
    <name>std::decay_t</name>
    <filename>cpp/types/decay</filename>
  </compound>
  <compound kind="class">
    <name>std::deci</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::default_delete</name>
    <filename>cpp/memory/default_delete</filename>
    <member kind="function">
      <type>T</type>
      <name>default_delete</name>
      <anchorfile>en/cpp/memory/default_delete.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/memory/default_delete.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::default_random_engine</name>
    <filename>cpp/numeric/random</filename>
  </compound>
  <compound kind="class">
    <name>std::default_searcher</name>
    <filename>cpp/utility/functional/default_searcher</filename>
    <member kind="function">
      <type>T</type>
      <name>default_searcher</name>
      <anchorfile>en/cpp/utility/functional/default_searcher.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/default_searcher.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::defer_lock_t</name>
    <filename>cpp/thread/lock_tag_t</filename>
  </compound>
  <compound kind="class">
    <name>std::deque</name>
    <filename>cpp/container/deque</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/container/deque/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/container/deque/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/container/deque/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/deque/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/deque/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/deque/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/deque/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/deque/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/deque/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deque</name>
      <anchorfile>en/cpp/container/deque/deque.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/deque/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_back</name>
      <anchorfile>en/cpp/container/deque/emplace_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_front</name>
      <anchorfile>en/cpp/container/deque/emplace_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/deque/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/deque/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/deque/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/deque/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/deque/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/deque/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/deque/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/deque/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/deque/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/container/deque/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_front</name>
      <anchorfile>en/cpp/container/deque/pop_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/container/deque/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_front</name>
      <anchorfile>en/cpp/container/deque/push_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/deque/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/deque/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/container/deque/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/container/deque/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/deque/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/deque/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~deque</name>
      <anchorfile>en/cpp/container/deque/~deque.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::discard_block_engine</name>
    <filename>cpp/numeric/random/discard_block_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>discard_block_engine</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/discard_block_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::discrete_distribution</name>
    <filename>cpp/numeric/random/discrete_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>discrete_distribution</name>
      <anchorfile>en/cpp/numeric/random/discrete_distribution/discrete_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/discrete_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/discrete_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/discrete_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/discrete_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>probabilities</name>
      <anchorfile>en/cpp/numeric/random/discrete_distribution/probabilities.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/discrete_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::disjunction</name>
    <filename>cpp/types/disjunction</filename>
  </compound>
  <compound kind="class">
    <name>std::div_t</name>
    <filename>cpp/numeric/math/div</filename>
    <member kind="variable">
      <type>T</type>
      <name>quot</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rem</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::divides</name>
    <filename>cpp/utility/functional/divides</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/divides.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::domain_error</name>
    <filename>cpp/error/domain_error</filename>
    <member kind="function">
      <type>T</type>
      <name>domain_error</name>
      <anchorfile>en/cpp/error/domain_error/domain_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::enable_if</name>
    <filename>cpp/types/enable_if</filename>
  </compound>
  <compound kind="class">
    <name>std::enable_if_t</name>
    <filename>cpp/types/enable_if</filename>
  </compound>
  <compound kind="class">
    <name>std::enable_shared_from_this</name>
    <filename>cpp/memory/enable_shared_from_this</filename>
    <member kind="function">
      <type>T</type>
      <name>enable_shared_from_this</name>
      <anchorfile>en/cpp/memory/enable_shared_from_this/enable_shared_from_this.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/memory/enable_shared_from_this/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shared_from_this</name>
      <anchorfile>en/cpp/memory/enable_shared_from_this/shared_from_this.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>weak_from_this</name>
      <anchorfile>en/cpp/memory/enable_shared_from_this/weak_from_this.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~enable_shared_from_this</name>
      <anchorfile>en/cpp/memory/enable_shared_from_this/~enable_shared_from_this.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::equal_to</name>
    <filename>cpp/utility/functional/equal_to</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/equal_to.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::errc</name>
    <filename>cpp/error/errc</filename>
  </compound>
  <compound kind="class">
    <name>std::error_category</name>
    <filename>cpp/error/error_category</filename>
    <member kind="function">
      <type>T</type>
      <name>default_error_condition</name>
      <anchorfile>en/cpp/error/error_category/default_error_condition.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equivalent</name>
      <anchorfile>en/cpp/error/error_category/equivalent.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>error_category</name>
      <anchorfile>en/cpp/error/error_category/error_category.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>message</name>
      <anchorfile>en/cpp/error/error_category/message.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>name</name>
      <anchorfile>en/cpp/error/error_category/name.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/error/error_category/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;</name>
      <anchorfile>en/cpp/error/error_category/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/error/error_category/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~error_category</name>
      <anchorfile>en/cpp/error/error_category/~error_category.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::error_code</name>
    <filename>cpp/error/error_code</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/error/error_code/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>category</name>
      <anchorfile>en/cpp/error/error_code/category.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/error/error_code/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>default_error_condition</name>
      <anchorfile>en/cpp/error/error_code/default_error_condition.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>error_code</name>
      <anchorfile>en/cpp/error/error_code/error_code.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>message</name>
      <anchorfile>en/cpp/error/error_code/message.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/error/error_code/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/error/error_code/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>en/cpp/error/error_code/value.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::error_condition</name>
    <filename>cpp/error/error_condition</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/error/error_condition/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>category</name>
      <anchorfile>en/cpp/error/error_condition/category.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/error/error_condition/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>error_condition</name>
      <anchorfile>en/cpp/error/error_condition/error_condition.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>message</name>
      <anchorfile>en/cpp/error/error_condition/message.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/error/error_condition/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/error/error_condition/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>en/cpp/error/error_condition/value.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::exa</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::exception</name>
    <filename>cpp/error/exception</filename>
    <member kind="function">
      <type>T</type>
      <name>exception</name>
      <anchorfile>en/cpp/error/exception/exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/error/exception/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~exception</name>
      <anchorfile>en/cpp/error/exception/~exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::exception_ptr</name>
    <filename>cpp/error/exception_ptr</filename>
  </compound>
  <compound kind="namespace">
    <name>std::execution</name>
    <filename></filename>
    <class kind="class">std::execution::parallel_policy</class>
    <class kind="class">std::execution::parallel_unsequenced_policy</class>
    <class kind="class">std::execution::sequenced_policy</class>
    <class kind="class">std::execution::unsequenced_policy</class>
  </compound>
  <compound kind="class">
    <name>std::execution::parallel_policy</name>
    <filename>cpp/algorithm/execution_policy_tag_t</filename>
  </compound>
  <compound kind="class">
    <name>std::execution::parallel_unsequenced_policy</name>
    <filename>cpp/algorithm/execution_policy_tag_t</filename>
  </compound>
  <compound kind="class">
    <name>std::execution::sequenced_policy</name>
    <filename>cpp/algorithm/execution_policy_tag_t</filename>
  </compound>
  <compound kind="class">
    <name>std::execution::unsequenced_policy</name>
    <filename>cpp/algorithm/execution_policy_tag_t</filename>
  </compound>
  <compound kind="namespace">
    <name>std::experimental</name>
    <filename></filename>
    <member kind="variable">
      <type>T</type>
      <name>alignment_of_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::experimental::any</class>
    <member kind="function">
      <type>T</type>
      <name>any_cast</name>
      <anchorfile>en/cpp/experimental/any/any_cast.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply</name>
      <anchorfile>en/cpp/experimental/apply.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::bad_optional_access</class>
    <class kind="class">std::experimental::basic_string_view</class>
    <class kind="class">std::experimental::boyer_moore_horspool_searcher</class>
    <class kind="class">std::experimental::boyer_moore_searcher</class>
    <class kind="class">std::experimental::default_searcher</class>
    <class kind="class">std::experimental::detected_or</class>
    <class kind="class">std::experimental::detected_or_t</class>
    <class kind="class">std::experimental::erased_type</class>
    <member kind="variable">
      <type>T</type>
      <name>extent_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <namespace>std::experimental::filesystem</namespace>
    <member kind="function">
      <type>T</type>
      <name>gcd</name>
      <anchorfile>en/cpp/experimental/gcd.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>has_virtual_destructor_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::experimental::invocation_type</class>
    <member kind="variable">
      <type>T</type>
      <name>is_abstract_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_arithmetic_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_array_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_assignable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_base_of_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_bind_expression_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_class_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_compound_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_const_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_convertible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_copy_assignable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_copy_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_default_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_destructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::experimental::is_detected</class>
    <class kind="class">std::experimental::is_detected_convertible</class>
    <member kind="variable">
      <type>T</type>
      <name>is_detected_convertible_v</name>
      <anchorfile>en/cpp/experimental/is_detected.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::experimental::is_detected_exact</class>
    <member kind="variable">
      <type>T</type>
      <name>is_detected_exact_v</name>
      <anchorfile>en/cpp/experimental/is_detected.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_detected_v</name>
      <anchorfile>en/cpp/experimental/is_detected.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_empty_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_enum_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_error_code_enum_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_error_condition_enum_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_final_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_floating_point_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_function_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_fundamental_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_integral_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_literal_type_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_lvalue_reference_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_member_function_pointer_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_member_object_pointer_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_member_pointer_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_move_assignable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_move_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_assignable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_copy_assignable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_copy_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_default_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_destructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_move_assignable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_nothrow_move_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_null_pointer_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_object_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_placeholder_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_pod_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_pointer_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_polymorphic_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_reference_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_rvalue_reference_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_same_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_scalar_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_signed_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_standard_layout_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivial_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_assignable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_copy_assignable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_copy_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_copyable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_default_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_destructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_move_assignable_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_trivially_move_constructible_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_union_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_unsigned_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_void_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>is_volatile_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lcm</name>
      <anchorfile>en/cpp/experimental/lcm.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_array</name>
      <anchorfile>en/cpp/experimental/make_array.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_boyer_moore_horspool_searcher</name>
      <anchorfile>en/cpp/experimental/boyer_moore_horspool_searcher.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_boyer_moore_searcher</name>
      <anchorfile>en/cpp/experimental/boyer_moore_searcher.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_default_searcher</name>
      <anchorfile>en/cpp/experimental/default_searcher.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_optional</name>
      <anchorfile>en/cpp/experimental/optional/make_optional.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::nonesuch</class>
    <member kind="function">
      <type>T</type>
      <name>not_fn</name>
      <anchorfile>en/cpp/experimental/not_fn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::observer_ptr</class>
    <class kind="class">std::experimental::optional</class>
    <class kind="class">std::experimental::ostream_joiner</class>
    <namespace>std::experimental::pmr</namespace>
    <class kind="class">std::experimental::propagate_const</class>
    <member kind="function">
      <type>T</type>
      <name>randint</name>
      <anchorfile>en/cpp/experimental/randint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rank_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ratio_equal_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ratio_greater_equal_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ratio_greater_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ratio_less_equal_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ratio_less_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ratio_not_equal_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::experimental::raw_invocation_type</class>
    <member kind="function">
      <type>T</type>
      <name>reseed</name>
      <anchorfile>en/cpp/experimental/reseed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sample</name>
      <anchorfile>en/cpp/experimental/sample.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>search</name>
      <anchorfile>en/cpp/experimental/search.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::source_location</class>
    <class kind="class">std::experimental::string_view</class>
    <member kind="function">
      <type>T</type>
      <name>to_array</name>
      <anchorfile>en/cpp/experimental/to_array.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>treat_as_floating_point_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>tuple_size_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::experimental::u16string_view</class>
    <class kind="class">std::experimental::u32string_view</class>
    <member kind="variable">
      <type>T</type>
      <name>uses_allocator_v</name>
      <anchorfile>en/cpp/experimental/type_trait_variable_templates.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::experimental::wstring_view</class>
  </compound>
  <compound kind="class">
    <name>std::experimental::any</name>
    <filename>cpp/experimental/any</filename>
    <member kind="function">
      <type>T</type>
      <name>any</name>
      <anchorfile>en/cpp/experimental/any/any.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/experimental/any/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/experimental/any/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/any/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/experimental/any/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>type</name>
      <anchorfile>en/cpp/experimental/any/type.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::bad_optional_access</name>
    <filename>cpp/utility/optional/bad_optional_access</filename>
    <member kind="function">
      <type>T</type>
      <name>bad_optional_access</name>
      <anchorfile>en/cpp/utility/optional/bad_optional_access.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::basic_string_view</name>
    <filename>cpp/experimental/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/experimental/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/experimental/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>basic_string_view</name>
      <anchorfile>en/cpp/experimental/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/experimental/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/experimental/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/experimental/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/experimental/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/experimental/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/experimental/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/experimental/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::boyer_moore_horspool_searcher</name>
    <filename>cpp/experimental/boyer_moore_horspool_searcher</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::boyer_moore_searcher</name>
    <filename>cpp/experimental/boyer_moore_searcher</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::default_searcher</name>
    <filename>cpp/experimental/default_searcher</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::detected_or</name>
    <filename>cpp/experimental/is_detected</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::detected_or_t</name>
    <filename>cpp/experimental/is_detected</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::erased_type</name>
    <filename>cpp/experimental/erased_type</filename>
  </compound>
  <compound kind="namespace">
    <name>std::experimental::filesystem</name>
    <filename></filename>
    <member kind="function">
      <type>T</type>
      <name>absolute</name>
      <anchorfile>en/cpp/experimental/fs/absolute.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>canonical</name>
      <anchorfile>en/cpp/experimental/fs/canonical.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/experimental/fs/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy_file</name>
      <anchorfile>en/cpp/experimental/fs/copy_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::filesystem::copy_options</class>
    <member kind="function">
      <type>T</type>
      <name>copy_symlink</name>
      <anchorfile>en/cpp/experimental/fs/copy_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_directories</name>
      <anchorfile>en/cpp/experimental/fs/create_directory.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_directory</name>
      <anchorfile>en/cpp/experimental/fs/create_directory.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_directory_symlink</name>
      <anchorfile>en/cpp/experimental/fs/create_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_hard_link</name>
      <anchorfile>en/cpp/experimental/fs/create_hard_link.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_symlink</name>
      <anchorfile>en/cpp/experimental/fs/create_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>current_path</name>
      <anchorfile>en/cpp/experimental/fs/current_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::filesystem::directory_entry</class>
    <class kind="class">std::experimental::filesystem::directory_iterator</class>
    <class kind="class">std::experimental::filesystem::directory_options</class>
    <member kind="function">
      <type>T</type>
      <name>equivalent</name>
      <anchorfile>en/cpp/experimental/fs/equivalent.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exists</name>
      <anchorfile>en/cpp/experimental/fs/exists.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>file_size</name>
      <anchorfile>en/cpp/experimental/fs/file_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::filesystem::file_status</class>
    <class kind="class">std::experimental::filesystem::file_time_type</class>
    <class kind="class">std::experimental::filesystem::file_type</class>
    <class kind="class">std::experimental::filesystem::filesystem_error</class>
    <member kind="function">
      <type>T</type>
      <name>hard_link_count</name>
      <anchorfile>en/cpp/experimental/fs/hard_link_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_block_file</name>
      <anchorfile>en/cpp/experimental/fs/is_block_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_character_file</name>
      <anchorfile>en/cpp/experimental/fs/is_character_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_directory</name>
      <anchorfile>en/cpp/experimental/fs/is_directory.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_empty</name>
      <anchorfile>en/cpp/experimental/fs/is_empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_fifo</name>
      <anchorfile>en/cpp/experimental/fs/is_fifo.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_other</name>
      <anchorfile>en/cpp/experimental/fs/is_other.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_regular_file</name>
      <anchorfile>en/cpp/experimental/fs/is_regular_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_socket</name>
      <anchorfile>en/cpp/experimental/fs/is_socket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_symlink</name>
      <anchorfile>en/cpp/experimental/fs/is_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>last_write_time</name>
      <anchorfile>en/cpp/experimental/fs/last_write_time.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::filesystem::path</class>
    <member kind="function">
      <type>T</type>
      <name>permissions</name>
      <anchorfile>en/cpp/experimental/fs/permissions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::filesystem::perms</class>
    <member kind="function">
      <type>T</type>
      <name>read_symlink</name>
      <anchorfile>en/cpp/experimental/fs/read_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::filesystem::recursive_directory_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>remove</name>
      <anchorfile>en/cpp/experimental/fs/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_all</name>
      <anchorfile>en/cpp/experimental/fs/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rename</name>
      <anchorfile>en/cpp/experimental/fs/rename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize_file</name>
      <anchorfile>en/cpp/experimental/fs/resize_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>space</name>
      <anchorfile>en/cpp/experimental/fs/space.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::filesystem::space_info</class>
    <member kind="function">
      <type>T</type>
      <name>status</name>
      <anchorfile>en/cpp/experimental/fs/status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>status_known</name>
      <anchorfile>en/cpp/experimental/fs/status_known.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>symlink_status</name>
      <anchorfile>en/cpp/experimental/fs/status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>system_complete</name>
      <anchorfile>en/cpp/experimental/fs/absolute.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>temp_directory_path</name>
      <anchorfile>en/cpp/experimental/fs/temp_directory_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::copy_options</name>
    <filename>cpp/experimental/fs/copy_options</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::directory_entry</name>
    <filename>cpp/experimental/fs/directory_entry</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/experimental/fs/directory_entry/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>directory_entry</name>
      <anchorfile>en/cpp/experimental/fs/directory_entry/directory_entry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/fs/directory_entry/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>path</name>
      <anchorfile>en/cpp/experimental/fs/directory_entry/path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace_filename</name>
      <anchorfile>en/cpp/experimental/fs/directory_entry/replace_filename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>status</name>
      <anchorfile>en/cpp/experimental/fs/directory_entry/status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>symlink_status</name>
      <anchorfile>en/cpp/experimental/fs/directory_entry/status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::directory_iterator</name>
    <filename>cpp/experimental/fs/directory_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>directory_iterator</name>
      <anchorfile>en/cpp/experimental/fs/directory_iterator/directory_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>increment</name>
      <anchorfile>en/cpp/experimental/fs/directory_iterator/increment.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/experimental/fs/directory_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/experimental/fs/directory_iterator/increment.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/experimental/fs/directory_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/fs/directory_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::directory_options</name>
    <filename>cpp/experimental/fs/directory_options</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::file_status</name>
    <filename>cpp/experimental/fs/file_status</filename>
    <member kind="function">
      <type>T</type>
      <name>file_status</name>
      <anchorfile>en/cpp/experimental/fs/file_status/file_status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/fs/file_status/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>permissions</name>
      <anchorfile>en/cpp/experimental/fs/file_status/permissions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>type</name>
      <anchorfile>en/cpp/experimental/fs/file_status/type.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::file_time_type</name>
    <filename>cpp/experimental/fs/file_time_type</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::file_type</name>
    <filename>cpp/experimental/fs/file_type</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::filesystem_error</name>
    <filename>cpp/experimental/fs/filesystem_error</filename>
    <member kind="function">
      <type>T</type>
      <name>filesystem_error</name>
      <anchorfile>en/cpp/experimental/fs/filesystem_error/filesystem_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>path1</name>
      <anchorfile>en/cpp/experimental/fs/filesystem_error/path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>path2</name>
      <anchorfile>en/cpp/experimental/fs/filesystem_error/path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/experimental/fs/filesystem_error/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::path</name>
    <filename>cpp/experimental/fs/path</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/experimental/fs/path/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/experimental/fs/path/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/experimental/fs/path/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/experimental/fs/path/native.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/experimental/fs/path/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/experimental/fs/path/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>concat</name>
      <anchorfile>en/cpp/experimental/fs/path/concat.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/experimental/fs/path/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/experimental/fs/path/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extension</name>
      <anchorfile>en/cpp/experimental/fs/path/extension.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>filename</name>
      <anchorfile>en/cpp/experimental/fs/path/filename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_string</name>
      <anchorfile>en/cpp/experimental/fs/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_u16string</name>
      <anchorfile>en/cpp/experimental/fs/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_u32string</name>
      <anchorfile>en/cpp/experimental/fs/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_u8string</name>
      <anchorfile>en/cpp/experimental/fs/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_wstring</name>
      <anchorfile>en/cpp/experimental/fs/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_extension</name>
      <anchorfile>en/cpp/experimental/fs/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_filename</name>
      <anchorfile>en/cpp/experimental/fs/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_parent_path</name>
      <anchorfile>en/cpp/experimental/fs/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_relative_path</name>
      <anchorfile>en/cpp/experimental/fs/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_root_directory</name>
      <anchorfile>en/cpp/experimental/fs/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_root_name</name>
      <anchorfile>en/cpp/experimental/fs/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_root_path</name>
      <anchorfile>en/cpp/experimental/fs/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_stem</name>
      <anchorfile>en/cpp/experimental/fs/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_preferred</name>
      <anchorfile>en/cpp/experimental/fs/path/make_preferred.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native</name>
      <anchorfile>en/cpp/experimental/fs/path/native.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator string_type</name>
      <anchorfile>en/cpp/experimental/fs/path/native.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/experimental/fs/path/concat.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/experimental/fs/path/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/fs/path/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>parent_path</name>
      <anchorfile>en/cpp/experimental/fs/path/parent_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>path</name>
      <anchorfile>en/cpp/experimental/fs/path/path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>relative_path</name>
      <anchorfile>en/cpp/experimental/fs/path/relative_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_filename</name>
      <anchorfile>en/cpp/experimental/fs/path/remove_filename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace_extension</name>
      <anchorfile>en/cpp/experimental/fs/path/replace_extension.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace_filename</name>
      <anchorfile>en/cpp/experimental/fs/path/replace_filename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>root_directory</name>
      <anchorfile>en/cpp/experimental/fs/path/root_directory.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>root_name</name>
      <anchorfile>en/cpp/experimental/fs/path/root_name.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>root_path</name>
      <anchorfile>en/cpp/experimental/fs/path/root_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stem</name>
      <anchorfile>en/cpp/experimental/fs/path/stem.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>string</name>
      <anchorfile>en/cpp/experimental/fs/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/experimental/fs/path/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u16string</name>
      <anchorfile>en/cpp/experimental/fs/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u32string</name>
      <anchorfile>en/cpp/experimental/fs/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u8string</name>
      <anchorfile>en/cpp/experimental/fs/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstring</name>
      <anchorfile>en/cpp/experimental/fs/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~path</name>
      <anchorfile>en/cpp/experimental/fs/path/~path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::perms</name>
    <filename>cpp/experimental/fs/perms</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::recursive_directory_iterator</name>
    <filename>cpp/experimental/fs/recursive_directory_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>depth</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/depth.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>disable_recursion_pending</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/disable_recursion_pending.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>increment</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/increment.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/increment.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>options</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/options.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/pop.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>recursion_pending</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/recursion_pending.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>recursive_directory_iterator</name>
      <anchorfile>en/cpp/experimental/fs/recursive_directory_iterator/recursive_directory_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::filesystem::space_info</name>
    <filename>cpp/experimental/fs/space_info</filename>
    <member kind="variable">
      <type>T</type>
      <name>available</name>
      <anchorfile>en/cpp/experimental/fs/space_info.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/experimental/fs/space_info.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>free</name>
      <anchorfile>en/cpp/experimental/fs/space_info.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::invocation_type</name>
    <filename>cpp/experimental/invocation_type</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::is_detected</name>
    <filename>cpp/experimental/is_detected</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::is_detected_convertible</name>
    <filename>cpp/experimental/is_detected</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::is_detected_exact</name>
    <filename>cpp/experimental/is_detected</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::nonesuch</name>
    <filename>cpp/experimental/nonesuch</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::observer_ptr</name>
    <filename>cpp/experimental/observer_ptr</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::optional</name>
    <filename>cpp/experimental/optional</filename>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/experimental/optional/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/experimental/optional/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/experimental/optional/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/experimental/optional/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/optional/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>optional</name>
      <anchorfile>en/cpp/experimental/optional/optional.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/experimental/optional/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>en/cpp/experimental/optional/value.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_or</name>
      <anchorfile>en/cpp/experimental/optional/value_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~optional</name>
      <anchorfile>en/cpp/experimental/optional/~optional.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::ostream_joiner</name>
    <filename>cpp/experimental/ostream_joiner</filename>
  </compound>
  <compound kind="namespace">
    <name>std::experimental::pmr</name>
    <filename></filename>
    <member kind="function">
      <type>T</type>
      <name>get_default_resource</name>
      <anchorfile>en/cpp/experimental/get_default_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::pmr::memory_resource</class>
    <class kind="class">std::experimental::pmr::monotonic_buffer_resource</class>
    <class kind="class">std::experimental::pmr::new_delete_resource</class>
    <class kind="class">std::experimental::pmr::null_memory_resource</class>
    <class kind="class">std::experimental::pmr::polymorphic_allocator</class>
    <class kind="class">std::experimental::pmr::resource_adaptor</class>
    <member kind="function">
      <type>T</type>
      <name>set_default_resource</name>
      <anchorfile>en/cpp/experimental/set_default_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::experimental::pmr::synchronized_pool_resource</class>
    <class kind="class">std::experimental::pmr::unsynchronized_pool_resource</class>
  </compound>
  <compound kind="class">
    <name>std::experimental::pmr::memory_resource</name>
    <filename>cpp/experimental/memory_resource</filename>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>en/cpp/experimental/memory_resource/allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>en/cpp/experimental/memory_resource/deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_allocate</name>
      <anchorfile>en/cpp/experimental/memory_resource/do_allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_deallocate</name>
      <anchorfile>en/cpp/experimental/memory_resource/do_deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_is_equal</name>
      <anchorfile>en/cpp/experimental/memory_resource/do_is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_equal</name>
      <anchorfile>en/cpp/experimental/memory_resource/is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>memory_resource</name>
      <anchorfile>en/cpp/experimental/memory_resource/memory_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::pmr::monotonic_buffer_resource</name>
    <filename>cpp/experimental/monotonic_buffer_resource</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::pmr::new_delete_resource</name>
    <filename>cpp/experimental/new_delete_resource</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::pmr::null_memory_resource</name>
    <filename>cpp/experimental/null_memory_resource</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::pmr::polymorphic_allocator</name>
    <filename>cpp/experimental/polymorphic_allocator</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::pmr::resource_adaptor</name>
    <filename>cpp/experimental/resource_adaptor</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::pmr::synchronized_pool_resource</name>
    <filename>cpp/experimental/synchronized_pool_resource</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::pmr::unsynchronized_pool_resource</name>
    <filename>cpp/experimental/unsynchronized_pool_resource</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::propagate_const</name>
    <filename>cpp/experimental/propagate_const</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::raw_invocation_type</name>
    <filename>cpp/experimental/invocation_type</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::source_location</name>
    <filename>cpp/experimental/source_location</filename>
  </compound>
  <compound kind="class">
    <name>std::experimental::string_view</name>
    <filename>cpp/experimental/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/experimental/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/experimental/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/experimental/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/experimental/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/experimental/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/experimental/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/experimental/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>string_view</name>
      <anchorfile>en/cpp/experimental/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/experimental/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/experimental/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::u16string_view</name>
    <filename>cpp/experimental/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/experimental/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/experimental/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/experimental/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/experimental/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/experimental/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/experimental/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/experimental/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/experimental/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/experimental/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u16string_view</name>
      <anchorfile>en/cpp/experimental/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::u32string_view</name>
    <filename>cpp/experimental/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/experimental/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/experimental/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/experimental/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/experimental/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/experimental/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/experimental/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/experimental/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/experimental/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/experimental/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u32string_view</name>
      <anchorfile>en/cpp/experimental/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::experimental::wstring_view</name>
    <filename>cpp/experimental/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/experimental/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/experimental/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/experimental/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/experimental/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/experimental/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/experimental/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/experimental/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/experimental/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/experimental/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/experimental/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/experimental/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/experimental/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/experimental/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/experimental/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/experimental/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_string</name>
      <anchorfile>en/cpp/experimental/basic_string_view/to_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstring_view</name>
      <anchorfile>en/cpp/experimental/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::exponential_distribution</name>
    <filename>cpp/numeric/random/exponential_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>exponential_distribution</name>
      <anchorfile>en/cpp/numeric/random/exponential_distribution/exponential_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lambda</name>
      <anchorfile>en/cpp/numeric/random/exponential_distribution/lambda.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/exponential_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/exponential_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/exponential_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/exponential_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/exponential_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::extent</name>
    <filename>cpp/types/extent</filename>
  </compound>
  <compound kind="class">
    <name>std::extreme_value_distribution</name>
    <filename>cpp/numeric/random/extreme_value_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>a</name>
      <anchorfile>en/cpp/numeric/random/extreme_value_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>b</name>
      <anchorfile>en/cpp/numeric/random/extreme_value_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extreme_value_distribution</name>
      <anchorfile>en/cpp/numeric/random/extreme_value_distribution/extreme_value_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/extreme_value_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/extreme_value_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/extreme_value_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/extreme_value_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/extreme_value_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::false_type</name>
    <filename>cpp/types/integral_constant</filename>
  </compound>
  <compound kind="class">
    <name>std::femto</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::filebuf</name>
    <filename>cpp/io/basic_filebuf</filename>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_filebuf/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>filebuf</name>
      <anchorfile>en/cpp/io/basic_filebuf/basic_filebuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_filebuf/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_filebuf/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_filebuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~filebuf</name>
      <anchorfile>en/cpp/io/basic_filebuf/~basic_filebuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std::filesystem</name>
    <filename></filename>
    <member kind="function">
      <type>T</type>
      <name>absolute</name>
      <anchorfile>en/cpp/filesystem/absolute.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>canonical</name>
      <anchorfile>en/cpp/filesystem/canonical.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/filesystem/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy_file</name>
      <anchorfile>en/cpp/filesystem/copy_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::filesystem::copy_options</class>
    <member kind="function">
      <type>T</type>
      <name>copy_symlink</name>
      <anchorfile>en/cpp/filesystem/copy_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_directories</name>
      <anchorfile>en/cpp/filesystem/create_directory.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_directory</name>
      <anchorfile>en/cpp/filesystem/create_directory.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_directory_symlink</name>
      <anchorfile>en/cpp/filesystem/create_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_hard_link</name>
      <anchorfile>en/cpp/filesystem/create_hard_link.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>create_symlink</name>
      <anchorfile>en/cpp/filesystem/create_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>current_path</name>
      <anchorfile>en/cpp/filesystem/current_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::filesystem::directory_entry</class>
    <class kind="class">std::filesystem::directory_iterator</class>
    <class kind="class">std::filesystem::directory_options</class>
    <member kind="function">
      <type>T</type>
      <name>equivalent</name>
      <anchorfile>en/cpp/filesystem/equivalent.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>exists</name>
      <anchorfile>en/cpp/filesystem/exists.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>file_size</name>
      <anchorfile>en/cpp/filesystem/file_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::filesystem::file_status</class>
    <class kind="class">std::filesystem::file_time_type</class>
    <class kind="class">std::filesystem::file_type</class>
    <class kind="class">std::filesystem::filesystem_error</class>
    <member kind="function">
      <type>T</type>
      <name>hard_link_count</name>
      <anchorfile>en/cpp/filesystem/hard_link_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_block_file</name>
      <anchorfile>en/cpp/filesystem/is_block_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_character_file</name>
      <anchorfile>en/cpp/filesystem/is_character_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_directory</name>
      <anchorfile>en/cpp/filesystem/is_directory.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_empty</name>
      <anchorfile>en/cpp/filesystem/is_empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_fifo</name>
      <anchorfile>en/cpp/filesystem/is_fifo.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_other</name>
      <anchorfile>en/cpp/filesystem/is_other.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_regular_file</name>
      <anchorfile>en/cpp/filesystem/is_regular_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_socket</name>
      <anchorfile>en/cpp/filesystem/is_socket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_symlink</name>
      <anchorfile>en/cpp/filesystem/is_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>last_write_time</name>
      <anchorfile>en/cpp/filesystem/last_write_time.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::filesystem::path</class>
    <class kind="class">std::filesystem::perm_options</class>
    <member kind="function">
      <type>T</type>
      <name>permissions</name>
      <anchorfile>en/cpp/filesystem/permissions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::filesystem::perms</class>
    <member kind="function">
      <type>T</type>
      <name>proximate</name>
      <anchorfile>en/cpp/filesystem/relative.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read_symlink</name>
      <anchorfile>en/cpp/filesystem/read_symlink.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::filesystem::recursive_directory_iterator</class>
    <member kind="function">
      <type>T</type>
      <name>relative</name>
      <anchorfile>en/cpp/filesystem/relative.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove</name>
      <anchorfile>en/cpp/filesystem/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_all</name>
      <anchorfile>en/cpp/filesystem/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rename</name>
      <anchorfile>en/cpp/filesystem/rename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize_file</name>
      <anchorfile>en/cpp/filesystem/resize_file.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>space</name>
      <anchorfile>en/cpp/filesystem/space.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::filesystem::space_info</class>
    <member kind="function">
      <type>T</type>
      <name>status</name>
      <anchorfile>en/cpp/filesystem/status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>status_known</name>
      <anchorfile>en/cpp/filesystem/status_known.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>symlink_status</name>
      <anchorfile>en/cpp/filesystem/status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>temp_directory_path</name>
      <anchorfile>en/cpp/filesystem/temp_directory_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u8path</name>
      <anchorfile>en/cpp/filesystem/path/u8path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>weakly_canonical</name>
      <anchorfile>en/cpp/filesystem/canonical.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::filesystem::copy_options</name>
    <filename>cpp/filesystem/copy_options</filename>
  </compound>
  <compound kind="class">
    <name>std::filesystem::directory_entry</name>
    <filename>cpp/filesystem/directory_entry</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/filesystem/directory_entry/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>directory_entry</name>
      <anchorfile>en/cpp/filesystem/directory_entry/directory_entry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/filesystem/directory_entry/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>path</name>
      <anchorfile>en/cpp/filesystem/directory_entry/path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace_filename</name>
      <anchorfile>en/cpp/filesystem/directory_entry/replace_filename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>status</name>
      <anchorfile>en/cpp/filesystem/directory_entry/status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>symlink_status</name>
      <anchorfile>en/cpp/filesystem/directory_entry/status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::filesystem::directory_iterator</name>
    <filename>cpp/filesystem/directory_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>directory_iterator</name>
      <anchorfile>en/cpp/filesystem/directory_iterator/directory_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>increment</name>
      <anchorfile>en/cpp/filesystem/directory_iterator/increment.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/filesystem/directory_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/filesystem/directory_iterator/increment.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/filesystem/directory_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/filesystem/directory_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::filesystem::directory_options</name>
    <filename>cpp/filesystem/directory_options</filename>
  </compound>
  <compound kind="class">
    <name>std::filesystem::file_status</name>
    <filename>cpp/filesystem/file_status</filename>
    <member kind="function">
      <type>T</type>
      <name>file_status</name>
      <anchorfile>en/cpp/filesystem/file_status/file_status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/filesystem/file_status/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>permissions</name>
      <anchorfile>en/cpp/filesystem/file_status/permissions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>type</name>
      <anchorfile>en/cpp/filesystem/file_status/type.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~file_status</name>
      <anchorfile>en/cpp/filesystem/file_status.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::filesystem::file_time_type</name>
    <filename>cpp/filesystem/file_time_type</filename>
  </compound>
  <compound kind="class">
    <name>std::filesystem::file_type</name>
    <filename>cpp/filesystem/file_type</filename>
  </compound>
  <compound kind="class">
    <name>std::filesystem::filesystem_error</name>
    <filename>cpp/filesystem/filesystem_error</filename>
    <member kind="function">
      <type>T</type>
      <name>filesystem_error</name>
      <anchorfile>en/cpp/filesystem/filesystem_error/filesystem_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>path1</name>
      <anchorfile>en/cpp/filesystem/filesystem_error/path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>path2</name>
      <anchorfile>en/cpp/filesystem/filesystem_error/path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/filesystem/filesystem_error/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::filesystem::path</name>
    <filename>cpp/filesystem/path</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/filesystem/path/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/filesystem/path/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/filesystem/path/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/filesystem/path/native.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/filesystem/path/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/filesystem/path/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>concat</name>
      <anchorfile>en/cpp/filesystem/path/concat.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/filesystem/path/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/filesystem/path/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extension</name>
      <anchorfile>en/cpp/filesystem/path/extension.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>filename</name>
      <anchorfile>en/cpp/filesystem/path/filename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_string</name>
      <anchorfile>en/cpp/filesystem/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_u16string</name>
      <anchorfile>en/cpp/filesystem/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_u32string</name>
      <anchorfile>en/cpp/filesystem/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_u8string</name>
      <anchorfile>en/cpp/filesystem/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>generic_wstring</name>
      <anchorfile>en/cpp/filesystem/path/generic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_extension</name>
      <anchorfile>en/cpp/filesystem/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_filename</name>
      <anchorfile>en/cpp/filesystem/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_parent_path</name>
      <anchorfile>en/cpp/filesystem/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_relative_path</name>
      <anchorfile>en/cpp/filesystem/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_root_directory</name>
      <anchorfile>en/cpp/filesystem/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_root_name</name>
      <anchorfile>en/cpp/filesystem/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_root_path</name>
      <anchorfile>en/cpp/filesystem/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_stem</name>
      <anchorfile>en/cpp/filesystem/path/has_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_absolute</name>
      <anchorfile>en/cpp/filesystem/path/is_absrel.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_relative</name>
      <anchorfile>en/cpp/filesystem/path/is_absrel.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lexically_normal</name>
      <anchorfile>en/cpp/filesystem/path/lexically_normal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lexically_proximate</name>
      <anchorfile>en/cpp/filesystem/path/lexically_normal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lexically_relative</name>
      <anchorfile>en/cpp/filesystem/path/lexically_normal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_preferred</name>
      <anchorfile>en/cpp/filesystem/path/make_preferred.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native</name>
      <anchorfile>en/cpp/filesystem/path/native.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator string_type</name>
      <anchorfile>en/cpp/filesystem/path/native.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/filesystem/path/concat.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator/=</name>
      <anchorfile>en/cpp/filesystem/path/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/filesystem/path/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>parent_path</name>
      <anchorfile>en/cpp/filesystem/path/parent_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>path</name>
      <anchorfile>en/cpp/filesystem/path/path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>relative_path</name>
      <anchorfile>en/cpp/filesystem/path/relative_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_filename</name>
      <anchorfile>en/cpp/filesystem/path/remove_filename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace_extension</name>
      <anchorfile>en/cpp/filesystem/path/replace_extension.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace_filename</name>
      <anchorfile>en/cpp/filesystem/path/replace_filename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>root_directory</name>
      <anchorfile>en/cpp/filesystem/path/root_directory.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>root_name</name>
      <anchorfile>en/cpp/filesystem/path/root_name.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>root_path</name>
      <anchorfile>en/cpp/filesystem/path/root_path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stem</name>
      <anchorfile>en/cpp/filesystem/path/stem.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>string</name>
      <anchorfile>en/cpp/filesystem/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/filesystem/path/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u16string</name>
      <anchorfile>en/cpp/filesystem/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u32string</name>
      <anchorfile>en/cpp/filesystem/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u8string</name>
      <anchorfile>en/cpp/filesystem/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstring</name>
      <anchorfile>en/cpp/filesystem/path/string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~path</name>
      <anchorfile>en/cpp/filesystem/path/~path.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::filesystem::perm_options</name>
    <filename>cpp/filesystem/perm_options</filename>
  </compound>
  <compound kind="class">
    <name>std::filesystem::perms</name>
    <filename>cpp/filesystem/perms</filename>
  </compound>
  <compound kind="class">
    <name>std::filesystem::recursive_directory_iterator</name>
    <filename>cpp/filesystem/recursive_directory_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>depth</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/depth.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>disable_recursion_pending</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/disable_recursion_pending.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>increment</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/increment.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/increment.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>options</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/options.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/pop.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>recursion_pending</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/recursion_pending.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>recursive_directory_iterator</name>
      <anchorfile>en/cpp/filesystem/recursive_directory_iterator/recursive_directory_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::filesystem::space_info</name>
    <filename>cpp/filesystem/space_info</filename>
    <member kind="variable">
      <type>T</type>
      <name>available</name>
      <anchorfile>en/cpp/filesystem/space_info.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/filesystem/space_info.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>free</name>
      <anchorfile>en/cpp/filesystem/space_info.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::fisher_f_distribution</name>
    <filename>cpp/numeric/random/fisher_f_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>fisher_f_distribution</name>
      <anchorfile>en/cpp/numeric/random/fisher_f_distribution/fisher_f_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>m</name>
      <anchorfile>en/cpp/numeric/random/fisher_f_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/fisher_f_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/fisher_f_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>n</name>
      <anchorfile>en/cpp/numeric/random/fisher_f_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/fisher_f_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/fisher_f_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/fisher_f_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::forward_iterator_tag</name>
    <filename>cpp/iterator/iterator_tags</filename>
  </compound>
  <compound kind="class">
    <name>std::forward_list</name>
    <filename>cpp/container/forward_list</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/container/forward_list/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>before_begin</name>
      <anchorfile>en/cpp/container/forward_list/before_begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/forward_list/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbefore_begin</name>
      <anchorfile>en/cpp/container/forward_list/before_begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/forward_list/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/forward_list/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/forward_list/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_after</name>
      <anchorfile>en/cpp/container/forward_list/emplace_after.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_front</name>
      <anchorfile>en/cpp/container/forward_list/emplace_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/forward_list/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/forward_list/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase_after</name>
      <anchorfile>en/cpp/container/forward_list/erase_after.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>forward_list</name>
      <anchorfile>en/cpp/container/forward_list/forward_list.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/forward_list/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/forward_list/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert_after</name>
      <anchorfile>en/cpp/container/forward_list/insert_after.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/forward_list/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/forward_list/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/forward_list/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_front</name>
      <anchorfile>en/cpp/container/forward_list/pop_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_front</name>
      <anchorfile>en/cpp/container/forward_list/push_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove</name>
      <anchorfile>en/cpp/container/forward_list/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_if</name>
      <anchorfile>en/cpp/container/forward_list/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/container/forward_list/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverse</name>
      <anchorfile>en/cpp/container/forward_list/reverse.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sort</name>
      <anchorfile>en/cpp/container/forward_list/sort.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>splice_after</name>
      <anchorfile>en/cpp/container/forward_list/splice_after.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/forward_list/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique</name>
      <anchorfile>en/cpp/container/forward_list/unique.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~forward_list</name>
      <anchorfile>en/cpp/container/forward_list/~forward_list.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::fpos</name>
    <filename>cpp/io/fpos</filename>
    <member kind="function">
      <type>T</type>
      <name>state</name>
      <anchorfile>en/cpp/io/fpos/state.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::fpos_t</name>
    <filename>cpp/io/c</filename>
  </compound>
  <compound kind="class">
    <name>std::front_insert_iterator</name>
    <filename>cpp/iterator/front_insert_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>front_insert_iterator</name>
      <anchorfile>en/cpp/iterator/front_insert_iterator/front_insert_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/iterator/front_insert_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/iterator/front_insert_iterator/operator++.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/iterator/front_insert_iterator/operator++.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/iterator/front_insert_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::fstream</name>
    <filename>cpp/io/basic_fstream</filename>
    <class kind="class">std::fstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_fstream/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fstream</name>
      <anchorfile>en/cpp/io/basic_fstream/basic_fstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_fstream/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_fstream/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_fstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::fstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::fstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::fstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::fstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::fstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::function</name>
    <filename>cpp/utility/functional/function</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/utility/functional/function/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>function</name>
      <anchorfile>en/cpp/utility/functional/function/function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/utility/functional/function/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/function/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/utility/functional/function/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/utility/functional/function/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>target</name>
      <anchorfile>en/cpp/utility/functional/function/target.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>target_type</name>
      <anchorfile>en/cpp/utility/functional/function/target_type.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~function</name>
      <anchorfile>en/cpp/utility/functional/function/~function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::future</name>
    <filename>cpp/thread/future</filename>
    <member kind="function">
      <type>T</type>
      <name>future</name>
      <anchorfile>en/cpp/thread/future/future.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/thread/future/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/thread/future/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>share</name>
      <anchorfile>en/cpp/thread/future/share.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>valid</name>
      <anchorfile>en/cpp/thread/future/valid.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait</name>
      <anchorfile>en/cpp/thread/future/wait.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_for</name>
      <anchorfile>en/cpp/thread/future/wait_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_until</name>
      <anchorfile>en/cpp/thread/future/wait_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~future</name>
      <anchorfile>en/cpp/thread/future/~future.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::future_errc</name>
    <filename>cpp/thread/future_errc</filename>
  </compound>
  <compound kind="class">
    <name>std::future_error</name>
    <filename>cpp/thread/future_error</filename>
    <member kind="function">
      <type>T</type>
      <name>code</name>
      <anchorfile>en/cpp/thread/future_error/code.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>future_error</name>
      <anchorfile>en/cpp/thread/future_error/future_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::gamma_distribution</name>
    <filename>cpp/numeric/random/gamma_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>alpha</name>
      <anchorfile>en/cpp/numeric/random/gamma_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>beta</name>
      <anchorfile>en/cpp/numeric/random/gamma_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gamma_distribution</name>
      <anchorfile>en/cpp/numeric/random/gamma_distribution/gamma_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/gamma_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/gamma_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/gamma_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/gamma_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/gamma_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::geometric_distribution</name>
    <filename>cpp/numeric/random/geometric_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>geometric_distribution</name>
      <anchorfile>en/cpp/numeric/random/geometric_distribution/geometric_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/geometric_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/geometric_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p</name>
      <anchorfile>en/cpp/numeric/random/geometric_distribution/p.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/geometric_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/geometric_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::giga</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::greater</name>
    <filename>cpp/utility/functional/greater</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/greater.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::greater_equal</name>
    <filename>cpp/utility/functional/greater_equal</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/greater_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::gslice</name>
    <filename>cpp/numeric/valarray/gslice</filename>
  </compound>
  <compound kind="class">
    <name>std::gslice_array</name>
    <filename>cpp/numeric/valarray/gslice_array</filename>
  </compound>
  <compound kind="class">
    <name>std::has_unique_object_representations</name>
    <filename>cpp/types/has_unique_object_representations</filename>
  </compound>
  <compound kind="class">
    <name>std::has_virtual_destructor</name>
    <filename>cpp/types/has_virtual_destructor</filename>
  </compound>
  <compound kind="class">
    <name>std::hash</name>
    <filename>cpp/utility/hash</filename>
    <member kind="function">
      <type>T</type>
      <name>hash</name>
      <anchorfile>en/cpp/utility/hash/hash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/hash/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::hecto</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::identity</name>
    <filename>cpp/utility/functional/identity</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/identity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ifstream</name>
    <filename>cpp/io/basic_ifstream</filename>
    <class kind="class">std::ifstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_ifstream/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ifstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ifstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ifstream</name>
      <anchorfile>en/cpp/io/basic_ifstream/basic_ifstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_ifstream/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_ifstream/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_ifstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ifstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ifstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::ifstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::ifstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ifstream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::imaxdiv_t</name>
    <filename>cpp/numeric/math/div</filename>
    <member kind="variable">
      <type>T</type>
      <name>quot</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rem</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::in_place_index_t</name>
    <filename>cpp/utility/in_place</filename>
  </compound>
  <compound kind="class">
    <name>std::in_place_t</name>
    <filename>cpp/utility/in_place</filename>
  </compound>
  <compound kind="class">
    <name>std::in_place_type_t</name>
    <filename>cpp/utility/in_place</filename>
  </compound>
  <compound kind="class">
    <name>std::incrementable_traits</name>
    <filename>cpp/iterator/incrementable_traits</filename>
  </compound>
  <compound kind="class">
    <name>std::independent_bits_engine</name>
    <filename>cpp/numeric/random/independent_bits_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>en/cpp/numeric/random/independent_bits_engine/base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/independent_bits_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>independent_bits_engine</name>
      <anchorfile>en/cpp/numeric/random/independent_bits_engine/independent_bits_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/independent_bits_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/independent_bits_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/independent_bits_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/independent_bits_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::index_sequence</name>
    <filename>cpp/utility/integer_sequence</filename>
  </compound>
  <compound kind="class">
    <name>std::index_sequence_for</name>
    <filename>cpp/utility/integer_sequence</filename>
  </compound>
  <compound kind="class">
    <name>std::indirect_array</name>
    <filename>cpp/numeric/valarray/indirect_array</filename>
  </compound>
  <compound kind="class">
    <name>std::initializer_list</name>
    <filename>cpp/utility/initializer_list</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/utility/initializer_list/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/utility/initializer_list/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>initializer_list</name>
      <anchorfile>en/cpp/utility/initializer_list/initializer_list.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/utility/initializer_list/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::input_iterator_tag</name>
    <filename>cpp/iterator/iterator_tags</filename>
  </compound>
  <compound kind="class">
    <name>std::insert_iterator</name>
    <filename>cpp/iterator/insert_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>insert_iterator</name>
      <anchorfile>en/cpp/iterator/insert_iterator/insert_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/iterator/insert_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/iterator/insert_iterator/operator++.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/iterator/insert_iterator/operator++.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/iterator/insert_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::int16_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int32_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int64_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int8_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int_fast16_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int_fast32_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int_fast64_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int_fast8_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int_least16_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int_least32_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int_least64_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::int_least8_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::integer_sequence</name>
    <filename>cpp/utility/integer_sequence</filename>
  </compound>
  <compound kind="class">
    <name>std::integral_constant</name>
    <filename>cpp/types/integral_constant</filename>
  </compound>
  <compound kind="class">
    <name>std::intmax_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::intptr_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::invalid_argument</name>
    <filename>cpp/error/invalid_argument</filename>
    <member kind="function">
      <type>T</type>
      <name>invalid_argument</name>
      <anchorfile>en/cpp/error/invalid_argument/invalid_argument.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::invoke_result</name>
    <filename>cpp/types/result_of</filename>
  </compound>
  <compound kind="class">
    <name>std::invoke_result_t</name>
    <filename>cpp/types/result_of</filename>
  </compound>
  <compound kind="class">
    <name>std::io_errc</name>
    <filename>cpp/io/io_errc</filename>
  </compound>
  <compound kind="class">
    <name>std::ios_base</name>
    <filename>cpp/io/ios_base</filename>
    <class kind="class">std::ios_base::Init</class>
    <class kind="class">std::ios_base::event_callback</class>
    <class kind="class">std::ios_base::failure</class>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/ios_base/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ios_base</name>
      <anchorfile>en/cpp/io/ios_base/ios_base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~ios_base</name>
      <anchorfile>en/cpp/io/ios_base/~ios_base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ios_base::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::ios_base::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::ios_base::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::iostream</name>
    <filename>cpp/io/basic_iostream</filename>
    <class kind="class">std::iostream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::iostream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::iostream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iostream</name>
      <anchorfile>en/cpp/io/basic_iostream/basic_iostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::iostream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~iostream</name>
      <anchorfile>en/cpp/io/basic_iostream/~basic_iostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::iostream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::iostream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::iostream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::iostream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::is_abstract</name>
    <filename>cpp/types/is_abstract</filename>
  </compound>
  <compound kind="class">
    <name>std::is_aggregate</name>
    <filename>cpp/types/is_aggregate</filename>
  </compound>
  <compound kind="class">
    <name>std::is_arithmetic</name>
    <filename>cpp/types/is_arithmetic</filename>
  </compound>
  <compound kind="class">
    <name>std::is_array</name>
    <filename>cpp/types/is_array</filename>
  </compound>
  <compound kind="class">
    <name>std::is_assignable</name>
    <filename>cpp/types/is_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_base_of</name>
    <filename>cpp/types/is_base_of</filename>
  </compound>
  <compound kind="class">
    <name>std::is_bind_expression</name>
    <filename>cpp/utility/functional/is_bind_expression</filename>
  </compound>
  <compound kind="class">
    <name>std::is_bounded_array</name>
    <filename>cpp/types/is_bounded_array</filename>
  </compound>
  <compound kind="class">
    <name>std::is_class</name>
    <filename>cpp/types/is_class</filename>
  </compound>
  <compound kind="class">
    <name>std::is_compound</name>
    <filename>cpp/types/is_compound</filename>
  </compound>
  <compound kind="class">
    <name>std::is_const</name>
    <filename>cpp/types/is_const</filename>
  </compound>
  <compound kind="class">
    <name>std::is_constructible</name>
    <filename>cpp/types/is_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_convertible</name>
    <filename>cpp/types/is_convertible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_copy_assignable</name>
    <filename>cpp/types/is_copy_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_copy_constructible</name>
    <filename>cpp/types/is_copy_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_default_constructible</name>
    <filename>cpp/types/is_default_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_destructible</name>
    <filename>cpp/types/is_destructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_empty</name>
    <filename>cpp/types/is_empty</filename>
  </compound>
  <compound kind="class">
    <name>std::is_enum</name>
    <filename>cpp/types/is_enum</filename>
  </compound>
  <compound kind="class">
    <name>std::is_error_code_enum</name>
    <filename>cpp/error/error_code/is_error_code_enum</filename>
  </compound>
  <compound kind="class">
    <name>std::is_error_code_enum_v</name>
    <filename>cpp/error/error_code/is_error_code_enum</filename>
  </compound>
  <compound kind="class">
    <name>std::is_error_condition_enum</name>
    <filename>cpp/error/error_condition/is_error_condition_enum</filename>
  </compound>
  <compound kind="class">
    <name>std::is_execution_policy</name>
    <filename>cpp/algorithm/is_execution_policy</filename>
  </compound>
  <compound kind="class">
    <name>std::is_final</name>
    <filename>cpp/types/is_final</filename>
  </compound>
  <compound kind="class">
    <name>std::is_floating_point</name>
    <filename>cpp/types/is_floating_point</filename>
  </compound>
  <compound kind="class">
    <name>std::is_function</name>
    <filename>cpp/types/is_function</filename>
  </compound>
  <compound kind="class">
    <name>std::is_fundamental</name>
    <filename>cpp/types/is_fundamental</filename>
  </compound>
  <compound kind="class">
    <name>std::is_integral</name>
    <filename>cpp/types/is_integral</filename>
  </compound>
  <compound kind="class">
    <name>std::is_invocable</name>
    <filename>cpp/types/is_invocable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_invocable_r</name>
    <filename>cpp/types/is_invocable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_literal_type</name>
    <filename>cpp/types/is_literal_type</filename>
  </compound>
  <compound kind="class">
    <name>std::is_lvalue_reference</name>
    <filename>cpp/types/is_lvalue_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::is_member_function_pointer</name>
    <filename>cpp/types/is_member_function_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::is_member_object_pointer</name>
    <filename>cpp/types/is_member_object_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::is_member_pointer</name>
    <filename>cpp/types/is_member_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::is_move_assignable</name>
    <filename>cpp/types/is_move_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_move_constructible</name>
    <filename>cpp/types/is_move_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_assignable</name>
    <filename>cpp/types/is_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_constructible</name>
    <filename>cpp/types/is_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_convertible</name>
    <filename>cpp/types/is_convertible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_copy_assignable</name>
    <filename>cpp/types/is_copy_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_copy_constructible</name>
    <filename>cpp/types/is_copy_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_default_constructible</name>
    <filename>cpp/types/is_default_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_destructible</name>
    <filename>cpp/types/is_destructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_invocable</name>
    <filename>cpp/types/is_invocable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_invocable_r</name>
    <filename>cpp/types/is_invocable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_move_assignable</name>
    <filename>cpp/types/is_move_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_move_constructible</name>
    <filename>cpp/types/is_move_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_swappable</name>
    <filename>cpp/types/is_swappable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_nothrow_swappable_with</name>
    <filename>cpp/types/is_swappable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_null_pointer</name>
    <filename>cpp/types/is_null_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::is_object</name>
    <filename>cpp/types/is_object</filename>
  </compound>
  <compound kind="class">
    <name>std::is_placeholder</name>
    <filename>cpp/utility/functional/is_placeholder</filename>
  </compound>
  <compound kind="class">
    <name>std::is_pod</name>
    <filename>cpp/types/is_pod</filename>
  </compound>
  <compound kind="class">
    <name>std::is_pointer</name>
    <filename>cpp/types/is_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::is_polymorphic</name>
    <filename>cpp/types/is_polymorphic</filename>
  </compound>
  <compound kind="class">
    <name>std::is_reference</name>
    <filename>cpp/types/is_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::is_rvalue_reference</name>
    <filename>cpp/types/is_rvalue_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::is_same</name>
    <filename>cpp/types/is_same</filename>
  </compound>
  <compound kind="class">
    <name>std::is_scalar</name>
    <filename>cpp/types/is_scalar</filename>
  </compound>
  <compound kind="class">
    <name>std::is_signed</name>
    <filename>cpp/types/is_signed</filename>
  </compound>
  <compound kind="class">
    <name>std::is_standard_layout</name>
    <filename>cpp/types/is_standard_layout</filename>
  </compound>
  <compound kind="class">
    <name>std::is_swappable</name>
    <filename>cpp/types/is_swappable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_swappable_with</name>
    <filename>cpp/types/is_swappable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivial</name>
    <filename>cpp/types/is_trivial</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_assignable</name>
    <filename>cpp/types/is_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_constructible</name>
    <filename>cpp/types/is_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_copy_assignable</name>
    <filename>cpp/types/is_copy_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_copy_constructible</name>
    <filename>cpp/types/is_copy_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_copyable</name>
    <filename>cpp/types/is_trivially_copyable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_default_constructible</name>
    <filename>cpp/types/is_default_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_destructible</name>
    <filename>cpp/types/is_destructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_move_assignable</name>
    <filename>cpp/types/is_move_assignable</filename>
  </compound>
  <compound kind="class">
    <name>std::is_trivially_move_constructible</name>
    <filename>cpp/types/is_move_constructible</filename>
  </compound>
  <compound kind="class">
    <name>std::is_unbounded_array</name>
    <filename>cpp/types/is_unbounded_array</filename>
  </compound>
  <compound kind="class">
    <name>std::is_union</name>
    <filename>cpp/types/is_union</filename>
  </compound>
  <compound kind="class">
    <name>std::is_unsigned</name>
    <filename>cpp/types/is_unsigned</filename>
  </compound>
  <compound kind="class">
    <name>std::is_void</name>
    <filename>cpp/types/is_void</filename>
  </compound>
  <compound kind="class">
    <name>std::is_volatile</name>
    <filename>cpp/types/is_volatile</filename>
  </compound>
  <compound kind="class">
    <name>std::istream</name>
    <filename>cpp/io/basic_istream</filename>
    <class kind="class">std::istream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>istream</name>
      <anchorfile>en/cpp/io/basic_istream/basic_istream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~istream</name>
      <anchorfile>en/cpp/io/basic_istream/~basic_istream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::istream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::istream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istream_iterator</name>
    <filename>cpp/iterator/istream_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>istream_iterator</name>
      <anchorfile>en/cpp/iterator/istream_iterator/istream_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/iterator/istream_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/iterator/istream_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/iterator/istream_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/iterator/istream_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~istream_iterator</name>
      <anchorfile>en/cpp/iterator/istream_iterator/~istream_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istreambuf_iterator</name>
    <filename>cpp/iterator/istreambuf_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>equal</name>
      <anchorfile>en/cpp/iterator/istreambuf_iterator/equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>istreambuf_iterator</name>
      <anchorfile>en/cpp/iterator/istreambuf_iterator/istreambuf_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/iterator/istreambuf_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/iterator/istreambuf_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/iterator/istreambuf_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/iterator/istreambuf_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~istreambuf_iterator</name>
      <anchorfile>en/cpp/iterator/istreambuf_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istringstream</name>
    <filename>cpp/io/basic_istringstream</filename>
    <class kind="class">std::istringstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istringstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>istringstream</name>
      <anchorfile>en/cpp/io/basic_istringstream/basic_istringstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_istringstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istringstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_istringstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istringstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::istringstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::istringstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istringstream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istrstream</name>
    <filename>cpp/io/istrstream</filename>
    <class kind="class">std::istrstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istrstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istrstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>istrstream</name>
      <anchorfile>en/cpp/io/istrstream/istrstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::istrstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/istrstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~istrstream</name>
      <anchorfile>en/cpp/io/istrstream/~istrstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istrstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::istrstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::istrstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::istrstream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::iter_common_reference_t</name>
    <filename>cpp/iterator/iter_t</filename>
  </compound>
  <compound kind="class">
    <name>std::iter_difference_t</name>
    <filename>cpp/iterator/iter_t</filename>
  </compound>
  <compound kind="class">
    <name>std::iter_reference_t</name>
    <filename>cpp/iterator/iter_t</filename>
  </compound>
  <compound kind="class">
    <name>std::iter_rvalue_reference_t</name>
    <filename>cpp/iterator/iter_t</filename>
  </compound>
  <compound kind="class">
    <name>std::iter_value_t</name>
    <filename>cpp/iterator/iter_t</filename>
  </compound>
  <compound kind="class">
    <name>std::iterator</name>
    <filename>cpp/iterator/iterator</filename>
  </compound>
  <compound kind="class">
    <name>std::iterator_traits</name>
    <filename>cpp/iterator/iterator_traits</filename>
  </compound>
  <compound kind="class">
    <name>std::jmp_buf</name>
    <filename>cpp/utility/program/jmp_buf</filename>
  </compound>
  <compound kind="class">
    <name>std::kilo</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::knuth_b</name>
    <filename>cpp/numeric/random/shuffle_order_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>knuth_b</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/shuffle_order_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::lconv</name>
    <filename>cpp/locale/lconv</filename>
  </compound>
  <compound kind="class">
    <name>std::ldiv_t</name>
    <filename>cpp/numeric/math/div</filename>
    <member kind="variable">
      <type>T</type>
      <name>quot</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rem</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::length_error</name>
    <filename>cpp/error/length_error</filename>
    <member kind="function">
      <type>T</type>
      <name>length_error</name>
      <anchorfile>en/cpp/error/length_error/length_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::less</name>
    <filename>cpp/utility/functional/less</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/less.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::less_equal</name>
    <filename>cpp/utility/functional/less_equal</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/less_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::linear_congruential_engine</name>
    <filename>cpp/numeric/random/linear_congruential_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>linear_congruential_engine</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/linear_congruential_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::list</name>
    <filename>cpp/container/list</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/container/list/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/container/list/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/list/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/list/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/list/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/list/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/list/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/list/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/list/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_back</name>
      <anchorfile>en/cpp/container/list/emplace_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_front</name>
      <anchorfile>en/cpp/container/list/emplace_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/list/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/list/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/list/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/list/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/list/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/list/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>list</name>
      <anchorfile>en/cpp/container/list/list.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/list/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/list/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/list/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/container/list/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_front</name>
      <anchorfile>en/cpp/container/list/pop_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/container/list/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_front</name>
      <anchorfile>en/cpp/container/list/push_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/list/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove</name>
      <anchorfile>en/cpp/container/list/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_if</name>
      <anchorfile>en/cpp/container/list/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/list/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/container/list/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverse</name>
      <anchorfile>en/cpp/container/list/reverse.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/list/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sort</name>
      <anchorfile>en/cpp/container/list/sort.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>splice</name>
      <anchorfile>en/cpp/container/list/splice.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/list/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique</name>
      <anchorfile>en/cpp/container/list/unique.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~list</name>
      <anchorfile>en/cpp/container/list/~list.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::lldiv_t</name>
    <filename>cpp/numeric/math/div</filename>
    <member kind="variable">
      <type>T</type>
      <name>quot</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rem</name>
      <anchorfile>en/cpp/numeric/math/div.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::locale</name>
    <filename>cpp/locale/locale</filename>
    <member kind="function">
      <type>T</type>
      <name>classic</name>
      <anchorfile>en/cpp/locale/locale/classic.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>combine</name>
      <anchorfile>en/cpp/locale/locale/combine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::locale::facet</class>
    <member kind="function">
      <type>T</type>
      <name>global</name>
      <anchorfile>en/cpp/locale/locale/global.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::locale::id</class>
    <member kind="function">
      <type>T</type>
      <name>locale</name>
      <anchorfile>en/cpp/locale/locale/locale.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>name</name>
      <anchorfile>en/cpp/locale/locale/name.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/locale/locale/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/locale/locale/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/locale/locale/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/locale/locale/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~locale</name>
      <anchorfile>en/cpp/locale/locale/~locale.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::locale::facet</name>
    <filename>cpp/locale/locale/facet</filename>
    <member kind="function">
      <type>T</type>
      <name>facet</name>
      <anchorfile>en/cpp/locale/locale/facet/facet.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::locale::id</name>
    <filename>cpp/locale/locale/id</filename>
    <member kind="function">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/locale/id/id.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::lock_guard</name>
    <filename>cpp/thread/lock_guard</filename>
    <member kind="function">
      <type>T</type>
      <name>lock_guard</name>
      <anchorfile>en/cpp/thread/lock_guard/lock_guard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~lock_guard</name>
      <anchorfile>en/cpp/thread/lock_guard/~lock_guard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::logic_error</name>
    <filename>cpp/error/logic_error</filename>
    <member kind="function">
      <type>T</type>
      <name>logic_error</name>
      <anchorfile>en/cpp/error/logic_error/logic_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::logical_and</name>
    <filename>cpp/utility/functional/logical_and</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/logical_and.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::logical_not</name>
    <filename>cpp/utility/functional/logical_not</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/logical_not.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::logical_or</name>
    <filename>cpp/utility/functional/logical_or</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/logical_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::lognormal_distribution</name>
    <filename>cpp/numeric/random/lognormal_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>lognormal_distribution</name>
      <anchorfile>en/cpp/numeric/random/lognormal_distribution/lognormal_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>m</name>
      <anchorfile>en/cpp/numeric/random/lognormal_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/lognormal_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/lognormal_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/lognormal_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/lognormal_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/lognormal_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>s</name>
      <anchorfile>en/cpp/numeric/random/lognormal_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::make_boyer_moore_horspool_searcher</name>
    <filename>cpp/utility/functional/boyer_moore_horspool_searcher</filename>
  </compound>
  <compound kind="class">
    <name>std::make_boyer_moore_searcher</name>
    <filename>cpp/utility/functional/boyer_moore_searcher</filename>
  </compound>
  <compound kind="class">
    <name>std::make_default_searcher</name>
    <filename>cpp/utility/functional/default_searcher</filename>
  </compound>
  <compound kind="class">
    <name>std::make_index_sequence</name>
    <filename>cpp/utility/integer_sequence</filename>
  </compound>
  <compound kind="class">
    <name>std::make_integer_sequence</name>
    <filename>cpp/utility/integer_sequence</filename>
  </compound>
  <compound kind="class">
    <name>std::make_signed</name>
    <filename>cpp/types/make_signed</filename>
  </compound>
  <compound kind="class">
    <name>std::make_signed_t</name>
    <filename>cpp/types/make_signed</filename>
  </compound>
  <compound kind="class">
    <name>std::make_unsigned</name>
    <filename>cpp/types/make_unsigned</filename>
  </compound>
  <compound kind="class">
    <name>std::make_unsigned_t</name>
    <filename>cpp/types/make_unsigned</filename>
  </compound>
  <compound kind="class">
    <name>std::map</name>
    <filename>cpp/container/map</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/container/map/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/map/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/map/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/map/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/map/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/map/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/map/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/map/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/map/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/map/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/map/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/map/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/map/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/map/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/map/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/map/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/map/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/map/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/map/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert_or_assign</name>
      <anchorfile>en/cpp/container/map/insert_or_assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>en/cpp/container/map/key_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>en/cpp/container/map/lower_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>map</name>
      <anchorfile>en/cpp/container/map/map.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/map/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/map/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/map/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/map/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/map/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/map/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/map/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/map/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_emplace</name>
      <anchorfile>en/cpp/container/map/try_emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>en/cpp/container/map/upper_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>en/cpp/container/map/value_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::map::value_compare</class>
    <member kind="function">
      <type>T</type>
      <name>~map</name>
      <anchorfile>en/cpp/container/map/~map.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::map::value_compare</name>
    <filename>cpp/container/map/value_compare</filename>
  </compound>
  <compound kind="class">
    <name>std::mask_array</name>
    <filename>cpp/numeric/valarray/mask_array</filename>
  </compound>
  <compound kind="class">
    <name>std::match_results</name>
    <filename>cpp/regex/match_results</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/regex/match_results/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>format</name>
      <anchorfile>en/cpp/regex/match_results/format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/regex/match_results/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/match_results/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>match_results</name>
      <anchorfile>en/cpp/regex/match_results/match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/regex/match_results/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/regex/match_results/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>position</name>
      <anchorfile>en/cpp/regex/match_results/position.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prefix</name>
      <anchorfile>en/cpp/regex/match_results/prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ready</name>
      <anchorfile>en/cpp/regex/match_results/ready.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/regex/match_results/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/match_results/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>suffix</name>
      <anchorfile>en/cpp/regex/match_results/suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/regex/match_results/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~match_results</name>
      <anchorfile>en/cpp/regex/match_results/~match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::max_align_t</name>
    <filename>cpp/types/max_align_t</filename>
  </compound>
  <compound kind="class">
    <name>std::mbstate_t</name>
    <filename>cpp/string/multibyte/mbstate_t</filename>
  </compound>
  <compound kind="class">
    <name>std::mega</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::mersenne_twister_engine</name>
    <filename>cpp/numeric/random/mersenne_twister_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mersenne_twister_engine</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/mersenne_twister_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::messages</name>
    <filename>cpp/locale/messages</filename>
    <class kind="class">std::messages::catalog</class>
    <class kind="class">std::messages::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/locale/messages/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_close</name>
      <anchorfile>en/cpp/locale/messages/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get</name>
      <anchorfile>en/cpp/locale/messages/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_open</name>
      <anchorfile>en/cpp/locale/messages/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/locale/messages/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/messages.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>messages</name>
      <anchorfile>en/cpp/locale/messages/messages.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/locale/messages/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::messages::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>~messages</name>
      <anchorfile>en/cpp/locale/messages/~messages.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::messages::catalog</name>
    <filename>cpp/locale/messages_base</filename>
  </compound>
  <compound kind="class">
    <name>std::messages::char_type</name>
    <filename>cpp/locale/messages</filename>
  </compound>
  <compound kind="class">
    <name>std::messages::string_type</name>
    <filename>cpp/locale/messages</filename>
  </compound>
  <compound kind="class">
    <name>std::messages_base</name>
    <filename>cpp/locale/messages_base</filename>
    <class kind="class">std::messages_base::catalog</class>
  </compound>
  <compound kind="class">
    <name>std::messages_base::catalog</name>
    <filename>cpp/locale/messages_base</filename>
  </compound>
  <compound kind="class">
    <name>std::messages_byname</name>
    <filename>cpp/locale/messages_byname</filename>
    <class kind="class">std::messages_byname::catalog</class>
    <class kind="class">std::messages_byname::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/locale/messages/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_close</name>
      <anchorfile>en/cpp/locale/messages/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get</name>
      <anchorfile>en/cpp/locale/messages/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_open</name>
      <anchorfile>en/cpp/locale/messages/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/locale/messages/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/messages.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>messages_byname</name>
      <anchorfile>en/cpp/locale/messages_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/locale/messages/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::messages_byname::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>~messages_byname</name>
      <anchorfile>en/cpp/locale/messages_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::messages_byname::catalog</name>
    <filename>cpp/locale/messages_base</filename>
  </compound>
  <compound kind="class">
    <name>std::messages_byname::char_type</name>
    <filename>cpp/locale/messages</filename>
  </compound>
  <compound kind="class">
    <name>std::messages_byname::string_type</name>
    <filename>cpp/locale/messages</filename>
  </compound>
  <compound kind="class">
    <name>std::micro</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::milli</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::minstd_rand</name>
    <filename>cpp/numeric/random/linear_congruential_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>minstd_rand</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/linear_congruential_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::minstd_rand0</name>
    <filename>cpp/numeric/random/linear_congruential_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>minstd_rand0</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/linear_congruential_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/linear_congruential_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::minus</name>
    <filename>cpp/utility/functional/minus</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/minus.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::modulus</name>
    <filename>cpp/utility/functional/modulus</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/modulus.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::money_base</name>
    <filename>cpp/locale/money_base</filename>
    <class kind="class">std::money_base::pattern</class>
  </compound>
  <compound kind="class">
    <name>std::money_base::pattern</name>
    <filename>cpp/locale/money_base</filename>
  </compound>
  <compound kind="class">
    <name>std::money_get</name>
    <filename>cpp/locale/money_get</filename>
    <class kind="class">std::money_get::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>do_get</name>
      <anchorfile>en/cpp/locale/money_get/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/locale/money_get/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/money_get.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::money_get::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>money_get</name>
      <anchorfile>en/cpp/locale/money_get/money_get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::money_get::pattern</class>
    <class kind="class">std::money_get::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>~money_get</name>
      <anchorfile>en/cpp/locale/money_get/~money_get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::money_get::char_type</name>
    <filename>cpp/locale/money_get</filename>
  </compound>
  <compound kind="class">
    <name>std::money_get::iter_type</name>
    <filename>cpp/locale/money_get</filename>
  </compound>
  <compound kind="class">
    <name>std::money_get::pattern</name>
    <filename>cpp/locale/money_base</filename>
  </compound>
  <compound kind="class">
    <name>std::money_get::string_type</name>
    <filename>cpp/locale/money_get</filename>
  </compound>
  <compound kind="class">
    <name>std::money_put</name>
    <filename>cpp/locale/money_put</filename>
    <class kind="class">std::money_put::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>do_put</name>
      <anchorfile>en/cpp/locale/money_put/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/money_put.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::money_put::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>money_put</name>
      <anchorfile>en/cpp/locale/money_put/money_put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::money_put::pattern</class>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/locale/money_put/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::money_put::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>~money_put</name>
      <anchorfile>en/cpp/locale/money_put/~money_put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::money_put::char_type</name>
    <filename>cpp/locale/money_put</filename>
  </compound>
  <compound kind="class">
    <name>std::money_put::iter_type</name>
    <filename>cpp/locale/money_put</filename>
  </compound>
  <compound kind="class">
    <name>std::money_put::pattern</name>
    <filename>cpp/locale/money_base</filename>
  </compound>
  <compound kind="class">
    <name>std::money_put::string_type</name>
    <filename>cpp/locale/money_put</filename>
  </compound>
  <compound kind="class">
    <name>std::moneypunct</name>
    <filename>cpp/locale/moneypunct</filename>
    <class kind="class">std::moneypunct::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>curr_symbol</name>
      <anchorfile>en/cpp/locale/moneypunct/curr_symbol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>decimal_point</name>
      <anchorfile>en/cpp/locale/moneypunct/decimal_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_curr_symbol</name>
      <anchorfile>en/cpp/locale/moneypunct/curr_symbol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_decimal_point</name>
      <anchorfile>en/cpp/locale/moneypunct/decimal_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_frac_digits</name>
      <anchorfile>en/cpp/locale/moneypunct/frac_digits.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_grouping</name>
      <anchorfile>en/cpp/locale/moneypunct/grouping.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_neg_format</name>
      <anchorfile>en/cpp/locale/moneypunct/pos_format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_negative_sign</name>
      <anchorfile>en/cpp/locale/moneypunct/positive_sign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_pos_format</name>
      <anchorfile>en/cpp/locale/moneypunct/pos_format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_positive_sign</name>
      <anchorfile>en/cpp/locale/moneypunct/positive_sign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_thousands_sep</name>
      <anchorfile>en/cpp/locale/moneypunct/thousands_sep.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>frac_digits</name>
      <anchorfile>en/cpp/locale/moneypunct/frac_digits.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>grouping</name>
      <anchorfile>en/cpp/locale/moneypunct/grouping.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/moneypunct.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>moneypunct</name>
      <anchorfile>en/cpp/locale/moneypunct/moneypunct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>neg_format</name>
      <anchorfile>en/cpp/locale/moneypunct/pos_format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>negative_sign</name>
      <anchorfile>en/cpp/locale/moneypunct/positive_sign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::moneypunct::pattern</class>
    <member kind="function">
      <type>T</type>
      <name>pos_format</name>
      <anchorfile>en/cpp/locale/moneypunct/pos_format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>positive_sign</name>
      <anchorfile>en/cpp/locale/moneypunct/positive_sign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::moneypunct::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>thousands_sep</name>
      <anchorfile>en/cpp/locale/moneypunct/thousands_sep.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~moneypunct</name>
      <anchorfile>en/cpp/locale/moneypunct/~moneypunct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::moneypunct::char_type</name>
    <filename>cpp/locale/moneypunct</filename>
  </compound>
  <compound kind="class">
    <name>std::moneypunct::pattern</name>
    <filename>cpp/locale/money_base</filename>
  </compound>
  <compound kind="class">
    <name>std::moneypunct::string_type</name>
    <filename>cpp/locale/moneypunct</filename>
  </compound>
  <compound kind="class">
    <name>std::moneypunct_byname</name>
    <filename>cpp/locale/moneypunct_byname</filename>
    <class kind="class">std::moneypunct_byname::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>curr_symbol</name>
      <anchorfile>en/cpp/locale/moneypunct/curr_symbol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>decimal_point</name>
      <anchorfile>en/cpp/locale/moneypunct/decimal_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_curr_symbol</name>
      <anchorfile>en/cpp/locale/moneypunct/curr_symbol.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_decimal_point</name>
      <anchorfile>en/cpp/locale/moneypunct/decimal_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_frac_digits</name>
      <anchorfile>en/cpp/locale/moneypunct/frac_digits.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_grouping</name>
      <anchorfile>en/cpp/locale/moneypunct/grouping.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_neg_format</name>
      <anchorfile>en/cpp/locale/moneypunct/pos_format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_negative_sign</name>
      <anchorfile>en/cpp/locale/moneypunct/positive_sign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_pos_format</name>
      <anchorfile>en/cpp/locale/moneypunct/pos_format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_positive_sign</name>
      <anchorfile>en/cpp/locale/moneypunct/positive_sign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_thousands_sep</name>
      <anchorfile>en/cpp/locale/moneypunct/thousands_sep.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>frac_digits</name>
      <anchorfile>en/cpp/locale/moneypunct/frac_digits.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>grouping</name>
      <anchorfile>en/cpp/locale/moneypunct/grouping.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/moneypunct.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>moneypunct_byname</name>
      <anchorfile>en/cpp/locale/moneypunct_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>neg_format</name>
      <anchorfile>en/cpp/locale/moneypunct/pos_format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>negative_sign</name>
      <anchorfile>en/cpp/locale/moneypunct/positive_sign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::moneypunct_byname::pattern</class>
    <member kind="function">
      <type>T</type>
      <name>pos_format</name>
      <anchorfile>en/cpp/locale/moneypunct/pos_format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>positive_sign</name>
      <anchorfile>en/cpp/locale/moneypunct/positive_sign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::moneypunct_byname::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>thousands_sep</name>
      <anchorfile>en/cpp/locale/moneypunct/thousands_sep.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~moneypunct_byname</name>
      <anchorfile>en/cpp/locale/moneypunct_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::moneypunct_byname::char_type</name>
    <filename>cpp/locale/moneypunct</filename>
  </compound>
  <compound kind="class">
    <name>std::moneypunct_byname::pattern</name>
    <filename>cpp/locale/money_base</filename>
  </compound>
  <compound kind="class">
    <name>std::moneypunct_byname::string_type</name>
    <filename>cpp/locale/moneypunct</filename>
  </compound>
  <compound kind="class">
    <name>std::monostate</name>
    <filename>cpp/utility/variant/monostate</filename>
    <member kind="function">
      <type>T</type>
      <name>monostate</name>
      <anchorfile>en/cpp/utility/variant/monostate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/utility/variant/monostate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~monostate</name>
      <anchorfile>en/cpp/utility/variant/monostate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::move_iterator</name>
    <filename>cpp/iterator/move_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>en/cpp/iterator/move_iterator/base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move_iterator</name>
      <anchorfile>en/cpp/iterator/move_iterator/move_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/iterator/move_iterator/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::mt19937</name>
    <filename>cpp/numeric/random/mersenne_twister_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mt19937</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/mersenne_twister_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::mt19937_64</name>
    <filename>cpp/numeric/random/mersenne_twister_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mt19937_64</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/mersenne_twister_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/mersenne_twister_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::multimap</name>
    <filename>cpp/container/multimap</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/multimap/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/multimap/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/multimap/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/multimap/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/multimap/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/multimap/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/multimap/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/multimap/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/multimap/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/multimap/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/multimap/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/multimap/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/multimap/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/multimap/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/multimap/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/multimap/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/multimap/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/multimap/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>en/cpp/container/multimap/key_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>en/cpp/container/multimap/lower_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/multimap/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/multimap/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>multimap</name>
      <anchorfile>en/cpp/container/multimap/multimap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/multimap/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/multimap/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/multimap/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/multimap/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/multimap/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>en/cpp/container/multimap/upper_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>en/cpp/container/multimap/value_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::multimap::value_compare</class>
    <member kind="function">
      <type>T</type>
      <name>~multimap</name>
      <anchorfile>en/cpp/container/multimap/~multimap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::multimap::value_compare</name>
    <filename>cpp/container/multimap/value_compare</filename>
  </compound>
  <compound kind="class">
    <name>std::multiplies</name>
    <filename>cpp/utility/functional/multiplies</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/multiplies.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::multiset</name>
    <filename>cpp/container/multiset</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/multiset/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/multiset/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/multiset/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/multiset/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/multiset/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/multiset/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/multiset/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/multiset/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/multiset/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/multiset/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/multiset/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/multiset/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/multiset/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/multiset/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/multiset/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/multiset/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/multiset/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/multiset/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>en/cpp/container/multiset/key_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>en/cpp/container/multiset/lower_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/multiset/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/multiset/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>multiset</name>
      <anchorfile>en/cpp/container/multiset/multiset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/multiset/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/multiset/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/multiset/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/multiset/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/multiset/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>en/cpp/container/multiset/upper_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>en/cpp/container/multiset/value_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~multiset</name>
      <anchorfile>en/cpp/container/multiset/~multiset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::mutex</name>
    <filename>cpp/thread/mutex</filename>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/thread/mutex/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mutex</name>
      <anchorfile>en/cpp/thread/mutex/mutex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native_handle</name>
      <anchorfile>en/cpp/thread/mutex/native_handle.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>en/cpp/thread/mutex/try_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock</name>
      <anchorfile>en/cpp/thread/mutex/unlock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::nano</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::negate</name>
    <filename>cpp/utility/functional/negate</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/negate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::negation</name>
    <filename>cpp/types/negation</filename>
  </compound>
  <compound kind="class">
    <name>std::negative_binomial_distribution</name>
    <filename>cpp/numeric/random/negative_binomial_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>k</name>
      <anchorfile>en/cpp/numeric/random/negative_binomial_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/negative_binomial_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/negative_binomial_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>negative_binomial_distribution</name>
      <anchorfile>en/cpp/numeric/random/negative_binomial_distribution/negative_binomial_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p</name>
      <anchorfile>en/cpp/numeric/random/negative_binomial_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/negative_binomial_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/negative_binomial_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::nested_exception</name>
    <filename>cpp/error/nested_exception</filename>
    <member kind="function">
      <type>T</type>
      <name>nested_exception</name>
      <anchorfile>en/cpp/error/nested_exception/nested_exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>nested_ptr</name>
      <anchorfile>en/cpp/error/nested_exception/nested_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/error/nested_exception/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rethrow_nested</name>
      <anchorfile>en/cpp/error/nested_exception/rethrow_nested.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~nested_exception</name>
      <anchorfile>en/cpp/error/nested_exception/~nested_exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::new_handler</name>
    <filename>cpp/memory/new/new_handler</filename>
  </compound>
  <compound kind="class">
    <name>std::normal_distribution</name>
    <filename>cpp/numeric/random/normal_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/normal_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mean</name>
      <anchorfile>en/cpp/numeric/random/normal_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/normal_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>normal_distribution</name>
      <anchorfile>en/cpp/numeric/random/normal_distribution/normal_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/normal_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/normal_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/normal_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stddev</name>
      <anchorfile>en/cpp/numeric/random/normal_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::not_equal_to</name>
    <filename>cpp/utility/functional/not_equal_to</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/not_equal_to.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::nothrow_t</name>
    <filename>cpp/memory/new/nothrow_t</filename>
  </compound>
  <compound kind="class">
    <name>std::nullopt_t</name>
    <filename>cpp/utility/optional/nullopt_t</filename>
  </compound>
  <compound kind="class">
    <name>std::nullptr_t</name>
    <filename>cpp/types/nullptr_t</filename>
  </compound>
  <compound kind="class">
    <name>std::num_get</name>
    <filename>cpp/locale/num_get</filename>
    <class kind="class">std::num_get::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>do_get</name>
      <anchorfile>en/cpp/locale/num_get/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/locale/num_get/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/num_get.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::num_get::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>num_get</name>
      <anchorfile>en/cpp/locale/num_get/num_get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~num_get</name>
      <anchorfile>en/cpp/locale/num_get/~num_get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::num_get::char_type</name>
    <filename>cpp/locale/num_get</filename>
  </compound>
  <compound kind="class">
    <name>std::num_get::iter_type</name>
    <filename>cpp/locale/num_get</filename>
  </compound>
  <compound kind="class">
    <name>std::num_put</name>
    <filename>cpp/locale/num_put</filename>
    <class kind="class">std::num_put::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>do_put</name>
      <anchorfile>en/cpp/locale/num_put/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/num_put.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::num_put::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>num_put</name>
      <anchorfile>en/cpp/locale/num_put/num_put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/locale/num_put/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~num_put</name>
      <anchorfile>en/cpp/locale/num_put/~num_put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::num_put::char_type</name>
    <filename>cpp/locale/num_put</filename>
  </compound>
  <compound kind="class">
    <name>std::num_put::iter_type</name>
    <filename>cpp/locale/num_put</filename>
  </compound>
  <compound kind="class">
    <name>std::numeric_limits</name>
    <filename>cpp/types/numeric_limits</filename>
    <member kind="function">
      <type>T</type>
      <name>denorm_min</name>
      <anchorfile>en/cpp/types/numeric_limits/denorm_min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epsilon</name>
      <anchorfile>en/cpp/types/numeric_limits/epsilon.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>infinity</name>
      <anchorfile>en/cpp/types/numeric_limits/infinity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lowest</name>
      <anchorfile>en/cpp/types/numeric_limits/lowest.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/types/numeric_limits/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/types/numeric_limits/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>quiet_NaN</name>
      <anchorfile>en/cpp/types/numeric_limits/quiet_NaN.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>round_error</name>
      <anchorfile>en/cpp/types/numeric_limits/round_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>signaling_NaN</name>
      <anchorfile>en/cpp/types/numeric_limits/signaling_NaN.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::numpunct</name>
    <filename>cpp/locale/numpunct</filename>
    <class kind="class">std::numpunct::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>decimal_point</name>
      <anchorfile>en/cpp/locale/numpunct/decimal_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_decimal_point</name>
      <anchorfile>en/cpp/locale/numpunct/decimal_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_falsename</name>
      <anchorfile>en/cpp/locale/numpunct/truefalsename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_grouping</name>
      <anchorfile>en/cpp/locale/numpunct/grouping.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_thousands_sep</name>
      <anchorfile>en/cpp/locale/numpunct/thousands_sep.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_truename</name>
      <anchorfile>en/cpp/locale/numpunct/truefalsename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>falsename</name>
      <anchorfile>en/cpp/locale/numpunct/truefalsename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>grouping</name>
      <anchorfile>en/cpp/locale/numpunct/grouping.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/numpunct.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>numpunct</name>
      <anchorfile>en/cpp/locale/numpunct/numpunct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::numpunct::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>thousands_sep</name>
      <anchorfile>en/cpp/locale/numpunct/thousands_sep.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>truename</name>
      <anchorfile>en/cpp/locale/numpunct/truefalsename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~numpunct</name>
      <anchorfile>en/cpp/locale/numpunct/~numpunct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::numpunct::char_type</name>
    <filename>cpp/locale/numpunct</filename>
  </compound>
  <compound kind="class">
    <name>std::numpunct::string_type</name>
    <filename>cpp/locale/numpunct</filename>
  </compound>
  <compound kind="class">
    <name>std::numpunct_byname</name>
    <filename>cpp/locale/numpunct_byname</filename>
    <class kind="class">std::numpunct_byname::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>decimal_point</name>
      <anchorfile>en/cpp/locale/numpunct/decimal_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_decimal_point</name>
      <anchorfile>en/cpp/locale/numpunct/decimal_point.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_falsename</name>
      <anchorfile>en/cpp/locale/numpunct/truefalsename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_grouping</name>
      <anchorfile>en/cpp/locale/numpunct/grouping.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_thousands_sep</name>
      <anchorfile>en/cpp/locale/numpunct/thousands_sep.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_truename</name>
      <anchorfile>en/cpp/locale/numpunct/truefalsename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>falsename</name>
      <anchorfile>en/cpp/locale/numpunct/truefalsename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>grouping</name>
      <anchorfile>en/cpp/locale/numpunct/grouping.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/numpunct.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>numpunct_byname</name>
      <anchorfile>en/cpp/locale/numpunct_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::numpunct_byname::string_type</class>
    <member kind="function">
      <type>T</type>
      <name>thousands_sep</name>
      <anchorfile>en/cpp/locale/numpunct/thousands_sep.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>truename</name>
      <anchorfile>en/cpp/locale/numpunct/truefalsename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~numpunct_byname</name>
      <anchorfile>en/cpp/locale/numpunct_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::numpunct_byname::char_type</name>
    <filename>cpp/locale/numpunct</filename>
  </compound>
  <compound kind="class">
    <name>std::numpunct_byname::string_type</name>
    <filename>cpp/locale/numpunct</filename>
  </compound>
  <compound kind="class">
    <name>std::ofstream</name>
    <filename>cpp/io/basic_ofstream</filename>
    <class kind="class">std::ofstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_ofstream/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ofstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ofstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_ofstream/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ofstream</name>
      <anchorfile>en/cpp/io/basic_ofstream/basic_ofstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_ofstream/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_ofstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ofstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ofstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::ofstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::ofstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ofstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::once_flag</name>
    <filename>cpp/thread/once_flag</filename>
    <member kind="function">
      <type>T</type>
      <name>once_flag</name>
      <anchorfile>en/cpp/thread/once_flag.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::optional</name>
    <filename>cpp/utility/optional</filename>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/utility/optional/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>has_value</name>
      <anchorfile>en/cpp/utility/optional/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/utility/optional/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/utility/optional/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/utility/optional/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/utility/optional/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>optional</name>
      <anchorfile>en/cpp/utility/optional/optional.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/utility/optional/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/utility/optional/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>en/cpp/utility/optional/value.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_or</name>
      <anchorfile>en/cpp/utility/optional/value_or.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~optional</name>
      <anchorfile>en/cpp/utility/optional/~optional.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostream</name>
    <filename>cpp/io/basic_ostream</filename>
    <class kind="class">std::ostream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ostream</name>
      <anchorfile>en/cpp/io/basic_ostream/basic_ostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~ostream</name>
      <anchorfile>en/cpp/io/basic_ostream/~basic_ostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::ostream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::ostream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostream_iterator</name>
    <filename>cpp/iterator/ostream_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/iterator/ostream_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/iterator/ostream_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/iterator/ostream_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/iterator/ostream_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ostream_iterator</name>
      <anchorfile>en/cpp/iterator/ostream_iterator/ostream_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~ostream_iterator</name>
      <anchorfile>en/cpp/iterator/ostream_iterator/~ostream_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostreambuf_iterator</name>
    <filename>cpp/iterator/ostreambuf_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>failed</name>
      <anchorfile>en/cpp/iterator/ostreambuf_iterator/failed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/iterator/ostreambuf_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/iterator/ostreambuf_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/iterator/ostreambuf_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/iterator/ostreambuf_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ostreambuf_iterator</name>
      <anchorfile>en/cpp/iterator/ostreambuf_iterator/ostreambuf_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~ostreambuf_iterator</name>
      <anchorfile>en/cpp/iterator/ostreambuf_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostringstream</name>
    <filename>cpp/io/basic_ostringstream</filename>
    <class kind="class">std::ostringstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostringstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_ostringstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ostringstream</name>
      <anchorfile>en/cpp/io/basic_ostringstream/basic_ostringstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostringstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_ostringstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostringstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::ostringstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::ostringstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostringstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostrstream</name>
    <filename>cpp/io/ostrstream</filename>
    <class kind="class">std::ostrstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostrstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostrstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>freeze</name>
      <anchorfile>en/cpp/io/ostrstream/freeze.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ostrstream</name>
      <anchorfile>en/cpp/io/ostrstream/ostrstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pcount</name>
      <anchorfile>en/cpp/io/ostrstream/pcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ostrstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/ostrstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~ostrstream</name>
      <anchorfile>en/cpp/io/ostrstream/~ostrstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostrstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::ostrstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::ostrstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ostrstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::osyncstream</name>
    <filename>cpp/io/basic_osyncstream</filename>
    <class kind="class">std::osyncstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emit</name>
      <anchorfile>en/cpp/io/basic_osyncstream/emit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::osyncstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::osyncstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_wrapped</name>
      <anchorfile>en/cpp/io/basic_osyncstream/get_wrapped.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_osyncstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>osyncstream</name>
      <anchorfile>en/cpp/io/basic_osyncstream/basic_osyncstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::osyncstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~osyncstream</name>
      <anchorfile>en/cpp/io/basic_osyncstream/~basic_osyncstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::osyncstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::osyncstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::osyncstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::osyncstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::out_of_range</name>
    <filename>cpp/error/out_of_range</filename>
    <member kind="function">
      <type>T</type>
      <name>out_of_range</name>
      <anchorfile>en/cpp/error/out_of_range/out_of_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::output_iterator_tag</name>
    <filename>cpp/iterator/iterator_tags</filename>
  </compound>
  <compound kind="class">
    <name>std::overflow_error</name>
    <filename>cpp/error/overflow_error</filename>
    <member kind="function">
      <type>T</type>
      <name>overflow_error</name>
      <anchorfile>en/cpp/error/overflow_error/overflow_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::owner_less</name>
    <filename>cpp/memory/owner_less</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/memory/owner_less.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::packaged_task</name>
    <filename>cpp/thread/packaged_task</filename>
    <member kind="function">
      <type>T</type>
      <name>get_future</name>
      <anchorfile>en/cpp/thread/packaged_task/get_future.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>make_ready_at_thread_exit</name>
      <anchorfile>en/cpp/thread/packaged_task/make_ready_at_thread_exit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/thread/packaged_task/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/thread/packaged_task/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>packaged_task</name>
      <anchorfile>en/cpp/thread/packaged_task/packaged_task.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/thread/packaged_task/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/thread/packaged_task/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>valid</name>
      <anchorfile>en/cpp/thread/packaged_task/valid.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~packaged_task</name>
      <anchorfile>en/cpp/thread/packaged_task/~packaged_task.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pair</name>
    <filename>cpp/utility/pair</filename>
    <member kind="variable">
      <type>T</type>
      <name>first</name>
      <anchorfile>en/cpp/utility/pair.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/utility/pair/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pair</name>
      <anchorfile>en/cpp/utility/pair/pair.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>second</name>
      <anchorfile>en/cpp/utility/pair.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/utility/pair/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::partial_ordering</name>
    <filename>cpp/utility/compare/partial_ordering</filename>
    <member kind="function">
      <type>T</type>
      <name>operator weak_equality</name>
      <anchorfile>en/cpp/utility/compare/partial_ordering.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::peta</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::pico</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::piecewise_constant_distribution</name>
    <filename>cpp/numeric/random/piecewise_constant_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>densities</name>
      <anchorfile>en/cpp/numeric/random/piecewise_constant_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>intervals</name>
      <anchorfile>en/cpp/numeric/random/piecewise_constant_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/piecewise_constant_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/piecewise_constant_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/piecewise_constant_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/piecewise_constant_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>piecewise_constant_distribution</name>
      <anchorfile>en/cpp/numeric/random/piecewise_constant_distribution/piecewise_constant_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/piecewise_constant_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::piecewise_construct_t</name>
    <filename>cpp/utility/piecewise_construct_t</filename>
  </compound>
  <compound kind="class">
    <name>std::piecewise_linear_distribution</name>
    <filename>cpp/numeric/random/piecewise_linear_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>densities</name>
      <anchorfile>en/cpp/numeric/random/piecewise_linear_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>intervals</name>
      <anchorfile>en/cpp/numeric/random/piecewise_linear_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/piecewise_linear_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/piecewise_linear_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/piecewise_linear_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/piecewise_linear_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>piecewise_linear_distribution</name>
      <anchorfile>en/cpp/numeric/random/piecewise_linear_distribution/piecewise_linear_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/piecewise_linear_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::placeholders</name>
    <filename>cpp/utility/functional/placeholders</filename>
  </compound>
  <compound kind="class">
    <name>std::plus</name>
    <filename>cpp/utility/functional/plus</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/plus.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std::pmr</name>
    <filename></filename>
    <class kind="class">std::pmr::deque</class>
    <class kind="class">std::pmr::forward_list</class>
    <member kind="function">
      <type>T</type>
      <name>get_default_resource</name>
      <anchorfile>en/cpp/memory/get_default_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::pmr::list</class>
    <class kind="class">std::pmr::map</class>
    <class kind="class">std::pmr::memory_resource</class>
    <class kind="class">std::pmr::monotonic_buffer_resource</class>
    <class kind="class">std::pmr::multimap</class>
    <class kind="class">std::pmr::multiset</class>
    <member kind="function">
      <type>T</type>
      <name>new_delete_resource</name>
      <anchorfile>en/cpp/memory/new_delete_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>null_memory_resource</name>
      <anchorfile>en/cpp/memory/null_memory_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::pmr::polymorphic_allocator</class>
    <class kind="class">std::pmr::pool_options</class>
    <class kind="class">std::pmr::set</class>
    <member kind="function">
      <type>T</type>
      <name>set_default_resource</name>
      <anchorfile>en/cpp/memory/set_default_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::pmr::string</class>
    <class kind="class">std::pmr::synchronized_pool_resource</class>
    <class kind="class">std::pmr::u16string</class>
    <class kind="class">std::pmr::u32string</class>
    <class kind="class">std::pmr::u8string</class>
    <class kind="class">std::pmr::unordered_map</class>
    <class kind="class">std::pmr::unordered_multimap</class>
    <class kind="class">std::pmr::unordered_multiset</class>
    <class kind="class">std::pmr::unordered_set</class>
    <class kind="class">std::pmr::unsynchronized_pool_resource</class>
    <class kind="class">std::pmr::vector</class>
    <class kind="class">std::pmr::wstring</class>
  </compound>
  <compound kind="class">
    <name>std::pmr::deque</name>
    <filename>cpp/container/deque</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/container/deque/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/container/deque/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/container/deque/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/deque/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/deque/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/deque/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/deque/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/deque/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/deque/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deque</name>
      <anchorfile>en/cpp/container/deque/deque.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/deque/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_back</name>
      <anchorfile>en/cpp/container/deque/emplace_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_front</name>
      <anchorfile>en/cpp/container/deque/emplace_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/deque/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/deque/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/deque/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/deque/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/deque/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/deque/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/deque/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/deque/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/deque/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/container/deque/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_front</name>
      <anchorfile>en/cpp/container/deque/pop_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/container/deque/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_front</name>
      <anchorfile>en/cpp/container/deque/push_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/deque/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/deque/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/container/deque/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/container/deque/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/deque/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/deque/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~deque</name>
      <anchorfile>en/cpp/container/deque/~deque.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::forward_list</name>
    <filename>cpp/container/forward_list</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/container/forward_list/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>before_begin</name>
      <anchorfile>en/cpp/container/forward_list/before_begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/forward_list/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbefore_begin</name>
      <anchorfile>en/cpp/container/forward_list/before_begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/forward_list/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/forward_list/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/forward_list/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_after</name>
      <anchorfile>en/cpp/container/forward_list/emplace_after.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_front</name>
      <anchorfile>en/cpp/container/forward_list/emplace_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/forward_list/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/forward_list/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase_after</name>
      <anchorfile>en/cpp/container/forward_list/erase_after.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>forward_list</name>
      <anchorfile>en/cpp/container/forward_list/forward_list.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/forward_list/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/forward_list/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert_after</name>
      <anchorfile>en/cpp/container/forward_list/insert_after.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/forward_list/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/forward_list/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/forward_list/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_front</name>
      <anchorfile>en/cpp/container/forward_list/pop_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_front</name>
      <anchorfile>en/cpp/container/forward_list/push_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove</name>
      <anchorfile>en/cpp/container/forward_list/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_if</name>
      <anchorfile>en/cpp/container/forward_list/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/container/forward_list/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverse</name>
      <anchorfile>en/cpp/container/forward_list/reverse.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sort</name>
      <anchorfile>en/cpp/container/forward_list/sort.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>splice_after</name>
      <anchorfile>en/cpp/container/forward_list/splice_after.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/forward_list/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique</name>
      <anchorfile>en/cpp/container/forward_list/unique.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~forward_list</name>
      <anchorfile>en/cpp/container/forward_list/~forward_list.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::list</name>
    <filename>cpp/container/list</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/container/list/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/container/list/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/list/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/list/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/list/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/list/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/list/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/list/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/list/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_back</name>
      <anchorfile>en/cpp/container/list/emplace_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_front</name>
      <anchorfile>en/cpp/container/list/emplace_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/list/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/list/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/list/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/list/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/list/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/list/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>list</name>
      <anchorfile>en/cpp/container/list/list.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/list/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/list/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/list/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/container/list/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_front</name>
      <anchorfile>en/cpp/container/list/pop_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/container/list/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_front</name>
      <anchorfile>en/cpp/container/list/push_front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/list/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove</name>
      <anchorfile>en/cpp/container/list/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_if</name>
      <anchorfile>en/cpp/container/list/remove.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/list/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/container/list/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverse</name>
      <anchorfile>en/cpp/container/list/reverse.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/list/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sort</name>
      <anchorfile>en/cpp/container/list/sort.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>splice</name>
      <anchorfile>en/cpp/container/list/splice.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/list/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique</name>
      <anchorfile>en/cpp/container/list/unique.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~list</name>
      <anchorfile>en/cpp/container/list/~list.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::map</name>
    <filename>cpp/container/map</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/container/map/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/map/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/map/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/map/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/map/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/map/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/map/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/map/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/map/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/map/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/map/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/map/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/map/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/map/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/map/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/map/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/map/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/map/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/map/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert_or_assign</name>
      <anchorfile>en/cpp/container/map/insert_or_assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>en/cpp/container/map/key_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>en/cpp/container/map/lower_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>map</name>
      <anchorfile>en/cpp/container/map/map.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/map/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/map/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/map/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/map/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/map/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/map/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/map/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/map/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_emplace</name>
      <anchorfile>en/cpp/container/map/try_emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>en/cpp/container/map/upper_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>en/cpp/container/map/value_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::pmr::map::value_compare</class>
    <member kind="function">
      <type>T</type>
      <name>~map</name>
      <anchorfile>en/cpp/container/map/~map.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::map::value_compare</name>
    <filename>cpp/container/map/value_compare</filename>
  </compound>
  <compound kind="class">
    <name>std::pmr::memory_resource</name>
    <filename>cpp/memory/memory_resource</filename>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>en/cpp/memory/memory_resource/allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>en/cpp/memory/memory_resource/deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_allocate</name>
      <anchorfile>en/cpp/memory/memory_resource/do_allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_deallocate</name>
      <anchorfile>en/cpp/memory/memory_resource/do_deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_is_equal</name>
      <anchorfile>en/cpp/memory/memory_resource/do_is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_equal</name>
      <anchorfile>en/cpp/memory/memory_resource/is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>memory_resource</name>
      <anchorfile>en/cpp/memory/memory_resource/memory_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::monotonic_buffer_resource</name>
    <filename>cpp/memory/monotonic_buffer_resource</filename>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>en/cpp/memory/memory_resource/allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>en/cpp/memory/memory_resource/deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_allocate</name>
      <anchorfile>en/cpp/memory/memory_resource/do_allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_deallocate</name>
      <anchorfile>en/cpp/memory/memory_resource/do_deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_is_equal</name>
      <anchorfile>en/cpp/memory/memory_resource/do_is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_equal</name>
      <anchorfile>en/cpp/memory/memory_resource/is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>monotonic_buffer_resource</name>
      <anchorfile>en/cpp/memory/monotonic_buffer_resource/monotonic_buffer_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>release</name>
      <anchorfile>en/cpp/memory/monotonic_buffer_resource/release.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upstream_resource</name>
      <anchorfile>en/cpp/memory/monotonic_buffer_resource/upstream_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~monotonic_buffer_resource</name>
      <anchorfile>en/cpp/memory/monotonic_buffer_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::multimap</name>
    <filename>cpp/container/multimap</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/multimap/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/multimap/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/multimap/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/multimap/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/multimap/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/multimap/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/multimap/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/multimap/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/multimap/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/multimap/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/multimap/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/multimap/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/multimap/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/multimap/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/multimap/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/multimap/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/multimap/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/multimap/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>en/cpp/container/multimap/key_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>en/cpp/container/multimap/lower_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/multimap/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/multimap/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>multimap</name>
      <anchorfile>en/cpp/container/multimap/multimap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/multimap/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/multimap/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/multimap/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/multimap/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/multimap/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>en/cpp/container/multimap/upper_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>en/cpp/container/multimap/value_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::pmr::multimap::value_compare</class>
    <member kind="function">
      <type>T</type>
      <name>~multimap</name>
      <anchorfile>en/cpp/container/multimap/~multimap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::multimap::value_compare</name>
    <filename>cpp/container/multimap/value_compare</filename>
  </compound>
  <compound kind="class">
    <name>std::pmr::multiset</name>
    <filename>cpp/container/multiset</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/multiset/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/multiset/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/multiset/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/multiset/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/multiset/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/multiset/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/multiset/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/multiset/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/multiset/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/multiset/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/multiset/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/multiset/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/multiset/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/multiset/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/multiset/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/multiset/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/multiset/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/multiset/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>en/cpp/container/multiset/key_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>en/cpp/container/multiset/lower_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/multiset/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/multiset/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>multiset</name>
      <anchorfile>en/cpp/container/multiset/multiset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/multiset/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/multiset/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/multiset/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/multiset/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/multiset/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>en/cpp/container/multiset/upper_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>en/cpp/container/multiset/value_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~multiset</name>
      <anchorfile>en/cpp/container/multiset/~multiset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::polymorphic_allocator</name>
    <filename>cpp/memory/polymorphic_allocator</filename>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>en/cpp/memory/polymorphic_allocator/allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>construct</name>
      <anchorfile>en/cpp/memory/polymorphic_allocator/construct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>en/cpp/memory/polymorphic_allocator/deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>destroy</name>
      <anchorfile>en/cpp/memory/polymorphic_allocator/destroy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>polymorphic_allocator</name>
      <anchorfile>en/cpp/memory/polymorphic_allocator/polymorphic_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resource</name>
      <anchorfile>en/cpp/memory/polymorphic_allocator/resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>select_on_container_copy_construction</name>
      <anchorfile>en/cpp/memory/polymorphic_allocator/select_on_container_copy_construction.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~polymorphic_allocator</name>
      <anchorfile>en/cpp/memory/polymorphic_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::pool_options</name>
    <filename>cpp/memory/pool_options</filename>
    <member kind="variable">
      <type>T</type>
      <name>largest_required_pool_block</name>
      <anchorfile>en/cpp/memory/pool_options.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>max_blocks_per_chunk</name>
      <anchorfile>en/cpp/memory/pool_options.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::set</name>
    <filename>cpp/container/set</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/set/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/set/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/set/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/set/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/set/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/set/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/set/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/set/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/set/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/set/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/set/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/set/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/set/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/set/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/set/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/set/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/set/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/set/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>en/cpp/container/set/key_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>en/cpp/container/set/lower_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/set/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/set/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/set/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/set/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/set/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set</name>
      <anchorfile>en/cpp/container/set/set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/set/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/set/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>en/cpp/container/set/upper_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>en/cpp/container/set/value_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~set</name>
      <anchorfile>en/cpp/container/set/~set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>string</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::synchronized_pool_resource</name>
    <filename>cpp/memory/synchronized_pool_resource</filename>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>en/cpp/memory/memory_resource/allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>en/cpp/memory/memory_resource/deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_allocate</name>
      <anchorfile>en/cpp/memory/memory_resource/do_allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_deallocate</name>
      <anchorfile>en/cpp/memory/memory_resource/do_deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_is_equal</name>
      <anchorfile>en/cpp/memory/memory_resource/do_is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_equal</name>
      <anchorfile>en/cpp/memory/memory_resource/is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>options</name>
      <anchorfile>en/cpp/memory/synchronized_pool_resource/options.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>release</name>
      <anchorfile>en/cpp/memory/synchronized_pool_resource/release.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>synchronized_pool_resource</name>
      <anchorfile>en/cpp/memory/synchronized_pool_resource/synchronized_pool_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upstream_resource</name>
      <anchorfile>en/cpp/memory/synchronized_pool_resource/upstream_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~synchronized_pool_resource</name>
      <anchorfile>en/cpp/memory/synchronized_pool_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::u16string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u16string</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::u32string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u32string</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::u8string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u8string</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::unordered_map</name>
    <filename>cpp/container/unordered_map</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/container/unordered_map/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/unordered_map/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin(int)</name>
      <anchorfile>en/cpp/container/unordered_map/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket</name>
      <anchorfile>en/cpp/container/unordered_map/bucket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_count</name>
      <anchorfile>en/cpp/container/unordered_map/bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_size</name>
      <anchorfile>en/cpp/container/unordered_map/bucket_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/unordered_map/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin(int)</name>
      <anchorfile>en/cpp/container/unordered_map/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/unordered_map/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend(int)</name>
      <anchorfile>en/cpp/container/unordered_map/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/unordered_map/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/unordered_map/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/unordered_map/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/unordered_map/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/unordered_map/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/unordered_map/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/unordered_map/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end(int)</name>
      <anchorfile>en/cpp/container/unordered_map/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/unordered_map/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/unordered_map/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/unordered_map/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/unordered_map/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/unordered_map/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash_function</name>
      <anchorfile>en/cpp/container/unordered_map/hash_function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/unordered_map/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert_or_assign</name>
      <anchorfile>en/cpp/container/unordered_map/insert_or_assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_eq</name>
      <anchorfile>en/cpp/container/unordered_map/key_eq.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load_factor</name>
      <anchorfile>en/cpp/container/unordered_map/load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_bucket_count</name>
      <anchorfile>en/cpp/container/unordered_map/max_bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_load_factor</name>
      <anchorfile>en/cpp/container/unordered_map/max_load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/unordered_map/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/unordered_map/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/unordered_map/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/unordered_map/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rehash</name>
      <anchorfile>en/cpp/container/unordered_map/rehash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/unordered_map/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/unordered_map/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/unordered_map/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_emplace</name>
      <anchorfile>en/cpp/container/unordered_map/try_emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unordered_map</name>
      <anchorfile>en/cpp/container/unordered_map/unordered_map.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unordered_map</name>
      <anchorfile>en/cpp/container/unordered_map/~unordered_map.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::unordered_multimap</name>
    <filename>cpp/container/unordered_multimap</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/unordered_multimap/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin(int)</name>
      <anchorfile>en/cpp/container/unordered_multimap/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket</name>
      <anchorfile>en/cpp/container/unordered_multimap/bucket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_count</name>
      <anchorfile>en/cpp/container/unordered_multimap/bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_size</name>
      <anchorfile>en/cpp/container/unordered_multimap/bucket_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/unordered_multimap/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin(int)</name>
      <anchorfile>en/cpp/container/unordered_multimap/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/unordered_multimap/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend(int)</name>
      <anchorfile>en/cpp/container/unordered_multimap/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/unordered_multimap/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/unordered_multimap/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/unordered_multimap/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/unordered_multimap/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/unordered_multimap/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/unordered_multimap/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/unordered_multimap/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end(int)</name>
      <anchorfile>en/cpp/container/unordered_multimap/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/unordered_multimap/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/unordered_multimap/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/unordered_multimap/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/unordered_multimap/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/unordered_multimap/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash_function</name>
      <anchorfile>en/cpp/container/unordered_multimap/hash_function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/unordered_multimap/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_eq</name>
      <anchorfile>en/cpp/container/unordered_multimap/key_eq.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load_factor</name>
      <anchorfile>en/cpp/container/unordered_multimap/load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_bucket_count</name>
      <anchorfile>en/cpp/container/unordered_multimap/max_bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_load_factor</name>
      <anchorfile>en/cpp/container/unordered_multimap/max_load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/unordered_multimap/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/unordered_multimap/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/unordered_multimap/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rehash</name>
      <anchorfile>en/cpp/container/unordered_multimap/rehash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/unordered_multimap/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/unordered_multimap/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/unordered_multimap/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unordered_multimap</name>
      <anchorfile>en/cpp/container/unordered_multimap/unordered_multimap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unordered_multimap</name>
      <anchorfile>en/cpp/container/unordered_multimap/~unordered_multimap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::unordered_multiset</name>
    <filename>cpp/container/unordered_multiset</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/unordered_multiset/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin(int)</name>
      <anchorfile>en/cpp/container/unordered_multiset/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket</name>
      <anchorfile>en/cpp/container/unordered_multiset/bucket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_count</name>
      <anchorfile>en/cpp/container/unordered_multiset/bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_size</name>
      <anchorfile>en/cpp/container/unordered_multiset/bucket_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/unordered_multiset/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin(int)</name>
      <anchorfile>en/cpp/container/unordered_multiset/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/unordered_multiset/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend(int)</name>
      <anchorfile>en/cpp/container/unordered_multiset/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/unordered_multiset/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/unordered_multiset/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/unordered_multiset/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/unordered_multiset/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/unordered_multiset/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/unordered_multiset/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/unordered_multiset/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end(int)</name>
      <anchorfile>en/cpp/container/unordered_multiset/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/unordered_multiset/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/unordered_multiset/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/unordered_multiset/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/unordered_multiset/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/unordered_multiset/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash_function</name>
      <anchorfile>en/cpp/container/unordered_multiset/hash_function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/unordered_multiset/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_eq</name>
      <anchorfile>en/cpp/container/unordered_multiset/key_eq.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load_factor</name>
      <anchorfile>en/cpp/container/unordered_multiset/load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_bucket_count</name>
      <anchorfile>en/cpp/container/unordered_multiset/max_bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_load_factor</name>
      <anchorfile>en/cpp/container/unordered_multiset/max_load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/unordered_multiset/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/unordered_multiset/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/unordered_multiset/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rehash</name>
      <anchorfile>en/cpp/container/unordered_multiset/rehash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/unordered_multiset/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/unordered_multiset/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/unordered_multiset/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unordered_multiset</name>
      <anchorfile>en/cpp/container/unordered_multiset/unordered_multiset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unordered_multiset</name>
      <anchorfile>en/cpp/container/unordered_multiset/~unordered_multiset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::unordered_set</name>
    <filename>cpp/container/unordered_set</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/unordered_set/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin(int)</name>
      <anchorfile>en/cpp/container/unordered_set/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket</name>
      <anchorfile>en/cpp/container/unordered_set/bucket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_count</name>
      <anchorfile>en/cpp/container/unordered_set/bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_size</name>
      <anchorfile>en/cpp/container/unordered_set/bucket_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/unordered_set/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin(int)</name>
      <anchorfile>en/cpp/container/unordered_set/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/unordered_set/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend(int)</name>
      <anchorfile>en/cpp/container/unordered_set/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/unordered_set/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/unordered_set/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/unordered_set/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/unordered_set/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/unordered_set/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/unordered_set/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/unordered_set/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end(int)</name>
      <anchorfile>en/cpp/container/unordered_set/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/unordered_set/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/unordered_set/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/unordered_set/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/unordered_set/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/unordered_set/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash_function</name>
      <anchorfile>en/cpp/container/unordered_set/hash_function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/unordered_set/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_eq</name>
      <anchorfile>en/cpp/container/unordered_set/key_eq.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load_factor</name>
      <anchorfile>en/cpp/container/unordered_set/load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_bucket_count</name>
      <anchorfile>en/cpp/container/unordered_set/max_bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_load_factor</name>
      <anchorfile>en/cpp/container/unordered_set/max_load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/unordered_set/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/unordered_set/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/unordered_set/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rehash</name>
      <anchorfile>en/cpp/container/unordered_set/rehash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/unordered_set/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/unordered_set/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/unordered_set/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unordered_set</name>
      <anchorfile>en/cpp/container/unordered_set/unordered_set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unordered_set</name>
      <anchorfile>en/cpp/container/unordered_set/~unordered_set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::unsynchronized_pool_resource</name>
    <filename>cpp/memory/unsynchronized_pool_resource</filename>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>en/cpp/memory/memory_resource/allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>en/cpp/memory/memory_resource/deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_allocate</name>
      <anchorfile>en/cpp/memory/memory_resource/do_allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_deallocate</name>
      <anchorfile>en/cpp/memory/memory_resource/do_deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_is_equal</name>
      <anchorfile>en/cpp/memory/memory_resource/do_is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_equal</name>
      <anchorfile>en/cpp/memory/memory_resource/is_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>options</name>
      <anchorfile>en/cpp/memory/unsynchronized_pool_resource/options.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>release</name>
      <anchorfile>en/cpp/memory/unsynchronized_pool_resource/release.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsynchronized_pool_resource</name>
      <anchorfile>en/cpp/memory/unsynchronized_pool_resource/unsynchronized_pool_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upstream_resource</name>
      <anchorfile>en/cpp/memory/unsynchronized_pool_resource/upstream_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unsynchronized_pool_resource</name>
      <anchorfile>en/cpp/memory/unsynchronized_pool_resource.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::vector</name>
    <filename>cpp/container/vector</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/container/vector/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/container/vector/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/container/vector/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/vector/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/container/vector/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/vector/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/vector/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/vector/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/vector/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/vector/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/container/vector/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/vector/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_back</name>
      <anchorfile>en/cpp/container/vector/emplace_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/vector/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/vector/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/vector/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/vector/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/vector/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/vector/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/vector/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/vector/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/vector/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/container/vector/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/container/vector/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/vector/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/vector/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/vector/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/container/vector/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/container/vector/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/vector/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/vector/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vector</name>
      <anchorfile>en/cpp/container/vector/vector.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~vector</name>
      <anchorfile>en/cpp/container/vector/~vector.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pmr::wstring</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstring</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::pointer_safety</name>
    <filename>cpp/memory/gc/pointer_safety</filename>
  </compound>
  <compound kind="class">
    <name>std::pointer_traits</name>
    <filename>cpp/memory/pointer_traits</filename>
    <member kind="function">
      <type>T</type>
      <name>pointer_to</name>
      <anchorfile>en/cpp/memory/pointer_traits/pointer_to.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::poisson_distribution</name>
    <filename>cpp/numeric/random/poisson_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/poisson_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mean</name>
      <anchorfile>en/cpp/numeric/random/poisson_distribution/mean.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/poisson_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/poisson_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>poisson_distribution</name>
      <anchorfile>en/cpp/numeric/random/poisson_distribution/poisson_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/poisson_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::priority_queue</name>
    <filename>cpp/container/priority_queue</filename>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/priority_queue/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/priority_queue/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/priority_queue/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop</name>
      <anchorfile>en/cpp/container/priority_queue/pop.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>priority_queue</name>
      <anchorfile>en/cpp/container/priority_queue/priority_queue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push</name>
      <anchorfile>en/cpp/container/priority_queue/push.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/priority_queue/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/priority_queue/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>top</name>
      <anchorfile>en/cpp/container/priority_queue/top.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~priority_queue</name>
      <anchorfile>en/cpp/container/priority_queue/~priority_queue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::promise</name>
    <filename>cpp/thread/promise</filename>
    <member kind="function">
      <type>T</type>
      <name>get_future</name>
      <anchorfile>en/cpp/thread/promise/get_future.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/thread/promise/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>promise</name>
      <anchorfile>en/cpp/thread/promise/promise.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_exception</name>
      <anchorfile>en/cpp/thread/promise/set_exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_exception_at_thread_exit</name>
      <anchorfile>en/cpp/thread/promise/set_exception_at_thread_exit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_value</name>
      <anchorfile>en/cpp/thread/promise/set_value.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_value_at_thread_exit</name>
      <anchorfile>en/cpp/thread/promise/set_value_at_thread_exit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/thread/promise/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~promise</name>
      <anchorfile>en/cpp/thread/promise/~promise.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ptrdiff_t</name>
    <filename>cpp/types/ptrdiff_t</filename>
  </compound>
  <compound kind="class">
    <name>std::queue</name>
    <filename>cpp/container/queue</filename>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/container/queue/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/queue/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/queue/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/queue/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/queue/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop</name>
      <anchorfile>en/cpp/container/queue/pop.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push</name>
      <anchorfile>en/cpp/container/queue/push.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>queue</name>
      <anchorfile>en/cpp/container/queue/queue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/queue/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/queue/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~queue</name>
      <anchorfile>en/cpp/container/queue/~queue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::random_access_iterator_tag</name>
    <filename>cpp/iterator/iterator_tags</filename>
  </compound>
  <compound kind="class">
    <name>std::random_device</name>
    <filename>cpp/numeric/random/random_device</filename>
    <member kind="function">
      <type>T</type>
      <name>entropy</name>
      <anchorfile>en/cpp/numeric/random/random_device/entropy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/random_device/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/random_device/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/random_device/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>random_device</name>
      <anchorfile>en/cpp/numeric/random/random_device/random_device.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::range_error</name>
    <filename>cpp/error/range_error</filename>
    <member kind="function">
      <type>T</type>
      <name>range_error</name>
      <anchorfile>en/cpp/error/range_error/range_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std::ranges</name>
    <filename></filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/ranges/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/ranges/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::ranges::equal_to</class>
    <class kind="class">std::ranges::greater</class>
    <class kind="class">std::ranges::greater_equal</class>
    <class kind="class">std::ranges::less</class>
    <class kind="class">std::ranges::less_equal</class>
    <class kind="class">std::ranges::not_equal_to</class>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/utility/ranges/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranges::equal_to</name>
    <filename>cpp/utility/functional/ranges/equal_to</filename>
    <class kind="class">std::ranges::equal_to::is_transparent</class>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/ranges/equal_to.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranges::equal_to::is_transparent</name>
    <filename>cpp/utility/functional/ranges/equal_to</filename>
  </compound>
  <compound kind="class">
    <name>std::ranges::greater</name>
    <filename>cpp/utility/functional/ranges/greater</filename>
    <class kind="class">std::ranges::greater::is_transparent</class>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/ranges/greater.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranges::greater::is_transparent</name>
    <filename>cpp/utility/functional/ranges/greater</filename>
  </compound>
  <compound kind="class">
    <name>std::ranges::greater_equal</name>
    <filename>cpp/utility/functional/ranges/greater_equal</filename>
    <class kind="class">std::ranges::greater_equal::is_transparent</class>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/ranges/greater_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranges::greater_equal::is_transparent</name>
    <filename>cpp/utility/functional/ranges/greater_equal</filename>
  </compound>
  <compound kind="class">
    <name>std::ranges::less</name>
    <filename>cpp/utility/functional/ranges/less</filename>
    <class kind="class">std::ranges::less::is_transparent</class>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/ranges/less.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranges::less::is_transparent</name>
    <filename>cpp/utility/functional/ranges/less</filename>
  </compound>
  <compound kind="class">
    <name>std::ranges::less_equal</name>
    <filename>cpp/utility/functional/ranges/less_equal</filename>
    <class kind="class">std::ranges::less_equal::is_transparent</class>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/ranges/less_equal.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranges::less_equal::is_transparent</name>
    <filename>cpp/utility/functional/ranges/less_equal</filename>
  </compound>
  <compound kind="class">
    <name>std::ranges::not_equal_to</name>
    <filename>cpp/utility/functional/ranges/not_equal_to</filename>
    <class kind="class">std::ranges::not_equal_to::is_transparent</class>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/ranges/not_equal_to.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranges::not_equal_to::is_transparent</name>
    <filename>cpp/utility/functional/ranges/not_equal_to</filename>
  </compound>
  <compound kind="class">
    <name>std::rank</name>
    <filename>cpp/types/rank</filename>
  </compound>
  <compound kind="class">
    <name>std::ranlux24</name>
    <filename>cpp/numeric/random/discard_block_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ranlux24</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/discard_block_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranlux24_base</name>
    <filename>cpp/numeric/random/subtract_with_carry_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ranlux24_base</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/subtract_with_carry_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranlux48</name>
    <filename>cpp/numeric/random/discard_block_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ranlux48</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/discard_block_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/discard_block_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ranlux48_base</name>
    <filename>cpp/numeric/random/subtract_with_carry_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ranlux48_base</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/subtract_with_carry_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ratio</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_add</name>
    <filename>cpp/numeric/ratio/ratio_add</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_divide</name>
    <filename>cpp/numeric/ratio/ratio_divide</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_equal</name>
    <filename>cpp/numeric/ratio/ratio_equal</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_greater</name>
    <filename>cpp/numeric/ratio/ratio_greater</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_greater_equal</name>
    <filename>cpp/numeric/ratio/ratio_greater_equal</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_less</name>
    <filename>cpp/numeric/ratio/ratio_less</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_less_equal</name>
    <filename>cpp/numeric/ratio/ratio_less_equal</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_multiply</name>
    <filename>cpp/numeric/ratio/ratio_multiply</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_not_equal</name>
    <filename>cpp/numeric/ratio/ratio_not_equal</filename>
  </compound>
  <compound kind="class">
    <name>std::ratio_subtract</name>
    <filename>cpp/numeric/ratio/ratio_subtract</filename>
  </compound>
  <compound kind="class">
    <name>std::raw_storage_iterator</name>
    <filename>cpp/memory/raw_storage_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/memory/raw_storage_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/memory/raw_storage_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/memory/raw_storage_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>raw_storage_iterator</name>
      <anchorfile>en/cpp/memory/raw_storage_iterator/raw_storage_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::readable_traits</name>
    <filename>cpp/iterator/readable_traits</filename>
  </compound>
  <compound kind="class">
    <name>std::recursive_mutex</name>
    <filename>cpp/thread/recursive_mutex</filename>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/thread/recursive_mutex/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native_handle</name>
      <anchorfile>en/cpp/thread/recursive_mutex/native_handle.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>recursive_mutex</name>
      <anchorfile>en/cpp/thread/recursive_mutex/recursive_mutex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>en/cpp/thread/recursive_mutex/try_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock</name>
      <anchorfile>en/cpp/thread/recursive_mutex/unlock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::recursive_timed_mutex</name>
    <filename>cpp/thread/recursive_timed_mutex</filename>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/thread/recursive_timed_mutex/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native_handle</name>
      <anchorfile>en/cpp/thread/recursive_timed_mutex/native_handle.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>recursive_timed_mutex</name>
      <anchorfile>en/cpp/thread/recursive_timed_mutex/recursive_timed_mutex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>en/cpp/thread/recursive_timed_mutex/try_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_for</name>
      <anchorfile>en/cpp/thread/recursive_timed_mutex/try_lock_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_until</name>
      <anchorfile>en/cpp/thread/recursive_timed_mutex/try_lock_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock</name>
      <anchorfile>en/cpp/thread/recursive_timed_mutex/unlock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::reference_wrapper</name>
    <filename>cpp/utility/functional/reference_wrapper</filename>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/utility/functional/reference_wrapper/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator T&amp;</name>
      <anchorfile>en/cpp/utility/functional/reference_wrapper/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/reference_wrapper/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/utility/functional/reference_wrapper/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reference_wrapper</name>
      <anchorfile>en/cpp/utility/functional/reference_wrapper/reference_wrapper.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::regex</name>
    <filename>cpp/regex/basic_regex</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/regex/basic_regex/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/regex/basic_regex/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/regex/basic_regex/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/regex/basic_regex/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mark_count</name>
      <anchorfile>en/cpp/regex/basic_regex/mark_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/basic_regex/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>regex</name>
      <anchorfile>en/cpp/regex/basic_regex/basic_regex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/regex/basic_regex/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~regex</name>
      <anchorfile>en/cpp/regex/basic_regex/~basic_regex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std::regex_constants</name>
    <filename></filename>
  </compound>
  <compound kind="class">
    <name>std::regex_error</name>
    <filename>cpp/regex/regex_error</filename>
    <member kind="function">
      <type>T</type>
      <name>code</name>
      <anchorfile>en/cpp/regex/regex_error/code.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>regex_error</name>
      <anchorfile>en/cpp/regex/regex_error/regex_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::regex_iterator</name>
    <filename>cpp/regex/regex_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>regex_iterator</name>
      <anchorfile>en/cpp/regex/regex_iterator/regex_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::regex_token_iterator</name>
    <filename>cpp/regex/regex_token_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>regex_token_iterator</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/regex_token_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::regex_traits</name>
    <filename>cpp/regex/regex_traits</filename>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/regex/regex_traits/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/regex/regex_traits/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>isctype</name>
      <anchorfile>en/cpp/regex/regex_traits/isctype.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/regex_traits/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lookup_classname</name>
      <anchorfile>en/cpp/regex/regex_traits/lookup_classname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lookup_collatename</name>
      <anchorfile>en/cpp/regex/regex_traits/lookup_collatename.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>regex_traits</name>
      <anchorfile>en/cpp/regex/regex_traits/regex_traits.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transform</name>
      <anchorfile>en/cpp/regex/regex_traits/transform.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transform_primary</name>
      <anchorfile>en/cpp/regex/regex_traits/transform_primary.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>translate</name>
      <anchorfile>en/cpp/regex/regex_traits/translate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>translate_nocase</name>
      <anchorfile>en/cpp/regex/regex_traits/translate_nocase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>en/cpp/regex/regex_traits/value.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std::rel_ops</name>
    <filename></filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/utility/rel_ops/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;=</name>
      <anchorfile>en/cpp/utility/rel_ops/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;</name>
      <anchorfile>en/cpp/utility/rel_ops/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;=</name>
      <anchorfile>en/cpp/utility/rel_ops/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::remove_all_extents</name>
    <filename>cpp/types/remove_all_extents</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_all_extents_t</name>
    <filename>cpp/types/remove_all_extents</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_const</name>
    <filename>cpp/types/remove_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_const_t</name>
    <filename>cpp/types/remove_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_cv</name>
    <filename>cpp/types/remove_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_cv_t</name>
    <filename>cpp/types/remove_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_cvref</name>
    <filename>cpp/types/remove_cvref</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_cvref_t</name>
    <filename>cpp/types/remove_cvref</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_extent</name>
    <filename>cpp/types/remove_extent</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_extent_t</name>
    <filename>cpp/types/remove_extent</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_pointer</name>
    <filename>cpp/types/remove_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_pointer_t</name>
    <filename>cpp/types/remove_pointer</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_reference</name>
    <filename>cpp/types/remove_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_reference_t</name>
    <filename>cpp/types/remove_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_volatile</name>
    <filename>cpp/types/remove_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::remove_volatile_t</name>
    <filename>cpp/types/remove_cv</filename>
  </compound>
  <compound kind="class">
    <name>std::result_of</name>
    <filename>cpp/types/result_of</filename>
  </compound>
  <compound kind="class">
    <name>std::result_of_t</name>
    <filename>cpp/types/result_of</filename>
  </compound>
  <compound kind="class">
    <name>std::reverse_iterator</name>
    <filename>cpp/iterator/reverse_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--(int)</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-=</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reverse_iterator</name>
      <anchorfile>en/cpp/iterator/reverse_iterator/reverse_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::runtime_error</name>
    <filename>cpp/error/runtime_error</filename>
    <member kind="function">
      <type>T</type>
      <name>runtime_error</name>
      <anchorfile>en/cpp/error/runtime_error/runtime_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::scoped_allocator_adaptor</name>
    <filename>cpp/memory/scoped_allocator_adaptor</filename>
    <member kind="function">
      <type>T</type>
      <name>allocate</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/allocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>construct</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/construct.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>deallocate</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/deallocate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>destroy</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/destroy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>inner_allocator</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/inner_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>outer_allocator</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/outer_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scoped_allocator_adaptor</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/scoped_allocator_adaptor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>select_on_container_copy_construction</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/select_on_container_copy_construction.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~scoped_allocator_adaptor</name>
      <anchorfile>en/cpp/memory/scoped_allocator_adaptor/~scoped_allocator_adaptor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::seed_seq</name>
    <filename>cpp/numeric/random/seed_seq</filename>
    <member kind="function">
      <type>T</type>
      <name>generate</name>
      <anchorfile>en/cpp/numeric/random/seed_seq/generate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/seed_seq/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed_seq</name>
      <anchorfile>en/cpp/numeric/random/seed_seq/seed_seq.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/numeric/random/seed_seq/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::set</name>
    <filename>cpp/container/set</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/set/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/set/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/set/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/set/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/set/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/set/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/set/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/set/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/set/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/set/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/set/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/set/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/set/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/set/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/set/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/set/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/set/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/set/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_comp</name>
      <anchorfile>en/cpp/container/set/key_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lower_bound</name>
      <anchorfile>en/cpp/container/set/lower_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/set/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/set/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/set/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/set/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/set/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set</name>
      <anchorfile>en/cpp/container/set/set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/set/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/set/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>upper_bound</name>
      <anchorfile>en/cpp/container/set/upper_bound.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value_comp</name>
      <anchorfile>en/cpp/container/set/value_comp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~set</name>
      <anchorfile>en/cpp/container/set/~set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::shared_future</name>
    <filename>cpp/thread/shared_future</filename>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/thread/shared_future/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/thread/shared_future/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shared_future</name>
      <anchorfile>en/cpp/thread/shared_future/shared_future.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>valid</name>
      <anchorfile>en/cpp/thread/shared_future/valid.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait</name>
      <anchorfile>en/cpp/thread/shared_future/wait.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_for</name>
      <anchorfile>en/cpp/thread/shared_future/wait_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wait_until</name>
      <anchorfile>en/cpp/thread/shared_future/wait_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~shared_future</name>
      <anchorfile>en/cpp/thread/shared_future/~shared_future.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::shared_lock</name>
    <filename>cpp/thread/shared_lock</filename>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/thread/shared_lock/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mutex</name>
      <anchorfile>en/cpp/thread/shared_lock/mutex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/thread/shared_lock/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/thread/shared_lock/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>owns_lock</name>
      <anchorfile>en/cpp/thread/shared_lock/owns_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>release</name>
      <anchorfile>en/cpp/thread/shared_lock/release.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shared_lock</name>
      <anchorfile>en/cpp/thread/shared_lock/shared_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/thread/shared_lock/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>en/cpp/thread/shared_lock/try_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_for</name>
      <anchorfile>en/cpp/thread/shared_lock/try_lock_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_until</name>
      <anchorfile>en/cpp/thread/shared_lock/try_lock_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock</name>
      <anchorfile>en/cpp/thread/shared_lock/unlock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~shared_lock</name>
      <anchorfile>en/cpp/thread/shared_lock/~shared_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::shared_mutex</name>
    <filename>cpp/thread/shared_mutex</filename>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/thread/shared_mutex/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lock_shared</name>
      <anchorfile>en/cpp/thread/shared_mutex/lock_shared.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native_handle</name>
      <anchorfile>en/cpp/thread/shared_mutex/native_handle.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shared_mutex</name>
      <anchorfile>en/cpp/thread/shared_mutex/shared_mutex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>en/cpp/thread/shared_mutex/try_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_shared</name>
      <anchorfile>en/cpp/thread/shared_mutex/try_lock_shared.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock</name>
      <anchorfile>en/cpp/thread/shared_mutex/unlock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock_shared</name>
      <anchorfile>en/cpp/thread/shared_mutex/unlock_shared.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::shared_ptr</name>
    <filename>cpp/memory/shared_ptr</filename>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/memory/shared_ptr/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/memory/shared_ptr/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/memory/shared_ptr/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/memory/shared_ptr/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/memory/shared_ptr/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/memory/shared_ptr/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>owner_before</name>
      <anchorfile>en/cpp/memory/shared_ptr/owner_before.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/memory/shared_ptr/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shared_ptr</name>
      <anchorfile>en/cpp/memory/shared_ptr/shared_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/memory/shared_ptr/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique</name>
      <anchorfile>en/cpp/memory/shared_ptr/unique.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>use_count</name>
      <anchorfile>en/cpp/memory/shared_ptr/use_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~shared_ptr</name>
      <anchorfile>en/cpp/memory/shared_ptr/~shared_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::shared_timed_mutex</name>
    <filename>cpp/thread/shared_timed_mutex</filename>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lock_shared</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/lock_shared.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shared_timed_mutex</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/shared_timed_mutex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/try_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_for</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/try_lock_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_shared</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/try_lock_shared.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_shared_for</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/try_lock_shared_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_shared_until</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/try_lock_shared_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_until</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/try_lock_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/unlock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock_shared</name>
      <anchorfile>en/cpp/thread/shared_timed_mutex/unlock_shared.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::shuffle_order_engine</name>
    <filename>cpp/numeric/random/shuffle_order_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/base.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shuffle_order_engine</name>
      <anchorfile>en/cpp/numeric/random/shuffle_order_engine/shuffle_order_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::sig_atomic_t</name>
    <filename>cpp/utility/program/sig_atomic_t</filename>
  </compound>
  <compound kind="class">
    <name>std::size_t</name>
    <filename>cpp/types/size_t</filename>
  </compound>
  <compound kind="class">
    <name>std::slice</name>
    <filename>cpp/numeric/valarray/slice</filename>
  </compound>
  <compound kind="class">
    <name>std::slice_array</name>
    <filename>cpp/numeric/valarray/slice_array</filename>
  </compound>
  <compound kind="class">
    <name>std::smatch</name>
    <filename>cpp/regex/match_results</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/regex/match_results/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>format</name>
      <anchorfile>en/cpp/regex/match_results/format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/regex/match_results/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/match_results/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/regex/match_results/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/regex/match_results/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>position</name>
      <anchorfile>en/cpp/regex/match_results/position.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prefix</name>
      <anchorfile>en/cpp/regex/match_results/prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ready</name>
      <anchorfile>en/cpp/regex/match_results/ready.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/regex/match_results/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>smatch</name>
      <anchorfile>en/cpp/regex/match_results/match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/match_results/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>suffix</name>
      <anchorfile>en/cpp/regex/match_results/suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/regex/match_results/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~smatch</name>
      <anchorfile>en/cpp/regex/match_results/~match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::span</name>
    <filename>cpp/container/span</filename>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/container/span/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/span/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/span/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/span/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/span/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/span/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/container/span/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/span/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/span/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>first</name>
      <anchorfile>en/cpp/container/span/first.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/span/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>last</name>
      <anchorfile>en/cpp/container/span/last.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/span/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/span/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/span/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/span/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/span/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size_bytes</name>
      <anchorfile>en/cpp/container/span/size_bytes.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>span</name>
      <anchorfile>en/cpp/container/span/span.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subspan</name>
      <anchorfile>en/cpp/container/span/subspan.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::sregex_iterator</name>
    <filename>cpp/regex/regex_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sregex_iterator</name>
      <anchorfile>en/cpp/regex/regex_iterator/regex_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::sregex_token_iterator</name>
    <filename>cpp/regex/regex_token_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sregex_token_iterator</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/regex_token_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::ssub_match</name>
    <filename>cpp/regex/sub_match</filename>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/regex/sub_match/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/sub_match/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator string_type</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ssub_match</name>
      <anchorfile>en/cpp/regex/sub_match/sub_match.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::stack</name>
    <filename>cpp/container/stack</filename>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/stack/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/stack/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/stack/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop</name>
      <anchorfile>en/cpp/container/stack/pop.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push</name>
      <anchorfile>en/cpp/container/stack/push.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/stack/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stack</name>
      <anchorfile>en/cpp/container/stack/stack.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/stack/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>top</name>
      <anchorfile>en/cpp/container/stack/top.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~stack</name>
      <anchorfile>en/cpp/container/stack/~stack.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::streambuf</name>
    <filename>cpp/io/basic_streambuf</filename>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_streambuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>streambuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/basic_streambuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~streambuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/~basic_streambuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::streamoff</name>
    <filename>cpp/io/streamoff</filename>
  </compound>
  <compound kind="class">
    <name>std::streampos</name>
    <filename>cpp/io/fpos</filename>
    <member kind="function">
      <type>T</type>
      <name>state</name>
      <anchorfile>en/cpp/io/fpos/state.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::streamsize</name>
    <filename>cpp/io/streamsize</filename>
  </compound>
  <compound kind="class">
    <name>std::string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>string</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::string_view</name>
    <filename>cpp/string/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string_view/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string_view/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>string_view</name>
      <anchorfile>en/cpp/string/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::stringbuf</name>
    <filename>cpp/io/basic_stringbuf</filename>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_stringbuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_stringbuf/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stringbuf</name>
      <anchorfile>en/cpp/io/basic_stringbuf/basic_stringbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::stringstream</name>
    <filename>cpp/io/basic_stringstream</filename>
    <class kind="class">std::stringstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::stringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::stringstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_stringstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::stringstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_stringstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stringstream</name>
      <anchorfile>en/cpp/io/basic_stringstream/basic_stringstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::stringstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::stringstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::stringstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::stringstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::strong_equality</name>
    <filename>cpp/utility/compare/strong_equality</filename>
    <member kind="function">
      <type>T</type>
      <name>operator weak_equality</name>
      <anchorfile>en/cpp/utility/compare/strong_equality.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::strong_ordering</name>
    <filename>cpp/utility/compare/strong_ordering</filename>
    <member kind="function">
      <type>T</type>
      <name>operator partial_ordering</name>
      <anchorfile>en/cpp/utility/compare/strong_ordering.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator strong_equality</name>
      <anchorfile>en/cpp/utility/compare/strong_ordering.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator weak_equality</name>
      <anchorfile>en/cpp/utility/compare/strong_ordering.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator weak_ordering</name>
      <anchorfile>en/cpp/utility/compare/strong_ordering.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::strstream</name>
    <filename>cpp/io/strstream</filename>
    <class kind="class">std::strstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::strstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::strstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>freeze</name>
      <anchorfile>en/cpp/io/strstream/freeze.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pcount</name>
      <anchorfile>en/cpp/io/strstream/pcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::strstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/strstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strstream</name>
      <anchorfile>en/cpp/io/strstream/strstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~strstream</name>
      <anchorfile>en/cpp/io/strstream/~strstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::strstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::strstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::strstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::strstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::strstreambuf</name>
    <filename>cpp/io/strstreambuf</filename>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>freeze</name>
      <anchorfile>en/cpp/io/strstreambuf/freeze.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pcount</name>
      <anchorfile>en/cpp/io/strstreambuf/pcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/strstreambuf/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>strstreambuf</name>
      <anchorfile>en/cpp/io/strstreambuf/strstreambuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~strstreambuf</name>
      <anchorfile>en/cpp/io/strstreambuf/~strstreambuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::student_t_distribution</name>
    <filename>cpp/numeric/random/student_t_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/student_t_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/student_t_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>n</name>
      <anchorfile>en/cpp/numeric/random/student_t_distribution/n.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/student_t_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/student_t_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/student_t_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>student_t_distribution</name>
      <anchorfile>en/cpp/numeric/random/student_t_distribution/student_t_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::sub_match</name>
    <filename>cpp/regex/sub_match</filename>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/regex/sub_match/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/sub_match/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator string_type</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sub_match</name>
      <anchorfile>en/cpp/regex/sub_match/sub_match.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::subtract_with_carry_engine</name>
    <filename>cpp/numeric/random/subtract_with_carry_engine</filename>
    <member kind="function">
      <type>T</type>
      <name>discard</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/discard.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seed</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/seed.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subtract_with_carry_engine</name>
      <anchorfile>en/cpp/numeric/random/subtract_with_carry_engine/subtract_with_carry_engine.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::syncbuf</name>
    <filename>cpp/io/basic_syncbuf</filename>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emit</name>
      <anchorfile>en/cpp/io/basic_syncbuf/emit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/io/basic_syncbuf/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_wrapped</name>
      <anchorfile>en/cpp/io/basic_syncbuf/get_wrapped.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_syncbuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_emit_on_sync</name>
      <anchorfile>en/cpp/io/basic_syncbuf/set_emit_on_sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>syncbuf</name>
      <anchorfile>en/cpp/io/basic_syncbuf/basic_syncbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~syncbuf</name>
      <anchorfile>en/cpp/io/basic_syncbuf/~basic_syncbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::system_error</name>
    <filename>cpp/error/system_error</filename>
    <member kind="function">
      <type>T</type>
      <name>code</name>
      <anchorfile>en/cpp/error/system_error/code.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>system_error</name>
      <anchorfile>en/cpp/error/system_error/system_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tera</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::terminate_handler</name>
    <filename>cpp/error/terminate_handler</filename>
  </compound>
  <compound kind="namespace">
    <name>std::this_thread</name>
    <filename></filename>
    <member kind="function">
      <type>T</type>
      <name>get_id</name>
      <anchorfile>en/cpp/thread/get_id.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sleep_for</name>
      <anchorfile>en/cpp/thread/sleep_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sleep_until</name>
      <anchorfile>en/cpp/thread/sleep_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>yield</name>
      <anchorfile>en/cpp/thread/yield.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::thread</name>
    <filename>cpp/thread/thread</filename>
    <member kind="function">
      <type>T</type>
      <name>detach</name>
      <anchorfile>en/cpp/thread/thread/detach.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_id</name>
      <anchorfile>en/cpp/thread/thread/get_id.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hardware_concurrency</name>
      <anchorfile>en/cpp/thread/thread/hardware_concurrency.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::thread::id</class>
    <member kind="function">
      <type>T</type>
      <name>join</name>
      <anchorfile>en/cpp/thread/thread/join.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>joinable</name>
      <anchorfile>en/cpp/thread/thread/joinable.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native_handle</name>
      <anchorfile>en/cpp/thread/thread/native_handle.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/thread/thread/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/thread/thread/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>thread</name>
      <anchorfile>en/cpp/thread/thread/thread.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~thread</name>
      <anchorfile>en/cpp/thread/thread/~thread.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::thread::id</name>
    <filename>cpp/thread/thread/id</filename>
    <member kind="function">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/thread/thread/id/id.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/thread/thread/id/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;</name>
      <anchorfile>en/cpp/thread/thread/id/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/thread/thread/id/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;=</name>
      <anchorfile>en/cpp/thread/thread/id/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/thread/thread/id/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;</name>
      <anchorfile>en/cpp/thread/thread/id/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;=</name>
      <anchorfile>en/cpp/thread/thread/id/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::time_base</name>
    <filename>cpp/locale/time_base</filename>
  </compound>
  <compound kind="class">
    <name>std::time_get</name>
    <filename>cpp/locale/time_get</filename>
    <class kind="class">std::time_get::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>date_order</name>
      <anchorfile>en/cpp/locale/time_get/date_order.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_date_order</name>
      <anchorfile>en/cpp/locale/time_get/date_order.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get</name>
      <anchorfile>en/cpp/locale/time_get/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_date</name>
      <anchorfile>en/cpp/locale/time_get/get_date.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_monthname</name>
      <anchorfile>en/cpp/locale/time_get/get_monthname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_time</name>
      <anchorfile>en/cpp/locale/time_get/get_time.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_weekday</name>
      <anchorfile>en/cpp/locale/time_get/get_weekday.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_year</name>
      <anchorfile>en/cpp/locale/time_get/get_year.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/locale/time_get/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_date</name>
      <anchorfile>en/cpp/locale/time_get/get_date.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_monthname</name>
      <anchorfile>en/cpp/locale/time_get/get_monthname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_time</name>
      <anchorfile>en/cpp/locale/time_get/get_time.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_weekday</name>
      <anchorfile>en/cpp/locale/time_get/get_weekday.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_year</name>
      <anchorfile>en/cpp/locale/time_get/get_year.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/time_get.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::time_get::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>time_get</name>
      <anchorfile>en/cpp/locale/time_get/time_get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~time_get</name>
      <anchorfile>en/cpp/locale/time_get/~time_get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::time_get::char_type</name>
    <filename>cpp/locale/time_get</filename>
  </compound>
  <compound kind="class">
    <name>std::time_get::iter_type</name>
    <filename>cpp/locale/time_get</filename>
  </compound>
  <compound kind="class">
    <name>std::time_get_byname</name>
    <filename>cpp/locale/time_get_byname</filename>
    <class kind="class">std::time_get_byname::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>date_order</name>
      <anchorfile>en/cpp/locale/time_get/date_order.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_date_order</name>
      <anchorfile>en/cpp/locale/time_get/date_order.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get</name>
      <anchorfile>en/cpp/locale/time_get/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_date</name>
      <anchorfile>en/cpp/locale/time_get/get_date.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_monthname</name>
      <anchorfile>en/cpp/locale/time_get/get_monthname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_time</name>
      <anchorfile>en/cpp/locale/time_get/get_time.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_weekday</name>
      <anchorfile>en/cpp/locale/time_get/get_weekday.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>do_get_year</name>
      <anchorfile>en/cpp/locale/time_get/get_year.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/locale/time_get/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_date</name>
      <anchorfile>en/cpp/locale/time_get/get_date.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_monthname</name>
      <anchorfile>en/cpp/locale/time_get/get_monthname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_time</name>
      <anchorfile>en/cpp/locale/time_get/get_time.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_weekday</name>
      <anchorfile>en/cpp/locale/time_get/get_weekday.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_year</name>
      <anchorfile>en/cpp/locale/time_get/get_year.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/time_get.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::time_get_byname::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>time_get_byname</name>
      <anchorfile>en/cpp/locale/time_get_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~time_get_byname</name>
      <anchorfile>en/cpp/locale/time_get_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::time_get_byname::char_type</name>
    <filename>cpp/locale/time_get</filename>
  </compound>
  <compound kind="class">
    <name>std::time_get_byname::iter_type</name>
    <filename>cpp/locale/time_get</filename>
  </compound>
  <compound kind="class">
    <name>std::time_put</name>
    <filename>cpp/locale/time_put</filename>
    <class kind="class">std::time_put::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>do_put</name>
      <anchorfile>en/cpp/locale/time_put/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/time_put.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::time_put::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/locale/time_put/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>time_put</name>
      <anchorfile>en/cpp/locale/time_put/time_put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~time_put</name>
      <anchorfile>en/cpp/locale/time_put/~time_put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::time_put::char_type</name>
    <filename>cpp/locale/time_put</filename>
  </compound>
  <compound kind="class">
    <name>std::time_put::iter_type</name>
    <filename>cpp/locale/time_put</filename>
  </compound>
  <compound kind="class">
    <name>std::time_put_byname</name>
    <filename>cpp/locale/time_put_byname</filename>
    <class kind="class">std::time_put_byname::char_type</class>
    <member kind="function">
      <type>T</type>
      <name>do_put</name>
      <anchorfile>en/cpp/locale/time_put/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>id</name>
      <anchorfile>en/cpp/locale/time_put.html</anchorfile>
      <anchor></anchor>
      <arglist></arglist>
    </member>
    <class kind="class">std::time_put_byname::iter_type</class>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/locale/time_put/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>time_put_byname</name>
      <anchorfile>en/cpp/locale/time_put_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~time_put_byname</name>
      <anchorfile>en/cpp/locale/time_put_byname.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::time_put_byname::char_type</name>
    <filename>cpp/locale/time_put</filename>
  </compound>
  <compound kind="class">
    <name>std::time_put_byname::iter_type</name>
    <filename>cpp/locale/time_put</filename>
  </compound>
  <compound kind="class">
    <name>std::time_t</name>
    <filename>cpp/chrono/c/time_t</filename>
  </compound>
  <compound kind="class">
    <name>std::timed_mutex</name>
    <filename>cpp/thread/timed_mutex</filename>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/thread/timed_mutex/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>native_handle</name>
      <anchorfile>en/cpp/thread/timed_mutex/native_handle.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>timed_mutex</name>
      <anchorfile>en/cpp/thread/timed_mutex/timed_mutex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>en/cpp/thread/timed_mutex/try_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_for</name>
      <anchorfile>en/cpp/thread/timed_mutex/try_lock_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_until</name>
      <anchorfile>en/cpp/thread/timed_mutex/try_lock_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock</name>
      <anchorfile>en/cpp/thread/timed_mutex/unlock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tm</name>
    <filename>cpp/chrono/c/tm</filename>
  </compound>
  <compound kind="class">
    <name>std::true_type</name>
    <filename>cpp/types/integral_constant</filename>
  </compound>
  <compound kind="class">
    <name>std::try_to_lock_t</name>
    <filename>cpp/thread/lock_tag_t</filename>
  </compound>
  <compound kind="class">
    <name>std::tuple</name>
    <filename>cpp/utility/tuple</filename>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/utility/tuple/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/utility/tuple/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tuple</name>
      <anchorfile>en/cpp/utility/tuple/tuple.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::type_identity</name>
    <filename>cpp/types/type_identity</filename>
  </compound>
  <compound kind="class">
    <name>std::type_identity_t</name>
    <filename>cpp/types/type_identity</filename>
  </compound>
  <compound kind="class">
    <name>std::type_index</name>
    <filename>cpp/types/type_index</filename>
    <member kind="function">
      <type>T</type>
      <name>hash_code</name>
      <anchorfile>en/cpp/types/type_index/hash_code.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>name</name>
      <anchorfile>en/cpp/types/type_index/name.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/types/type_index/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;</name>
      <anchorfile>en/cpp/types/type_index/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;=</name>
      <anchorfile>en/cpp/types/type_index/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/types/type_index/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;</name>
      <anchorfile>en/cpp/types/type_index/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;=</name>
      <anchorfile>en/cpp/types/type_index/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>type_index</name>
      <anchorfile>en/cpp/types/type_index/type_index.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::type_info</name>
    <filename>cpp/types/type_info</filename>
    <member kind="function">
      <type>T</type>
      <name>before</name>
      <anchorfile>en/cpp/types/type_info/before.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash_code</name>
      <anchorfile>en/cpp/types/type_info/hash_code.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>name</name>
      <anchorfile>en/cpp/types/type_info/name.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/types/type_info/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/types/type_info/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::u16streampos</name>
    <filename>cpp/io/fpos</filename>
    <member kind="function">
      <type>T</type>
      <name>state</name>
      <anchorfile>en/cpp/io/fpos/state.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::u16string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u16string</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::u16string_view</name>
    <filename>cpp/string/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string_view/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string_view/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u16string_view</name>
      <anchorfile>en/cpp/string/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::u32streampos</name>
    <filename>cpp/io/fpos</filename>
    <member kind="function">
      <type>T</type>
      <name>state</name>
      <anchorfile>en/cpp/io/fpos/state.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::u32string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u32string</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::u32string_view</name>
    <filename>cpp/string/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string_view/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string_view/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u32string_view</name>
      <anchorfile>en/cpp/string/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::u8string</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u8string</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::u8string_view</name>
    <filename>cpp/string/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string_view/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string_view/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>u8string_view</name>
      <anchorfile>en/cpp/string/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::uint16_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint32_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint64_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint8_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint_fast16_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint_fast32_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint_fast64_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint_fast8_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint_least16_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint_least32_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint_least64_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uint_least8_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uintmax_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::uintptr_t</name>
    <filename>cpp/types/integer</filename>
  </compound>
  <compound kind="class">
    <name>std::unary_function</name>
    <filename>cpp/utility/functional/unary_function</filename>
  </compound>
  <compound kind="class">
    <name>std::unary_negate</name>
    <filename>cpp/utility/functional/unary_negate</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/utility/functional/unary_negate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unary_negate</name>
      <anchorfile>en/cpp/utility/functional/unary_negate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::underflow_error</name>
    <filename>cpp/error/underflow_error</filename>
    <member kind="function">
      <type>T</type>
      <name>underflow_error</name>
      <anchorfile>en/cpp/error/underflow_error/underflow_error.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::underlying_type</name>
    <filename>cpp/types/underlying_type</filename>
  </compound>
  <compound kind="class">
    <name>std::underlying_type_t</name>
    <filename>cpp/types/underlying_type</filename>
  </compound>
  <compound kind="class">
    <name>std::unexpected_handler</name>
    <filename>cpp/error/unexpected_handler</filename>
  </compound>
  <compound kind="class">
    <name>std::uniform_int_distribution</name>
    <filename>cpp/numeric/random/uniform_int_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>a</name>
      <anchorfile>en/cpp/numeric/random/uniform_int_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>b</name>
      <anchorfile>en/cpp/numeric/random/uniform_int_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/uniform_int_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/uniform_int_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/uniform_int_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/uniform_int_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/uniform_int_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uniform_int_distribution</name>
      <anchorfile>en/cpp/numeric/random/uniform_int_distribution/uniform_int_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::uniform_real_distribution</name>
    <filename>cpp/numeric/random/uniform_real_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>a</name>
      <anchorfile>en/cpp/numeric/random/uniform_real_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>b</name>
      <anchorfile>en/cpp/numeric/random/uniform_real_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/uniform_real_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/uniform_real_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/uniform_real_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/uniform_real_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uniform_real_distribution</name>
      <anchorfile>en/cpp/numeric/random/uniform_real_distribution/uniform_real_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::unique_lock</name>
    <filename>cpp/thread/unique_lock</filename>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/thread/unique_lock/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mutex</name>
      <anchorfile>en/cpp/thread/unique_lock/mutex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/thread/unique_lock/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/thread/unique_lock/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>owns_lock</name>
      <anchorfile>en/cpp/thread/unique_lock/owns_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>release</name>
      <anchorfile>en/cpp/thread/unique_lock/release.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/thread/unique_lock/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock</name>
      <anchorfile>en/cpp/thread/unique_lock/try_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_for</name>
      <anchorfile>en/cpp/thread/unique_lock/try_lock_for.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_lock_until</name>
      <anchorfile>en/cpp/thread/unique_lock/try_lock_until.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique_lock</name>
      <anchorfile>en/cpp/thread/unique_lock/unique_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unlock</name>
      <anchorfile>en/cpp/thread/unique_lock/unlock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unique_lock</name>
      <anchorfile>en/cpp/thread/unique_lock/~unique_lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::unique_ptr</name>
    <filename>cpp/memory/unique_ptr</filename>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/memory/unique_ptr/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_deleter</name>
      <anchorfile>en/cpp/memory/unique_ptr/get_deleter.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/memory/unique_ptr/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/memory/unique_ptr/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/memory/unique_ptr/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/memory/unique_ptr/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>release</name>
      <anchorfile>en/cpp/memory/unique_ptr/release.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/memory/unique_ptr/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/memory/unique_ptr/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unique_ptr</name>
      <anchorfile>en/cpp/memory/unique_ptr/unique_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unique_ptr</name>
      <anchorfile>en/cpp/memory/unique_ptr/~unique_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::unordered_map</name>
    <filename>cpp/container/unordered_map</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/container/unordered_map/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/unordered_map/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin(int)</name>
      <anchorfile>en/cpp/container/unordered_map/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket</name>
      <anchorfile>en/cpp/container/unordered_map/bucket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_count</name>
      <anchorfile>en/cpp/container/unordered_map/bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_size</name>
      <anchorfile>en/cpp/container/unordered_map/bucket_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/unordered_map/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin(int)</name>
      <anchorfile>en/cpp/container/unordered_map/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/unordered_map/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend(int)</name>
      <anchorfile>en/cpp/container/unordered_map/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/unordered_map/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/unordered_map/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/unordered_map/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/unordered_map/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/unordered_map/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/unordered_map/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/unordered_map/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end(int)</name>
      <anchorfile>en/cpp/container/unordered_map/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/unordered_map/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/unordered_map/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/unordered_map/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/unordered_map/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/unordered_map/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash_function</name>
      <anchorfile>en/cpp/container/unordered_map/hash_function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/unordered_map/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert_or_assign</name>
      <anchorfile>en/cpp/container/unordered_map/insert_or_assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_eq</name>
      <anchorfile>en/cpp/container/unordered_map/key_eq.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load_factor</name>
      <anchorfile>en/cpp/container/unordered_map/load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_bucket_count</name>
      <anchorfile>en/cpp/container/unordered_map/max_bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_load_factor</name>
      <anchorfile>en/cpp/container/unordered_map/max_load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/unordered_map/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/unordered_map/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/unordered_map/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/unordered_map/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rehash</name>
      <anchorfile>en/cpp/container/unordered_map/rehash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/unordered_map/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/unordered_map/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/unordered_map/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>try_emplace</name>
      <anchorfile>en/cpp/container/unordered_map/try_emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unordered_map</name>
      <anchorfile>en/cpp/container/unordered_map/unordered_map.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unordered_map</name>
      <anchorfile>en/cpp/container/unordered_map/~unordered_map.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::unordered_multimap</name>
    <filename>cpp/container/unordered_multimap</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/unordered_multimap/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin(int)</name>
      <anchorfile>en/cpp/container/unordered_multimap/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket</name>
      <anchorfile>en/cpp/container/unordered_multimap/bucket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_count</name>
      <anchorfile>en/cpp/container/unordered_multimap/bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_size</name>
      <anchorfile>en/cpp/container/unordered_multimap/bucket_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/unordered_multimap/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin(int)</name>
      <anchorfile>en/cpp/container/unordered_multimap/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/unordered_multimap/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend(int)</name>
      <anchorfile>en/cpp/container/unordered_multimap/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/unordered_multimap/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/unordered_multimap/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/unordered_multimap/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/unordered_multimap/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/unordered_multimap/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/unordered_multimap/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/unordered_multimap/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end(int)</name>
      <anchorfile>en/cpp/container/unordered_multimap/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/unordered_multimap/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/unordered_multimap/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/unordered_multimap/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/unordered_multimap/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/unordered_multimap/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash_function</name>
      <anchorfile>en/cpp/container/unordered_multimap/hash_function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/unordered_multimap/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_eq</name>
      <anchorfile>en/cpp/container/unordered_multimap/key_eq.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load_factor</name>
      <anchorfile>en/cpp/container/unordered_multimap/load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_bucket_count</name>
      <anchorfile>en/cpp/container/unordered_multimap/max_bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_load_factor</name>
      <anchorfile>en/cpp/container/unordered_multimap/max_load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/unordered_multimap/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/unordered_multimap/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/unordered_multimap/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rehash</name>
      <anchorfile>en/cpp/container/unordered_multimap/rehash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/unordered_multimap/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/unordered_multimap/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/unordered_multimap/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unordered_multimap</name>
      <anchorfile>en/cpp/container/unordered_multimap/unordered_multimap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unordered_multimap</name>
      <anchorfile>en/cpp/container/unordered_multimap/~unordered_multimap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::unordered_multiset</name>
    <filename>cpp/container/unordered_multiset</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/unordered_multiset/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin(int)</name>
      <anchorfile>en/cpp/container/unordered_multiset/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket</name>
      <anchorfile>en/cpp/container/unordered_multiset/bucket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_count</name>
      <anchorfile>en/cpp/container/unordered_multiset/bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_size</name>
      <anchorfile>en/cpp/container/unordered_multiset/bucket_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/unordered_multiset/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin(int)</name>
      <anchorfile>en/cpp/container/unordered_multiset/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/unordered_multiset/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend(int)</name>
      <anchorfile>en/cpp/container/unordered_multiset/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/unordered_multiset/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/unordered_multiset/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/unordered_multiset/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/unordered_multiset/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/unordered_multiset/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/unordered_multiset/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/unordered_multiset/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end(int)</name>
      <anchorfile>en/cpp/container/unordered_multiset/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/unordered_multiset/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/unordered_multiset/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/unordered_multiset/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/unordered_multiset/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/unordered_multiset/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash_function</name>
      <anchorfile>en/cpp/container/unordered_multiset/hash_function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/unordered_multiset/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_eq</name>
      <anchorfile>en/cpp/container/unordered_multiset/key_eq.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load_factor</name>
      <anchorfile>en/cpp/container/unordered_multiset/load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_bucket_count</name>
      <anchorfile>en/cpp/container/unordered_multiset/max_bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_load_factor</name>
      <anchorfile>en/cpp/container/unordered_multiset/max_load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/unordered_multiset/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/unordered_multiset/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/unordered_multiset/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rehash</name>
      <anchorfile>en/cpp/container/unordered_multiset/rehash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/unordered_multiset/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/unordered_multiset/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/unordered_multiset/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unordered_multiset</name>
      <anchorfile>en/cpp/container/unordered_multiset/unordered_multiset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unordered_multiset</name>
      <anchorfile>en/cpp/container/unordered_multiset/~unordered_multiset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::unordered_set</name>
    <filename>cpp/container/unordered_set</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/unordered_set/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin(int)</name>
      <anchorfile>en/cpp/container/unordered_set/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket</name>
      <anchorfile>en/cpp/container/unordered_set/bucket.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_count</name>
      <anchorfile>en/cpp/container/unordered_set/bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bucket_size</name>
      <anchorfile>en/cpp/container/unordered_set/bucket_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/unordered_set/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin(int)</name>
      <anchorfile>en/cpp/container/unordered_set/begin2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/unordered_set/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend(int)</name>
      <anchorfile>en/cpp/container/unordered_set/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/unordered_set/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>contains</name>
      <anchorfile>en/cpp/container/unordered_set/contains.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>count</name>
      <anchorfile>en/cpp/container/unordered_set/count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/unordered_set/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_hint</name>
      <anchorfile>en/cpp/container/unordered_set/emplace_hint.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/unordered_set/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/unordered_set/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end(int)</name>
      <anchorfile>en/cpp/container/unordered_set/end2.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>equal_range</name>
      <anchorfile>en/cpp/container/unordered_set/equal_range.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/unordered_set/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract</name>
      <anchorfile>en/cpp/container/unordered_set/extract.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/container/unordered_set/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/unordered_set/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>hash_function</name>
      <anchorfile>en/cpp/container/unordered_set/hash_function.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/unordered_set/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>key_eq</name>
      <anchorfile>en/cpp/container/unordered_set/key_eq.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>load_factor</name>
      <anchorfile>en/cpp/container/unordered_set/load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_bucket_count</name>
      <anchorfile>en/cpp/container/unordered_set/max_bucket_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_load_factor</name>
      <anchorfile>en/cpp/container/unordered_set/max_load_factor.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/unordered_set/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>merge</name>
      <anchorfile>en/cpp/container/unordered_set/merge.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/unordered_set/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rehash</name>
      <anchorfile>en/cpp/container/unordered_set/rehash.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/unordered_set/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/unordered_set/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/unordered_set/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unordered_set</name>
      <anchorfile>en/cpp/container/unordered_set/unordered_set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~unordered_set</name>
      <anchorfile>en/cpp/container/unordered_set/~unordered_set.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::unwrap_ref_decay</name>
    <filename>cpp/utility/functional/unwrap_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::unwrap_ref_decay_t</name>
    <filename>cpp/utility/functional/unwrap_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::unwrap_reference</name>
    <filename>cpp/utility/functional/unwrap_reference</filename>
  </compound>
  <compound kind="class">
    <name>std::uses_allocator</name>
    <filename>cpp/memory/uses_allocator</filename>
  </compound>
  <compound kind="class">
    <name>std::valarray</name>
    <filename>cpp/numeric/valarray</filename>
  </compound>
  <compound kind="class">
    <name>std::variant</name>
    <filename>cpp/utility/variant</filename>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/utility/variant/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>index</name>
      <anchorfile>en/cpp/utility/variant/index.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/utility/variant/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/utility/variant/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>valueless_by_exception</name>
      <anchorfile>en/cpp/utility/variant/valueless_by_exception.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>variant</name>
      <anchorfile>en/cpp/utility/variant/variant.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~variant</name>
      <anchorfile>en/cpp/utility/variant/~variant.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::variant_alternative</name>
    <filename>cpp/utility/variant/variant_alternative</filename>
  </compound>
  <compound kind="class">
    <name>std::variant_alternative_t</name>
    <filename>cpp/utility/variant/variant_alternative</filename>
  </compound>
  <compound kind="class">
    <name>std::variant_size</name>
    <filename>cpp/utility/variant/variant_size</filename>
  </compound>
  <compound kind="class">
    <name>std::vector</name>
    <filename>cpp/container/vector</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/container/vector/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/container/vector/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/container/vector/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/container/vector/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/container/vector/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/container/vector/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/container/vector/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/container/vector/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/container/vector/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/container/vector/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/container/vector/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace</name>
      <anchorfile>en/cpp/container/vector/emplace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emplace_back</name>
      <anchorfile>en/cpp/container/vector/emplace_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/container/vector/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/container/vector/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/container/vector/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/container/vector/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/container/vector/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/container/vector/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/container/vector/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/container/vector/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/container/vector/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/container/vector/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/container/vector/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/container/vector/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/container/vector/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/container/vector/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/container/vector/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/container/vector/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/container/vector/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/container/vector/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>vector</name>
      <anchorfile>en/cpp/container/vector/vector.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~vector</name>
      <anchorfile>en/cpp/container/vector/~vector.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::void_t</name>
    <filename>cpp/types/void_t</filename>
  </compound>
  <compound kind="class">
    <name>std::wbuffer_convert</name>
    <filename>cpp/locale/wbuffer_convert</filename>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/locale/wbuffer_convert/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>state</name>
      <anchorfile>en/cpp/locale/wbuffer_convert/state.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wbuffer_convert</name>
      <anchorfile>en/cpp/locale/wbuffer_convert/wbuffer_convert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wbuffer_convert</name>
      <anchorfile>en/cpp/locale/wbuffer_convert/~wbuffer_convert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wcerr</name>
    <filename>cpp/io/cerr</filename>
  </compound>
  <compound kind="class">
    <name>std::wcin</name>
    <filename>cpp/io/cin</filename>
  </compound>
  <compound kind="class">
    <name>std::wclog</name>
    <filename>cpp/io/clog</filename>
  </compound>
  <compound kind="class">
    <name>std::wcmatch</name>
    <filename>cpp/regex/match_results</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/regex/match_results/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>format</name>
      <anchorfile>en/cpp/regex/match_results/format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/regex/match_results/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/match_results/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/regex/match_results/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/regex/match_results/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>position</name>
      <anchorfile>en/cpp/regex/match_results/position.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prefix</name>
      <anchorfile>en/cpp/regex/match_results/prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ready</name>
      <anchorfile>en/cpp/regex/match_results/ready.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/regex/match_results/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/match_results/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>suffix</name>
      <anchorfile>en/cpp/regex/match_results/suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/regex/match_results/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcmatch</name>
      <anchorfile>en/cpp/regex/match_results/match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wcmatch</name>
      <anchorfile>en/cpp/regex/match_results/~match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wcout</name>
    <filename>cpp/io/cout</filename>
  </compound>
  <compound kind="class">
    <name>std::wcregex_iterator</name>
    <filename>cpp/regex/regex_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcregex_iterator</name>
      <anchorfile>en/cpp/regex/regex_iterator/regex_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wcregex_token_iterator</name>
    <filename>cpp/regex/regex_token_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcregex_token_iterator</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/regex_token_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wcsub_match</name>
    <filename>cpp/regex/sub_match</filename>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/regex/sub_match/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/sub_match/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator string_type</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wcsub_match</name>
      <anchorfile>en/cpp/regex/sub_match/sub_match.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::weak_equality</name>
    <filename>cpp/utility/compare/weak_equality</filename>
  </compound>
  <compound kind="class">
    <name>std::weak_ordering</name>
    <filename>cpp/utility/compare/weak_ordering</filename>
    <member kind="function">
      <type>T</type>
      <name>operator partial_ordering</name>
      <anchorfile>en/cpp/utility/compare/weak_ordering.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator weak_equality</name>
      <anchorfile>en/cpp/utility/compare/weak_ordering.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::weak_ptr</name>
    <filename>cpp/memory/weak_ptr</filename>
    <member kind="function">
      <type>T</type>
      <name>expired</name>
      <anchorfile>en/cpp/memory/weak_ptr/expired.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lock</name>
      <anchorfile>en/cpp/memory/weak_ptr/lock.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/memory/weak_ptr/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>owner_before</name>
      <anchorfile>en/cpp/memory/weak_ptr/owner_before.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/memory/weak_ptr/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/memory/weak_ptr/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>use_count</name>
      <anchorfile>en/cpp/memory/weak_ptr/use_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>weak_ptr</name>
      <anchorfile>en/cpp/memory/weak_ptr/weak_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~weak_ptr</name>
      <anchorfile>en/cpp/memory/weak_ptr/~weak_ptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::weibull_distribution</name>
    <filename>cpp/numeric/random/weibull_distribution</filename>
    <member kind="function">
      <type>T</type>
      <name>a</name>
      <anchorfile>en/cpp/numeric/random/weibull_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>b</name>
      <anchorfile>en/cpp/numeric/random/weibull_distribution/params.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>en/cpp/numeric/random/weibull_distribution/max.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>en/cpp/numeric/random/weibull_distribution/min.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>en/cpp/numeric/random/weibull_distribution/operator().html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>param</name>
      <anchorfile>en/cpp/numeric/random/weibull_distribution/param.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reset</name>
      <anchorfile>en/cpp/numeric/random/weibull_distribution/reset.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>weibull_distribution</name>
      <anchorfile>en/cpp/numeric/random/weibull_distribution/weibull_distribution.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wfilebuf</name>
    <filename>cpp/io/basic_filebuf</filename>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_filebuf/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_filebuf/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_filebuf/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_filebuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wfilebuf</name>
      <anchorfile>en/cpp/io/basic_filebuf/basic_filebuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wfilebuf</name>
      <anchorfile>en/cpp/io/basic_filebuf/~basic_filebuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wfstream</name>
    <filename>cpp/io/basic_fstream</filename>
    <class kind="class">std::wfstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_fstream/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wfstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wfstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_fstream/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_fstream/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_fstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wfstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wfstream</name>
      <anchorfile>en/cpp/io/basic_fstream/basic_fstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wfstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wfstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wfstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wfstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wifstream</name>
    <filename>cpp/io/basic_ifstream</filename>
    <class kind="class">std::wifstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_ifstream/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wifstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wifstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_ifstream/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_ifstream/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_ifstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wifstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wifstream</name>
      <anchorfile>en/cpp/io/basic_ifstream/basic_ifstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wifstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wifstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wifstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wifstream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wiostream</name>
    <filename>cpp/io/basic_iostream</filename>
    <class kind="class">std::wiostream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wiostream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wiostream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wiostream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wiostream</name>
      <anchorfile>en/cpp/io/basic_iostream/basic_iostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wiostream</name>
      <anchorfile>en/cpp/io/basic_iostream/~basic_iostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wiostream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wiostream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wiostream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wiostream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wistream</name>
    <filename>cpp/io/basic_istream</filename>
    <class kind="class">std::wistream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wistream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wistream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wistream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wistream</name>
      <anchorfile>en/cpp/io/basic_istream/basic_istream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wistream</name>
      <anchorfile>en/cpp/io/basic_istream/~basic_istream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wistream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wistream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wistream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wistream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wistringstream</name>
    <filename>cpp/io/basic_istringstream</filename>
    <class kind="class">std::wistringstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wistringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wistringstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_istringstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wistringstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_istringstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wistringstream</name>
      <anchorfile>en/cpp/io/basic_istringstream/basic_istringstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wistringstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wistringstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wistringstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wistringstream::sentry</name>
    <filename>cpp/io/basic_istream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wofstream</name>
    <filename>cpp/io/basic_ofstream</filename>
    <class kind="class">std::wofstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>close</name>
      <anchorfile>en/cpp/io/basic_ofstream/close.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wofstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wofstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>is_open</name>
      <anchorfile>en/cpp/io/basic_ofstream/is_open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>open</name>
      <anchorfile>en/cpp/io/basic_ofstream/open.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_ofstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wofstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wofstream</name>
      <anchorfile>en/cpp/io/basic_ofstream/basic_ofstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wofstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wofstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wofstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wofstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wostream</name>
    <filename>cpp/io/basic_ostream</filename>
    <class kind="class">std::wostream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wostream</name>
      <anchorfile>en/cpp/io/basic_ostream/basic_ostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wostream</name>
      <anchorfile>en/cpp/io/basic_ostream/~basic_ostream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wostream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wostream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wostream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wostream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wostringstream</name>
    <filename>cpp/io/basic_ostringstream</filename>
    <class kind="class">std::wostringstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostringstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_ostringstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wostringstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_ostringstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wostringstream</name>
      <anchorfile>en/cpp/io/basic_ostringstream/basic_ostringstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wostringstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wostringstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wostringstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wostringstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wosyncstream</name>
    <filename>cpp/io/basic_osyncstream</filename>
    <class kind="class">std::wosyncstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emit</name>
      <anchorfile>en/cpp/io/basic_osyncstream/emit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wosyncstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wosyncstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_wrapped</name>
      <anchorfile>en/cpp/io/basic_osyncstream/get_wrapped.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_osyncstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wosyncstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wosyncstream</name>
      <anchorfile>en/cpp/io/basic_osyncstream/basic_osyncstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wosyncstream</name>
      <anchorfile>en/cpp/io/basic_osyncstream/~basic_osyncstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wosyncstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wosyncstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wosyncstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wosyncstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_ostream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wregex</name>
    <filename>cpp/regex/basic_regex</filename>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/regex/basic_regex/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/regex/basic_regex/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/regex/basic_regex/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/regex/basic_regex/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>mark_count</name>
      <anchorfile>en/cpp/regex/basic_regex/mark_count.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/basic_regex/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/regex/basic_regex/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wregex</name>
      <anchorfile>en/cpp/regex/basic_regex/basic_regex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wregex</name>
      <anchorfile>en/cpp/regex/basic_regex/~basic_regex.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wsmatch</name>
    <filename>cpp/regex/match_results</filename>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/regex/match_results/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/regex/match_results/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/regex/match_results/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>format</name>
      <anchorfile>en/cpp/regex/match_results/format.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/regex/match_results/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/match_results/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/regex/match_results/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/regex/match_results/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>position</name>
      <anchorfile>en/cpp/regex/match_results/position.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prefix</name>
      <anchorfile>en/cpp/regex/match_results/prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ready</name>
      <anchorfile>en/cpp/regex/match_results/ready.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/regex/match_results/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/match_results/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>suffix</name>
      <anchorfile>en/cpp/regex/match_results/suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/regex/match_results/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wsmatch</name>
      <anchorfile>en/cpp/regex/match_results/match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wsmatch</name>
      <anchorfile>en/cpp/regex/match_results/~match_results.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wsregex_iterator</name>
    <filename>cpp/regex/regex_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wsregex_iterator</name>
      <anchorfile>en/cpp/regex/regex_iterator/regex_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wsregex_token_iterator</name>
    <filename>cpp/regex/regex_token_iterator</filename>
    <member kind="function">
      <type>T</type>
      <name>operator!=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++(int)</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_arith.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator-&gt;</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_star_.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator==</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/operator_cmp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wsregex_token_iterator</name>
      <anchorfile>en/cpp/regex/regex_token_iterator/regex_token_iterator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wssub_match</name>
    <filename>cpp/regex/sub_match</filename>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/regex/sub_match/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/regex/sub_match/length.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator string_type</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/regex/sub_match/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wssub_match</name>
      <anchorfile>en/cpp/regex/sub_match/sub_match.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wstreambuf</name>
    <filename>cpp/io/basic_streambuf</filename>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_streambuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstreambuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/basic_streambuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wstreambuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/~basic_streambuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wstreampos</name>
    <filename>cpp/io/fpos</filename>
    <member kind="function">
      <type>T</type>
      <name>state</name>
      <anchorfile>en/cpp/io/fpos/state.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wstring</name>
    <filename>cpp/string/basic_string</filename>
    <member kind="function">
      <type>T</type>
      <name>append</name>
      <anchorfile>en/cpp/string/basic_string/append.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>assign</name>
      <anchorfile>en/cpp/string/basic_string/assign.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>c_str</name>
      <anchorfile>en/cpp/string/basic_string/c_str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>capacity</name>
      <anchorfile>en/cpp/string/basic_string/capacity.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/string/basic_string/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>erase</name>
      <anchorfile>en/cpp/string/basic_string/erase.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/string/basic_string/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>insert</name>
      <anchorfile>en/cpp/string/basic_string/insert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator basic_string_view</name>
      <anchorfile>en/cpp/string/basic_string/operator_basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator+=</name>
      <anchorfile>en/cpp/string/basic_string/operator+=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>en/cpp/string/basic_string/pop_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>push_back</name>
      <anchorfile>en/cpp/string/basic_string/push_back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>replace</name>
      <anchorfile>en/cpp/string/basic_string/replace.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reserve</name>
      <anchorfile>en/cpp/string/basic_string/reserve.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>resize</name>
      <anchorfile>en/cpp/string/basic_string/resize.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>shrink_to_fit</name>
      <anchorfile>en/cpp/string/basic_string/shrink_to_fit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstring</name>
      <anchorfile>en/cpp/string/basic_string/basic_string.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wstring_convert</name>
    <filename>cpp/locale/wstring_convert</filename>
    <member kind="function">
      <type>T</type>
      <name>converted</name>
      <anchorfile>en/cpp/locale/wstring_convert/converted.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>from_bytes</name>
      <anchorfile>en/cpp/locale/wstring_convert/from_bytes.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>state</name>
      <anchorfile>en/cpp/locale/wstring_convert/state.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>to_bytes</name>
      <anchorfile>en/cpp/locale/wstring_convert/to_bytes.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstring_convert</name>
      <anchorfile>en/cpp/locale/wstring_convert/wstring_convert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wstring_convert</name>
      <anchorfile>en/cpp/locale/wstring_convert/~wstring_convert.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wstring_view</name>
    <filename>cpp/string/basic_string_view</filename>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>en/cpp/string/basic_string_view/at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>en/cpp/string/basic_string_view/back.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/begin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cend</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>compare</name>
      <anchorfile>en/cpp/string/basic_string_view/compare.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copy</name>
      <anchorfile>en/cpp/string/basic_string_view/copy.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>crend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>data</name>
      <anchorfile>en/cpp/string/basic_string_view/data.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>empty</name>
      <anchorfile>en/cpp/string/basic_string_view/empty.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>en/cpp/string/basic_string_view/end.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ends_with</name>
      <anchorfile>en/cpp/string/basic_string_view/ends_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find</name>
      <anchorfile>en/cpp/string/basic_string_view/find.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_first_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_first_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_not_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_not_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>find_last_of</name>
      <anchorfile>en/cpp/string/basic_string_view/find_last_of.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>en/cpp/string/basic_string_view/front.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_size</name>
      <anchorfile>en/cpp/string/basic_string_view/max_size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/string/basic_string_view/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>en/cpp/string/basic_string_view/operator_at.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rbegin</name>
      <anchorfile>en/cpp/string/basic_string_view/rbegin.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_prefix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_prefix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove_suffix</name>
      <anchorfile>en/cpp/string/basic_string_view/remove_suffix.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rend</name>
      <anchorfile>en/cpp/string/basic_string_view/rend.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rfind</name>
      <anchorfile>en/cpp/string/basic_string_view/rfind.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>size</name>
      <anchorfile>en/cpp/string/basic_string_view/size.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>starts_with</name>
      <anchorfile>en/cpp/string/basic_string_view/starts_with.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>substr</name>
      <anchorfile>en/cpp/string/basic_string_view/substr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/string/basic_string_view/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstring_view</name>
      <anchorfile>en/cpp/string/basic_string_view/basic_string_view.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wstringbuf</name>
    <filename>cpp/io/basic_stringbuf</filename>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_stringbuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_stringbuf/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstringbuf</name>
      <anchorfile>en/cpp/io/basic_stringbuf/basic_stringbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wstringstream</name>
    <filename>cpp/io/basic_stringstream</filename>
    <class kind="class">std::wstringstream::Init</class>
    <member kind="function">
      <type>T</type>
      <name>bad</name>
      <anchorfile>en/cpp/io/basic_ios/bad.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>clear</name>
      <anchorfile>en/cpp/io/basic_ios/clear.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>copyfmt</name>
      <anchorfile>en/cpp/io/basic_ios/copyfmt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>eof</name>
      <anchorfile>en/cpp/io/basic_ios/eof.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wstringstream::event_callback</class>
    <member kind="function">
      <type>T</type>
      <name>exceptions</name>
      <anchorfile>en/cpp/io/basic_ios/exceptions.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fail</name>
      <anchorfile>en/cpp/io/basic_ios/fail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wstringstream::failure</class>
    <member kind="function">
      <type>T</type>
      <name>fill</name>
      <anchorfile>en/cpp/io/basic_ios/fill.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flags</name>
      <anchorfile>en/cpp/io/ios_base/flags.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>flush</name>
      <anchorfile>en/cpp/io/basic_ostream/flush.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gcount</name>
      <anchorfile>en/cpp/io/basic_istream/gcount.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>en/cpp/io/basic_istream/get.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getline</name>
      <anchorfile>en/cpp/io/basic_istream/getline.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/ios_base/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>good</name>
      <anchorfile>en/cpp/io/basic_ios/good.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ignore</name>
      <anchorfile>en/cpp/io/basic_istream/ignore.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_ios/imbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>init</name>
      <anchorfile>en/cpp/io/basic_ios/init.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>iword</name>
      <anchorfile>en/cpp/io/ios_base/iword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>move</name>
      <anchorfile>en/cpp/io/basic_ios/move.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>narrow</name>
      <anchorfile>en/cpp/io/basic_ios/narrow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_ios/operator_bool.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator!</name>
      <anchorfile>en/cpp/io/basic_ios/operator!.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>en/cpp/io/basic_ostream/operator_ltlt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_stringstream/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>en/cpp/io/basic_istream/operator_gtgt.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>peek</name>
      <anchorfile>en/cpp/io/basic_istream/peek.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>precision</name>
      <anchorfile>en/cpp/io/ios_base/precision.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>put</name>
      <anchorfile>en/cpp/io/basic_ostream/put.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>putback</name>
      <anchorfile>en/cpp/io/basic_istream/putback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pword</name>
      <anchorfile>en/cpp/io/ios_base/pword.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rdstate</name>
      <anchorfile>en/cpp/io/basic_ios/rdstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>en/cpp/io/basic_istream/read.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readsome</name>
      <anchorfile>en/cpp/io/basic_istream/readsome.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>register_callback</name>
      <anchorfile>en/cpp/io/ios_base/register_callback.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekg</name>
      <anchorfile>en/cpp/io/basic_istream/seekg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekp</name>
      <anchorfile>en/cpp/io/basic_ostream/seekp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <class kind="class">std::wstringstream::sentry</class>
    <member kind="function">
      <type>T</type>
      <name>set_rdbuf</name>
      <anchorfile>en/cpp/io/basic_ios/set_rdbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setf</name>
      <anchorfile>en/cpp/io/ios_base/setf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setstate</name>
      <anchorfile>en/cpp/io/basic_ios/setstate.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>str</name>
      <anchorfile>en/cpp/io/basic_stringstream/str.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_ios/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_istream/sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync_with_stdio</name>
      <anchorfile>en/cpp/io/ios_base/sync_with_stdio.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellg</name>
      <anchorfile>en/cpp/io/basic_istream/tellg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tellp</name>
      <anchorfile>en/cpp/io/basic_ostream/tellp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tie</name>
      <anchorfile>en/cpp/io/basic_ios/tie.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unget</name>
      <anchorfile>en/cpp/io/basic_istream/unget.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unsetf</name>
      <anchorfile>en/cpp/io/ios_base/unsetf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>widen</name>
      <anchorfile>en/cpp/io/basic_ios/widen.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>width</name>
      <anchorfile>en/cpp/io/ios_base/width.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>write</name>
      <anchorfile>en/cpp/io/basic_ostream/write.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wstringstream</name>
      <anchorfile>en/cpp/io/basic_stringstream/basic_stringstream.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xalloc</name>
      <anchorfile>en/cpp/io/ios_base/xalloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wstringstream::Init</name>
    <filename>cpp/io/ios_base/Init</filename>
  </compound>
  <compound kind="class">
    <name>std::wstringstream::event_callback</name>
    <filename>cpp/io/ios_base/event_callback</filename>
  </compound>
  <compound kind="class">
    <name>std::wstringstream::failure</name>
    <filename>cpp/io/ios_base/failure</filename>
    <member kind="function">
      <type>T</type>
      <name>failure</name>
      <anchorfile>en/cpp/io/ios_base/failure.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>what</name>
      <anchorfile>en/cpp/error/exception/what.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wstringstream::sentry</name>
    <filename>cpp/io/basic_ostream/sentry</filename>
    <member kind="function">
      <type>T</type>
      <name>operator bool</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~sentry</name>
      <anchorfile>en/cpp/io/basic_istream/sentry.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::wsyncbuf</name>
    <filename>cpp/io/basic_syncbuf</filename>
    <member kind="function">
      <type>T</type>
      <name>eback</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>egptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>emit</name>
      <anchorfile>en/cpp/io/basic_syncbuf/emit.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>epptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/gbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_allocator</name>
      <anchorfile>en/cpp/io/basic_syncbuf/get_allocator.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_wrapped</name>
      <anchorfile>en/cpp/io/basic_syncbuf/get_wrapped.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getloc</name>
      <anchorfile>en/cpp/io/basic_streambuf/getloc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>gptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/gptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>imbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>in_avail</name>
      <anchorfile>en/cpp/io/basic_streambuf/in_avail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator=</name>
      <anchorfile>en/cpp/io/basic_syncbuf/operator=.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>overflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/overflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbackfail</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbackfail.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbase</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pbump</name>
      <anchorfile>en/cpp/io/basic_streambuf/pbump.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pptr</name>
      <anchorfile>en/cpp/io/basic_streambuf/pptr.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubimbue</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubimbue.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubseekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsetbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pubsync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sbumpc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sbumpc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekoff</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekoff.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>seekpos</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubseekpos.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>set_emit_on_sync</name>
      <anchorfile>en/cpp/io/basic_syncbuf/set_emit_on_sync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setbuf</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsetbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setg</name>
      <anchorfile>en/cpp/io/basic_streambuf/setg.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>setp</name>
      <anchorfile>en/cpp/io/basic_streambuf/setp.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>showmanyc</name>
      <anchorfile>en/cpp/io/basic_streambuf/showmanyc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>snextc</name>
      <anchorfile>en/cpp/io/basic_streambuf/snextc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputbackc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputbackc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sungetc</name>
      <anchorfile>en/cpp/io/basic_streambuf/sungetc.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>swap</name>
      <anchorfile>en/cpp/io/basic_streambuf/swap.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sync</name>
      <anchorfile>en/cpp/io/basic_streambuf/pubsync.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>uflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/uflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>underflow</name>
      <anchorfile>en/cpp/io/basic_streambuf/underflow.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>wsyncbuf</name>
      <anchorfile>en/cpp/io/basic_syncbuf/basic_syncbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsgetn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sgetn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>xsputn</name>
      <anchorfile>en/cpp/io/basic_streambuf/sputn.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>~wsyncbuf</name>
      <anchorfile>en/cpp/io/basic_syncbuf/~basic_syncbuf.html</anchorfile>
      <anchor></anchor>
      <arglist>(T... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::yocto</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::yotta</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>std::zetta</name>
    <filename>cpp/numeric/ratio/ratio</filename>
  </compound>
  <compound kind="class">
    <name>va_list</name>
    <filename>cpp/utility/variadic/va_list</filename>
  </compound>
</tagfile>
